{
  "stats": {
    "suites": 132,
    "tests": 443,
    "passes": 441,
    "pending": 2,
    "failures": 0,
    "start": "2023-06-14T18:50:22.814Z",
    "end": "2023-06-14T18:50:23.118Z",
    "duration": 304,
    "testsRegistered": 443,
    "passPercent": 100,
    "pendingPercent": 0.4514672686230248,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a24184d8-c9ee-4f66-8c93-a3cfe5bf2412",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b7d5a72b-93f0-49c4-aa56-85b1458c5c18",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7c76fa8c-a883-466d-b427-87e8d572b9b9",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAlarm({ type: ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "7b0b5a57-6669-43c5-a910-19dacef37d27",
                  "parentUUID": "7c76fa8c-a883-466d-b427-87e8d572b9b9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    // @ts-ignore\n    unknown: true,\n    type: ICalAlarmType.display\n}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "ef6ab844-a5f2-4929-9a0d-11cb5a4f2eb6",
                  "parentUUID": "7c76fa8c-a883-466d-b427-87e8d572b9b9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b0b5a57-6669-43c5-a910-19dacef37d27",
                "ef6ab844-a5f2-4929-9a0d-11cb5a4f2eb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e65f41da-49a6-4332-a6f9-7cb438530a2b",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.type(null));\nassert.deepStrictEqual(a, a.type(ICalAlarmType.display));",
                  "err": {},
                  "uuid": "adbd7f12-ff5f-4772-8485-c737b1bfe26b",
                  "parentUUID": "e65f41da-49a6-4332-a6f9-7cb438530a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAlarmType.display);\nassert.strictEqual(a.type(), 'display');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "dc493316-81f7-455d-b2f7-b6f3bfc6ec87",
                  "parentUUID": "e65f41da-49a6-4332-a6f9-7cb438530a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "9b3f3f33-b8f5-4f7b-8f05-f3c70b2b6a98",
                  "parentUUID": "e65f41da-49a6-4332-a6f9-7cb438530a2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 60 * 10\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "3633ec44-9a44-4796-babc-5c95dff893db",
                  "parentUUID": "e65f41da-49a6-4332-a6f9-7cb438530a2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "adbd7f12-ff5f-4772-8485-c737b1bfe26b",
                "dc493316-81f7-455d-b2f7-b6f3bfc6ec87",
                "9b3f3f33-b8f5-4f7b-8f05-f3c70b2b6a98",
                "3633ec44-9a44-4796-babc-5c95dff893db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea588589-0723-4fe3-854c-6cc30f3e4338",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.trigger(null));\nassert.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "3d9168ec-dcc7-4bd4-a18e-3a4c564b089d",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert.strictEqual(a.trigger(), 300);\nassert.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "b77c832a-7921-4d28-8392-3a264e4f5e73",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "1c5df8f8-ab47-4144-8fb2-57938a99bc61",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(60 * 10);\na.trigger(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "00b859c7-d35e-40e2-9eec-673bc552cdb9",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(new Date());\nassert.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "4b317c9d-2fdb-435d-b634-811f478923c8",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "68b8c96a-9727-4ba8-aa56-38fa352f16e3",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "97ee2353-061a-481a-856f-e3997adcde29",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "6a428e2c-e5f0-4e7b-abab-8b53e658c7fe",
                  "parentUUID": "ea588589-0723-4fe3-854c-6cc30f3e4338",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d9168ec-dcc7-4bd4-a18e-3a4c564b089d",
                "b77c832a-7921-4d28-8392-3a264e4f5e73",
                "1c5df8f8-ab47-4144-8fb2-57938a99bc61",
                "00b859c7-d35e-40e2-9eec-673bc552cdb9",
                "4b317c9d-2fdb-435d-b634-811f478923c8",
                "68b8c96a-9727-4ba8-aa56-38fa352f16e3",
                "97ee2353-061a-481a-856f-e3997adcde29",
                "6a428e2c-e5f0-4e7b-abab-8b53e658c7fe"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a958e2ed-6801-4ce3-8195-faa079ea3973",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "790e1e26-2a37-4eac-9987-bc4e43f4ae6a",
                  "parentUUID": "a958e2ed-6801-4ce3-8195-faa079ea3973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar())).triggerAfter(300);\nassert.strictEqual(a.triggerAfter(), 300);\nassert.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "2850c6a2-cf14-405d-989f-e146f117e067",
                  "parentUUID": "a958e2ed-6801-4ce3-8195-faa079ea3973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerAfter(120);\nassert.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "ea16fb94-b726-4653-8efe-f6a2a618c20d",
                  "parentUUID": "a958e2ed-6801-4ce3-8195-faa079ea3973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "c95ec595-16f7-4edf-b37e-99a824aa56b1",
                  "parentUUID": "a958e2ed-6801-4ce3-8195-faa079ea3973",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('20150201T133845Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerAfter: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "bee3216d-d218-47b3-972b-dfd31a1a1899",
                  "parentUUID": "a958e2ed-6801-4ce3-8195-faa079ea3973",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "790e1e26-2a37-4eac-9987-bc4e43f4ae6a",
                "2850c6a2-cf14-405d-989f-e146f117e067",
                "ea16fb94-b726-4653-8efe-f6a2a618c20d",
                "c95ec595-16f7-4edf-b37e-99a824aa56b1",
                "bee3216d-d218-47b3-972b-dfd31a1a1899"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerBefore(null));\nassert.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "712e4d5a-54cd-4c11-a560-604c7ce26cbb",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "32d59697-b1c3-4a9f-b9a6-87a7d9ef63e2",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "79d39e07-416c-4f55-9b51-6aac2e3ece56",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "415a035f-b66d-4e72-a844-95bea0f19e93",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\na.triggerBefore(now);\nassert.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "f8ff78c7-2f4d-4ab8-b34f-903d5987b70c",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "8426e252-4174-4dea-928d-962366b85fd4",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "470993d9-a318-4a0a-8b2d-3999316e4baa",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerBefore: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "225ea617-f7ee-41eb-ad00-d7ded3a40506",
                  "parentUUID": "4d1e9324-ec3b-47b7-a838-143dd79f5c57",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "712e4d5a-54cd-4c11-a560-604c7ce26cbb",
                "32d59697-b1c3-4a9f-b9a6-87a7d9ef63e2",
                "79d39e07-416c-4f55-9b51-6aac2e3ece56",
                "415a035f-b66d-4e72-a844-95bea0f19e93",
                "f8ff78c7-2f4d-4ab8-b34f-903d5987b70c",
                "8426e252-4174-4dea-928d-962366b85fd4",
                "470993d9-a318-4a0a-8b2d-3999316e4baa",
                "225ea617-f7ee-41eb-ad00-d7ded3a40506"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3d7f814-fa8c-4ef6-8df8-1c58e128f2e2",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.relatesTo(null));\nassert.deepStrictEqual(a, a.relatesTo(ICalAlarmRelatesTo.end));",
                  "err": {},
                  "uuid": "d191eb4c-fa80-4f0f-99a7-866eee46cda5",
                  "parentUUID": "f3d7f814-fa8c-4ef6-8df8-1c58e128f2e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.relatesTo(), null);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.strictEqual(a.relatesTo(), ICalAlarmRelatesTo.end);\na.relatesTo(null);\nassert.strictEqual(a.relatesTo(), null);",
                  "err": {},
                  "uuid": "d76715bb-39af-4485-aa1e-efce0c8705a2",
                  "parentUUID": "f3d7f814-fa8c-4ef6-8df8-1c58e128f2e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo('hi');\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(true);\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(Infinity);\n}, /`relatesTo`/);",
                  "err": {},
                  "uuid": "2feec260-d862-4ffe-9239-e9bfdc4d276f",
                  "parentUUID": "f3d7f814-fa8c-4ef6-8df8-1c58e128f2e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display, triggerBefore: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('RELATED=START') === -1);\na.relatesTo(ICalAlarmRelatesTo.start);\nassert.ok(a.toString().indexOf('RELATED=START') > -1);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.ok(a.toString().indexOf('RELATED=END') > -1);",
                  "err": {},
                  "uuid": "19cd5def-40a7-4ad8-8f11-788277b492e5",
                  "parentUUID": "f3d7f814-fa8c-4ef6-8df8-1c58e128f2e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d191eb4c-fa80-4f0f-99a7-866eee46cda5",
                "d76715bb-39af-4485-aa1e-efce0c8705a2",
                "2feec260-d862-4ffe-9239-e9bfdc4d276f",
                "19cd5def-40a7-4ad8-8f11-788277b492e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af9afbdb-5344-440a-99b2-0faa53f28f5e",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.repeat(null));\nassert.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "04a0197f-d9d4-4a45-a2df-f14738136472",
                  "parentUUID": "af9afbdb-5344-440a-99b2-0faa53f28f5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.repeat(), null);\na.repeat(100);\nassert.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "ed43553e-930f-4df4-a8bc-57ff12444812",
                  "parentUUID": "af9afbdb-5344-440a-99b2-0faa53f28f5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "dd8f175f-bba2-432b-82d8-21a3232b55fe",
                  "parentUUID": "af9afbdb-5344-440a-99b2-0faa53f28f5e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "823f3d97-4ebf-4891-a197-b2b258695bc8",
                  "parentUUID": "af9afbdb-5344-440a-99b2-0faa53f28f5e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "04a0197f-d9d4-4a45-a2df-f14738136472",
                "ed43553e-930f-4df4-a8bc-57ff12444812",
                "dd8f175f-bba2-432b-82d8-21a3232b55fe",
                "823f3d97-4ebf-4891-a197-b2b258695bc8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "812adbdc-7bb3-48f7-b33d-0b6e632bdf80",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.interval(null));\nassert.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "a92da6eb-fded-4e8c-9e24-31923cd9b9a8",
                  "parentUUID": "812adbdc-7bb3-48f7-b33d-0b6e632bdf80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.interval(), null);\na.interval(30);\nassert.strictEqual(a.interval(), 30);\na.interval(null);\nassert.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "9f1d45da-bfa0-4add-acdd-509c9e20d4dd",
                  "parentUUID": "812adbdc-7bb3-48f7-b33d-0b6e632bdf80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "fc049fb9-1b14-46ce-b5c8-b9b99f7e9dec",
                  "parentUUID": "812adbdc-7bb3-48f7-b33d-0b6e632bdf80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "f8438310-4aae-4318-ad87-cbdc6bbd24f6",
                  "parentUUID": "812adbdc-7bb3-48f7-b33d-0b6e632bdf80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a92da6eb-fded-4e8c-9e24-31923cd9b9a8",
                "9f1d45da-bfa0-4add-acdd-509c9e20d4dd",
                "fc049fb9-1b14-46ce-b5c8-b9b99f7e9dec",
                "f8438310-4aae-4318-ad87-cbdc6bbd24f6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "828f44c5-7b27-4078-bd31-7cb988732ad1",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.attach(null));\nassert.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "4a4eb624-46d3-4d96-a359-fb17cc837279",
                  "parentUUID": "828f44c5-7b27-4078-bd31-7cb988732ad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.attach(), null);\na.attach(t);\nassert.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "49c225ae-5508-4738-9f66-820035dc7bba",
                  "parentUUID": "828f44c5-7b27-4078-bd31-7cb988732ad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "7b8bc3ca-f708-4742-9a5d-a63492d4c60c",
                  "parentUUID": "828f44c5-7b27-4078-bd31-7cb988732ad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "a15080f4-6d81-4f17-a38b-a0ac213bab9c",
                  "parentUUID": "828f44c5-7b27-4078-bd31-7cb988732ad1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.audio,\n    trigger: 300\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "4dfe1fa4-6f51-4835-824b-1be4ac841f88",
                  "parentUUID": "828f44c5-7b27-4078-bd31-7cb988732ad1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a4eb624-46d3-4d96-a359-fb17cc837279",
                "49c225ae-5508-4738-9f66-820035dc7bba",
                "7b8bc3ca-f708-4742-9a5d-a63492d4c60c",
                "a15080f4-6d81-4f17-a38b-a0ac213bab9c",
                "4dfe1fa4-6f51-4835-824b-1be4ac841f88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6cce075f-8439-4ca2-81ee-08ab736d5d4d",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.description(null));\nassert.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "339a9b7e-ed96-4fcc-b8ce-ca59bf4b8b64",
                  "parentUUID": "6cce075f-8439-4ca2-81ee-08ab736d5d4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "a4cbd3e3-e886-458a-8d21-cf8c3533aea7",
                  "parentUUID": "6cce075f-8439-4ca2-81ee-08ab736d5d4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "248b3e4a-3eb2-4626-a208-b3977771cee2",
                  "parentUUID": "6cce075f-8439-4ca2-81ee-08ab736d5d4d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300\n}, new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "a40b9416-f3b5-438a-a1c6-bb6ee4fd100a",
                  "parentUUID": "6cce075f-8439-4ca2-81ee-08ab736d5d4d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "339a9b7e-ed96-4fcc-b8ce-ca59bf4b8b64",
                "a4cbd3e3-e886-458a-8d21-cf8c3533aea7",
                "248b3e4a-3eb2-4626-a208-b3977771cee2",
                "a40b9416-f3b5-438a-a1c6-bb6ee4fd100a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6688c07d-ce18-4b47-9d1f-451575fb334a",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "a31c86a5-e432-4c1c-bcf6-5eeebf839e64",
                  "parentUUID": "6688c07d-ce18-4b47-9d1f-451575fb334a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a31c86a5-e432-4c1c-bcf6-5eeebf839e64"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "56d6f185-ba97-4dc4-952b-ea0ae0416c16",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.type(ICalAlarmType.display);\na.trigger(120);\nassert.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    relatesTo: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "96613f20-7d15-4d5f-a39e-3d5298326f5d",
                  "parentUUID": "56d6f185-ba97-4dc4-952b-ea0ae0416c16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAlarm(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "56794433-c9bd-49a6-bb36-bccc9387b46f",
                  "parentUUID": "56d6f185-ba97-4dc4-952b-ea0ae0416c16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96613f20-7d15-4d5f-a39e-3d5298326f5d",
                "56794433-c9bd-49a6-bb36-bccc9387b46f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4cf3bf73-7010-4222-9183-2b2e6c2a15b6",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ trigger: 300 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "284d3146-8c0d-4cd8-8075-8d45f922b833",
                  "parentUUID": "4cf3bf73-7010-4222-9183-2b2e6c2a15b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "125914f9-15e6-4680-b67c-cf1ee35b0af1",
                  "parentUUID": "4cf3bf73-7010-4222-9183-2b2e6c2a15b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 300, repeat: 4 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "17545b1a-bd5b-4a67-973b-138aa7fc1cd5",
                  "parentUUID": "4cf3bf73-7010-4222-9183-2b2e6c2a15b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "565dbef2-1fc1-4bc6-a6ef-2113b6070b47",
                  "parentUUID": "4cf3bf73-7010-4222-9183-2b2e6c2a15b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "284d3146-8c0d-4cd8-8075-8d45f922b833",
                "125914f9-15e6-4680-b67c-cf1ee35b0af1",
                "17545b1a-bd5b-4a67-973b-138aa7fc1cd5",
                "565dbef2-1fc1-4bc6-a6ef-2113b6070b47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "cc698830-66bd-49f8-b0d2-324a8c5f2a35",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c5d884e-00fa-4ba4-9fde-8205db0dd396",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: ICalAttendeeStatus.ACCEPTED,\n    role: ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new ICalAttendee(data, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "622c50b6-ceff-4c58-9f08-5888cae02e8f",
                  "parentUUID": "3c5d884e-00fa-4ba4-9fde-8205db0dd396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAttendee({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "90d2c16b-5a8d-4850-9e22-fe1373f50565",
                  "parentUUID": "3c5d884e-00fa-4ba4-9fde-8205db0dd396",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "622c50b6-ceff-4c58-9f08-5888cae02e8f",
                "90d2c16b-5a8d-4850-9e22-fe1373f50565"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a987a88d-4104-4b08-9515-e6a8d9aaa64e",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.name(), null);\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "0756dddf-ad99-4228-8f98-844712c763c3",
                  "parentUUID": "a987a88d-4104-4b08-9515-e6a8d9aaa64e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.name(null));\nassert.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "d9bbe7c1-e7d6-41ec-82fe-cf750d3dab70",
                  "parentUUID": "a987a88d-4104-4b08-9515-e6a8d9aaa64e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "b3036c6f-8151-4df4-83fd-3e014c8a2c59",
                  "parentUUID": "a987a88d-4104-4b08-9515-e6a8d9aaa64e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0756dddf-ad99-4228-8f98-844712c763c3",
                "d9bbe7c1-e7d6-41ec-82fe-cf750d3dab70",
                "b3036c6f-8151-4df4-83fd-3e014c8a2c59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "620777b2-27fc-4f39-a6e7-85085e393fac",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).email('foo@example.com');\nassert.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "d5facf5b-b3a4-47eb-8f28-42aef6b85a80",
                  "parentUUID": "620777b2-27fc-4f39-a6e7-85085e393fac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "9c075a12-bbc7-43bd-a491-e7d855125e06",
                  "parentUUID": "620777b2-27fc-4f39-a6e7-85085e393fac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "e93f8f44-a83b-4896-8db9-f24adafb1dc9",
                  "parentUUID": "620777b2-27fc-4f39-a6e7-85085e393fac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5facf5b-b3a4-47eb-8f28-42aef6b85a80",
                "9c075a12-bbc7-43bd-a491-e7d855125e06",
                "e93f8f44-a83b-4896-8db9-f24adafb1dc9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5865fe5f-2991-4d2a-a92c-a70ce0027f78",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "ec8f6300-fa65-4b1b-a8b8-66180ac028a4",
                  "parentUUID": "5865fe5f-2991-4d2a-a92c-a70ce0027f78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.mailto(null));\nassert.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "eb075bac-6fc9-42ca-b4b2-538d973a1586",
                  "parentUUID": "5865fe5f-2991-4d2a-a92c-a70ce0027f78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\na.mailto('mail2@example2.com');\nassert.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "b515a409-24bc-4101-bb00-fde2beb820ee",
                  "parentUUID": "5865fe5f-2991-4d2a-a92c-a70ce0027f78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec8f6300-fa65-4b1b-a8b8-66180ac028a4",
                "eb075bac-6fc9-42ca-b4b2-538d973a1586",
                "b515a409-24bc-4101-bb00-fde2beb820ee"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2143aeeb-04dd-4372-82a5-23f40b739643",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).sentBy('foo@example.com');\nassert.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "a8b1c24a-cb4f-47f3-a8ae-8a58f6dea562",
                  "parentUUID": "2143aeeb-04dd-4372-82a5-23f40b739643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "2a271e2d-1e9e-472c-8761-b514d9a9fd0c",
                  "parentUUID": "2143aeeb-04dd-4372-82a5-23f40b739643",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "c9f2f166-d7e3-4184-85d3-47c08e6a3eb6",
                  "parentUUID": "2143aeeb-04dd-4372-82a5-23f40b739643",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8b1c24a-cb4f-47f3-a8ae-8a58f6dea562",
                "2a271e2d-1e9e-472c-8761-b514d9a9fd0c",
                "c9f2f166-d7e3-4184-85d3-47c08e6a3eb6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.role(ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "4b9a1208-0d36-4f76-9c95-bea058d35687",
                  "parentUUID": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).role(ICalAttendeeRole.REQ);\nassert.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "5db98822-902d-4410-9593-66d023fffaba",
                  "parentUUID": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "88df586f-4da4-4d0e-a869-bd86888d9c88",
                  "parentUUID": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "2c7c3e12-78a3-453a-8338-0eae7189a5da",
                  "parentUUID": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    role: ICalAttendeeRole.NON\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "d4bf0deb-5074-4475-97e3-b1ad4d846cbb",
                  "parentUUID": "1c4a8ad4-4457-43a3-9218-65f60d9c155c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b9a1208-0d36-4f76-9c95-bea058d35687",
                "5db98822-902d-4410-9593-66d023fffaba",
                "88df586f-4da4-4d0e-a869-bd86888d9c88",
                "2c7c3e12-78a3-453a-8338-0eae7189a5da",
                "d4bf0deb-5074-4475-97e3-b1ad4d846cbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfd6192d-0760-4890-a742-32ed9d7bfa3e",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.rsvp(null));\nassert.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "d2a2e00a-51d6-4b49-afa7-0d6d1a47d993",
                  "parentUUID": "dfd6192d-0760-4890-a742-32ed9d7bfa3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.rsvp(true);\nassert.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "1eadbe43-d18b-40c8-9cb8-92d9c58814a9",
                  "parentUUID": "dfd6192d-0760-4890-a742-32ed9d7bfa3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "2c3e337d-9923-4f5d-a120-849b8c2b65a8",
                  "parentUUID": "dfd6192d-0760-4890-a742-32ed9d7bfa3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    rsvp: true\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "17f83e46-da2a-4239-ad41-973b2f0b7e9f",
                  "parentUUID": "dfd6192d-0760-4890-a742-32ed9d7bfa3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d2a2e00a-51d6-4b49-afa7-0d6d1a47d993",
                "1eadbe43-d18b-40c8-9cb8-92d9c58814a9",
                "2c3e337d-9923-4f5d-a120-849b8c2b65a8",
                "17f83e46-da2a-4239-ad41-973b2f0b7e9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33b8676e-70d5-44c3-a610-4dea2031d148",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.status(null));\nassert.deepStrictEqual(a, a.status(ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "5f8989ee-3745-45a6-a45a-f85a06f30563",
                  "parentUUID": "33b8676e-70d5-44c3-a610-4dea2031d148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.status(), null);\na.status(ICalAttendeeStatus.ACCEPTED);\nassert.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "467c9cad-45a7-4ed1-b49f-f88697a24ee9",
                  "parentUUID": "33b8676e-70d5-44c3-a610-4dea2031d148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "e869bd18-42be-42b9-8f93-dfbeee8838ac",
                  "parentUUID": "33b8676e-70d5-44c3-a610-4dea2031d148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.DECLINED }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "c5ea30b0-102a-4491-9ed7-f2d6cf14d1df",
                  "parentUUID": "33b8676e-70d5-44c3-a610-4dea2031d148",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.NEEDSACTION }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "c097c69d-ea7b-4d6b-b4ef-25dff8ef8126",
                  "parentUUID": "33b8676e-70d5-44c3-a610-4dea2031d148",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f8989ee-3745-45a6-a45a-f85a06f30563",
                "467c9cad-45a7-4ed1-b49f-f88697a24ee9",
                "e869bd18-42be-42b9-8f93-dfbeee8838ac",
                "c5ea30b0-102a-4491-9ed7-f2d6cf14d1df",
                "c097c69d-ea7b-4d6b-b4ef-25dff8ef8126"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c653269-cb87-4c16-91f9-ff424e1533de",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.type(null), a);\nassert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "f209ed2e-1b2e-4e5b-b3e5-d40b4c11188e",
                  "parentUUID": "2c653269-cb87-4c16-91f9-ff424e1533de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAttendeeType.ROOM);\nassert.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "ea8a7b52-6ee2-44ca-868e-f7c1c110157e",
                  "parentUUID": "2c653269-cb87-4c16-91f9-ff424e1533de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "d3bb1124-c701-4ce4-a0df-415633345b8a",
                  "parentUUID": "2c653269-cb87-4c16-91f9-ff424e1533de",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mailing-list@example.com',\n    type: ICalAttendeeType.GROUP\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "18786b8c-487b-4b43-97eb-5b581e1accaf",
                  "parentUUID": "2c653269-cb87-4c16-91f9-ff424e1533de",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f209ed2e-1b2e-4e5b-b3e5-d40b4c11188e",
                "ea8a7b52-6ee2-44ca-868e-f7c1c110157e",
                "d3bb1124-c701-4ce4-a0df-415633345b8a",
                "18786b8c-487b-4b43-97eb-5b581e1accaf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06a29fd0-7a19-45fd-b824-300aca0095af",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedTo(null));\nassert.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "a35065c6-760f-477a-b030-6b3cf68fcfd4",
                  "parentUUID": "06a29fd0-7a19-45fd-b824-300aca0095af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "0a7a8233-c52f-4800-bf94-bc3e8c87be96",
                  "parentUUID": "06a29fd0-7a19-45fd-b824-300aca0095af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "6d9a7120-a969-48e1-9d02-0e75ed246f82",
                  "parentUUID": "06a29fd0-7a19-45fd-b824-300aca0095af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a35065c6-760f-477a-b030-6b3cf68fcfd4",
                "0a7a8233-c52f-4800-bf94-bc3e8c87be96",
                "6d9a7120-a969-48e1-9d02-0e75ed246f82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c56ef9aa-80f4-4c85-9f0a-8ee04954971f",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedFrom(null));\nassert.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "db3b021c-0f94-4d65-9b0f-6e6524409f62",
                  "parentUUID": "c56ef9aa-80f4-4c85-9f0a-8ee04954971f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nlet result = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom({\n    name: 'Max Mustermann',\n    email: 'max.mustermann@example.com'\n});\nresult = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.name(), 'Max Mustermann');\nassert.strictEqual(result.email(), 'max.mustermann@example.com');\na.delegatedFrom(null);\nassert.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "08ea6900-52e2-4a06-b8c0-3db41895f7bb",
                  "parentUUID": "c56ef9aa-80f4-4c85-9f0a-8ee04954971f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "5aac7292-2787-43ea-be56-1ef21261a065",
                  "parentUUID": "c56ef9aa-80f4-4c85-9f0a-8ee04954971f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "db3b021c-0f94-4d65-9b0f-6e6524409f62",
                "08ea6900-52e2-4a06-b8c0-3db41895f7bb",
                "5aac7292-2787-43ea-be56-1ef21261a065"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "390e97b3-b075-4890-bcd3-f10fe1c0d989",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesTo({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "1f9ac9e7-420b-4822-b84d-2bb7c4304cac",
                  "parentUUID": "390e97b3-b075-4890-bcd3-f10fe1c0d989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "885d31df-700e-4dbf-bf83-6ef3a9cad685",
                  "parentUUID": "390e97b3-b075-4890-bcd3-f10fe1c0d989",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar()))\n    .delegatesTo({ name: 'Cody' });\nassert.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "084ab2a3-5ad1-4feb-8329-cbbbe50edf01",
                  "parentUUID": "390e97b3-b075-4890-bcd3-f10fe1c0d989",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1f9ac9e7-420b-4822-b84d-2bb7c4304cac",
                "885d31df-700e-4dbf-bf83-6ef3a9cad685",
                "084ab2a3-5ad1-4feb-8329-cbbbe50edf01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "19750c2e-16c2-4d6d-b5c8-bae238f0e6c2",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesFrom({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "506277de-df5b-4c7e-953a-df60e4ee4088",
                  "parentUUID": "19750c2e-16c2-4d6d-b5c8-bae238f0e6c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "d7dc2045-1c41-40cf-bc94-08c6b3e80b38",
                  "parentUUID": "19750c2e-16c2-4d6d-b5c8-bae238f0e6c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar())).delegatesFrom({ name: 'Cody' });\nassert.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "69e9214e-c4b2-4af9-8498-dd98f3e52c8b",
                  "parentUUID": "19750c2e-16c2-4d6d-b5c8-bae238f0e6c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "506277de-df5b-4c7e-953a-df60e4ee4088",
                "d7dc2045-1c41-40cf-bc94-08c6b3e80b38",
                "69e9214e-c4b2-4af9-8498-dd98f3e52c8b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe64f341-8b31-4661-8a16-799dfc328ae8",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.org' }, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "8845b8c1-5b33-4b42-b7d4-f4599b4b9f1a",
                  "parentUUID": "fe64f341-8b31-4661-8a16-799dfc328ae8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8845b8c1-5b33-4b42-b7d4-f4599b4b9f1a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae5b20c4-db44-4680-93ee-9d46160d85c2",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "56a3fc1e-0db2-4153-8744-0529e11d9428",
                  "parentUUID": "ae5b20c4-db44-4680-93ee-9d46160d85c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAttendee(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "edd65be7-cad3-42bb-a817-b621ff997b99",
                  "parentUUID": "ae5b20c4-db44-4680-93ee-9d46160d85c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56a3fc1e-0db2-4153-8744-0529e11d9428",
                "edd65be7-cad3-42bb-a817-b621ff997b99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f98698f9-e3aa-41ce-ba8a-9cc30ca9fc1e",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Testuser' }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "1327d2db-880a-4b2d-9e67-a541d2757ce4",
                  "parentUUID": "f98698f9-e3aa-41ce-ba8a-9cc30ca9fc1e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1327d2db-880a-4b2d-9e67-a541d2757ce4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2f81f5df-d2ad-4116-8ac6-c0d4768fd541",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cc67c0c4-b209-4ca0-ae19-c025dc0c2b22",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new ICalCalendar(data);\nassert.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "53d16ee3-2554-46b4-b91d-23597bdae165",
                  "parentUUID": "cc67c0c4-b209-4ca0-ae19-c025dc0c2b22",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53d16ee3-2554-46b4-b91d-23597bdae165"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d8c841d-e748-4822-95c2-ed60f4a85460",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "82774191-9269-4cb8-8433-b1eb8f03b7db",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "70529f11-5d78-4dda-98f9-a26fd2f897a1",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "70b6bbe2-bc63-4ecf-84d6-6661d316bce8",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "80ffe2d4-b46a-46fa-a70d-1b7487b24cd2",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "a2916350-ffd7-47d1-bd76-399171b257fe",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "07d63c93-e20b-4396-92b5-34abb0b71587",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "c684e0dc-bfa4-432f-ac37-f4b116ad06fc",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "53b20df0-e31a-446a-8c07-6a2cf1279e0f",
                  "parentUUID": "1d8c841d-e748-4822-95c2-ed60f4a85460",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82774191-9269-4cb8-8433-b1eb8f03b7db",
                "70529f11-5d78-4dda-98f9-a26fd2f897a1",
                "70b6bbe2-bc63-4ecf-84d6-6661d316bce8",
                "80ffe2d4-b46a-46fa-a70d-1b7487b24cd2",
                "a2916350-ffd7-47d1-bd76-399171b257fe",
                "07d63c93-e20b-4396-92b5-34abb0b71587",
                "c684e0dc-bfa4-432f-ac37-f4b116ad06fc",
                "53b20df0-e31a-446a-8c07-6a2cf1279e0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2697c560-6614-4452-a769-f246c2ddcd0f",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.deepStrictEqual(c, c.method(null), 'method(null)');\nassert.deepStrictEqual(c, c.method(ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "1315c85e-0fa7-4dc5-a220-49cf10bcb421",
                  "parentUUID": "2697c560-6614-4452-a769-f246c2ddcd0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.strictEqual(c.method(), null);\nc.method(null);\nassert.strictEqual(c.method(), null);\nc.method(ICalCalendarMethod.PUBLISH);\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "e652b548-0787-4b56-9708-64c2d4caeb3d",
                  "parentUUID": "2697c560-6614-4452-a769-f246c2ddcd0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "d5584d4a-cb22-4251-8383-84d616b87b1c",
                  "parentUUID": "2697c560-6614-4452-a769-f246c2ddcd0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar({ method: ICalCalendarMethod.PUBLISH });\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(ICalCalendarMethod.ADD);\nassert.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "89ab7ea7-78da-40de-92f9-30e82b27f6a8",
                  "parentUUID": "2697c560-6614-4452-a769-f246c2ddcd0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1315c85e-0fa7-4dc5-a220-49cf10bcb421",
                "e652b548-0787-4b56-9708-64c2d4caeb3d",
                "d5584d4a-cb22-4251-8383-84d616b87b1c",
                "89ab7ea7-78da-40de-92f9-30e82b27f6a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a057d40-ed44-4d98-becf-5e8ff72bd2ff",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.name(null));\nassert.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "cf5671cc-d01d-4079-82db-bb4e2b103fb8",
                  "parentUUID": "8a057d40-ed44-4d98-becf-5e8ff72bd2ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "2aa90555-929b-4141-9a79-5a1f9d0dbe95",
                  "parentUUID": "8a057d40-ed44-4d98-becf-5e8ff72bd2ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "775412a1-750a-42c5-b627-103da43bdeda",
                  "parentUUID": "8a057d40-ed44-4d98-becf-5e8ff72bd2ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf5671cc-d01d-4079-82db-bb4e2b103fb8",
                "2aa90555-929b-4141-9a79-5a1f9d0dbe95",
                "775412a1-750a-42c5-b627-103da43bdeda"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4be00e7-f494-43ed-86ee-309e50a8b3c6",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.description(null));\nassert.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "9257aaa7-b045-4cca-af39-46f99f784450",
                  "parentUUID": "c4be00e7-f494-43ed-86ee-309e50a8b3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "eb3d0486-6e46-4012-b680-d7cad7d06d73",
                  "parentUUID": "c4be00e7-f494-43ed-86ee-309e50a8b3c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "7ece6cfe-2161-42e4-9674-8a5d2f290d02",
                  "parentUUID": "c4be00e7-f494-43ed-86ee-309e50a8b3c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9257aaa7-b045-4cca-af39-46f99f784450",
                "eb3d0486-6e46-4012-b680-d7cad7d06d73",
                "7ece6cfe-2161-42e4-9674-8a5d2f290d02"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "350ed12a-0bf8-483a-8d67-dc6bd07446cd",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert.deepStrictEqual(cal, cal.timezone(null));\nassert.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "7b848943-7ed0-473e-ab53-35cbc6c8cb2d",
                  "parentUUID": "350ed12a-0bf8-483a-8d67-dc6bd07446cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "765c6450-7e19-49e1-b5f8-44bf967f7440",
                  "parentUUID": "350ed12a-0bf8-483a-8d67-dc6bd07446cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "513b329b-328e-44a7-a730-8e32186c97ac",
                  "parentUUID": "350ed12a-0bf8-483a-8d67-dc6bd07446cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b848943-7ed0-473e-ab53-35cbc6c8cb2d",
                "765c6450-7e19-49e1-b5f8-44bf967f7440",
                "513b329b-328e-44a7-a730-8e32186c97ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d1f7050-7e6e-4d42-80cd-323dfcd2a0ad",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert.deepStrictEqual(cal.ttl(moment.duration(2, 'days')), cal);\nassert.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "70a31296-4cc2-473c-aee3-e64bde068764",
                  "parentUUID": "1d1f7050-7e6e-4d42-80cd-323dfcd2a0ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "51439cd1-4406-4058-b732-fd22c793aa00",
                  "parentUUID": "1d1f7050-7e6e-4d42-80cd-323dfcd2a0ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "fd1920f0-8026-4056-ab1b-dfc90d49d697",
                  "parentUUID": "1d1f7050-7e6e-4d42-80cd-323dfcd2a0ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70a31296-4cc2-473c-aee3-e64bde068764",
                "51439cd1-4406-4058-b732-fd22c793aa00",
                "fd1920f0-8026-4056-ab1b-dfc90d49d697"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6d50cb0e-f86b-40b2-afdc-6f8e4e148166",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "7c2d6e73-c6bd-4b03-8d30-23c9b4823a22",
                  "parentUUID": "6d50cb0e-f86b-40b2-afdc-6f8e4e148166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "2b146c3f-eea2-47f2-a8f5-d840810058d5",
                  "parentUUID": "6d50cb0e-f86b-40b2-afdc-6f8e4e148166",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c2d6e73-c6bd-4b03-8d30-23c9b4823a22",
                "2b146c3f-eea2-47f2-a8f5-d840810058d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c39ade7-b667-4213-b56b-d713ebb976ee",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "038e4c81-299f-4b9a-9a68-a7bf214380eb",
                  "parentUUID": "7c39ade7-b667-4213-b56b-d713ebb976ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "fcdc4f4e-eb25-4b1f-a595-ccaebe8fc3d2",
                  "parentUUID": "7c39ade7-b667-4213-b56b-d713ebb976ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "5296cfcd-4cdc-48e8-afba-9ce6917009d1",
                  "parentUUID": "7c39ade7-b667-4213-b56b-d713ebb976ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "038e4c81-299f-4b9a-9a68-a7bf214380eb",
                "fcdc4f4e-eb25-4b1f-a595-ccaebe8fc3d2",
                "5296cfcd-4cdc-48e8-afba-9ce6917009d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84cdc0fa-1087-4878-a5fc-df452ce7c809",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "d356f3cc-b09b-4b40-84b7-6324606c165e",
                  "parentUUID": "84cdc0fa-1087-4878-a5fc-df452ce7c809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "9335242f-b250-498a-a68c-2741472cfb2d",
                  "parentUUID": "84cdc0fa-1087-4878-a5fc-df452ce7c809",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "36ac1c38-27d0-4330-9a84-40ecd9f5dd8d",
                  "parentUUID": "84cdc0fa-1087-4878-a5fc-df452ce7c809",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d356f3cc-b09b-4b40-84b7-6324606c165e",
                "9335242f-b250-498a-a68c-2741472cfb2d",
                "36ac1c38-27d0-4330-9a84-40ecd9f5dd8d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a5cc164-ce1f-483a-8116-b5293824bf4c",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.ok(cal.createEvent({}) instanceof ICalEvent);",
                  "err": {},
                  "uuid": "933cad5f-b3bb-4acd-8bb2-698d7724c195",
                  "parentUUID": "0a5cc164-ce1f-483a-8116-b5293824bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "abe7f194-234d-4103-bc58-ba554a211976",
                  "parentUUID": "0a5cc164-ce1f-483a-8116-b5293824bf4c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function () {\n    new ICalCalendar().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "81e403c7-bf20-409c-a313-29a809f1e352",
                  "parentUUID": "0a5cc164-ce1f-483a-8116-b5293824bf4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "933cad5f-b3bb-4acd-8bb2-698d7724c195",
                "abe7f194-234d-4103-bc58-ba554a211976",
                "81e403c7-bf20-409c-a313-29a809f1e352"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2437c6bf-e066-4125-a18a-d89e14aa8062",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "bb54985e-e563-45a6-bbde-1fe9776ee211",
                  "parentUUID": "2437c6bf-e066-4125-a18a-d89e14aa8062",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert.strictEqual(cal.length(), 2);\nassert.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "ff97ffff-2475-4ce5-bb0c-c0013ede88d1",
                  "parentUUID": "2437c6bf-e066-4125-a18a-d89e14aa8062",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bb54985e-e563-45a6-bbde-1fe9776ee211",
                "ff97ffff-2475-4ce5-bb0c-c0013ede88d1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45c3aec0-eb7c-4adb-97b0-e8703b08623e",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.clear(), cal);\nassert.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "6180ba27-93cd-4a2d-9add-eeaff95ab777",
                  "parentUUID": "45c3aec0-eb7c-4adb-97b0-e8703b08623e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6180ba27-93cd-4a2d-9add-eeaff95ab777"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "94d1bff3-6e46-41a0-99f3-0db4343a63d7",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.save(file, function () {\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n    assert.deepStrictEqual(cal, cal.save(file, function () {\n        assert.ok(existsSync(file));\n        unlinkSync(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "2aa338a9-c140-4ad9-b4d3-1e0f9fb66074",
                  "parentUUID": "94d1bff3-6e46-41a0-99f3-0db4343a63d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = join(tmpdir(), 'save.ical');\n    const cal = new ICalCalendar();\n    yield cal.save(file);\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n});",
                  "err": {},
                  "uuid": "ab7d1a63-db82-429f-9fd7-be10ba896965",
                  "parentUUID": "94d1bff3-6e46-41a0-99f3-0db4343a63d7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "23fa784d-5fb6-4229-bb49-1a9e7328b8b5",
                  "parentUUID": "94d1bff3-6e46-41a0-99f3-0db4343a63d7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2aa338a9-c140-4ad9-b4d3-1e0f9fb66074",
                "ab7d1a63-db82-429f-9fd7-be10ba896965",
                "23fa784d-5fb6-4229-bb49-1a9e7328b8b5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03e04922-6f52-44e3-b07a-9f77b99527d0",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);",
                  "err": {},
                  "uuid": "562ab396-beed-488e-803b-f8206783b7c3",
                  "parentUUID": "03e04922-6f52-44e3-b07a-9f77b99527d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "381f04bd-81ed-4d58-8f75-e5fdc7b8ccd0",
                  "parentUUID": "03e04922-6f52-44e3-b07a-9f77b99527d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "562ab396-beed-488e-803b-f8206783b7c3",
                "381f04bd-81ed-4d58-8f75-e5fdc7b8ccd0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b65d705-aa81-4e3f-b57b-69dc77b92e45",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield getPortPromise();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "daf68229-100a-487e-96ee-013c49d51c26",
                  "parentUUID": "3b65d705-aa81-4e3f-b57b-69dc77b92e45",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "daf68229-100a-487e-96ee-013c49d51c26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 29,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4b1b2346-1a87-4dff-8cc7-969b4ac5d72b",
              "title": "toBlob()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toBlob() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Blob Calendar Event'\n            }\n        ]\n    });\n    const blob = cal.toBlob();\n    assert.ok(blob instanceof Blob, 'instanceof Blob');\n    assert.ok(blob.size > 0, 'blob is filled');\n    assert.strictEqual(blob.type, 'text/calendar');\n});",
                  "err": {},
                  "uuid": "5ddcdac9-57ec-494a-97bb-5e1f94ce8e2a",
                  "parentUUID": "4b1b2346-1a87-4dff-8cc7-969b4ac5d72b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ddcdac9-57ec-494a-97bb-5e1f94ce8e2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e5cb78a-b774-4f9d-aa69-6980becc3e02",
              "title": "toURL()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toURL() should work",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Calendar URL Event'\n            }\n        ]\n    });\n    const url = cal.toURL();\n    console.log(url);\n    assert.strictEqual(typeof url, 'string');\n    assert.ok(url.length > 0, 'url is not empty');\n});",
                  "err": {},
                  "uuid": "9b67c439-2ca3-4290-9325-156ce986f687",
                  "parentUUID": "5e5cb78a-b774-4f9d-aa69-6980becc3e02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b67c439-2ca3-4290-9325-156ce986f687"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58ae2227-3d93-4858-847f-b19f49cda0da",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "dc083907-0778-42ec-ac1d-c3c5f0c20c9b",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "71c15c14-6381-434d-a95f-28146295053d",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "3d4e6756-9da0-432e-8d6b-1a6c712d11e7",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "53467c80-bdaa-4a44-ad7c-80c1553ec175",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "eab8540b-fb26-4a34-a26a-54a1d859c49c",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "805ad47a-54cd-4b7a-8380-7d3b830267ed",
                  "parentUUID": "58ae2227-3d93-4858-847f-b19f49cda0da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc083907-0778-42ec-ac1d-c3c5f0c20c9b",
                "71c15c14-6381-434d-a95f-28146295053d",
                "3d4e6756-9da0-432e-8d6b-1a6c712d11e7",
                "53467c80-bdaa-4a44-ad7c-80c1553ec175",
                "eab8540b-fb26-4a34-a26a-54a1d859c49c",
                "805ad47a-54cd-4b7a-8380-7d3b830267ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "46be2e9d-853d-469d-a969-1a0109443ef8",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new ICalCalendar();\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nassert.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "62f99332-814a-403c-9559-8eaadd9be28f",
                  "parentUUID": "46be2e9d-853d-469d-a969-1a0109443ef8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "008c32a9-e8e0-4e4d-9340-d23c169f5221",
                  "parentUUID": "46be2e9d-853d-469d-a969-1a0109443ef8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCalendar();\nnew ICalCalendar(a.toJSON());",
                  "err": {},
                  "uuid": "2f33de5d-5a4e-44d0-be19-04a880788301",
                  "parentUUID": "46be2e9d-853d-469d-a969-1a0109443ef8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62f99332-814a-403c-9559-8eaadd9be28f",
                "008c32a9-e8e0-4e4d-9340-d23c169f5221",
                "2f33de5d-5a4e-44d0-be19-04a880788301"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91b5991e-e31a-4bb8-9978-bd2ae1125320",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "f972d4c1-639b-4eca-b75d-a67c907ba7be",
                  "parentUUID": "91b5991e-e31a-4bb8-9978-bd2ae1125320",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f972d4c1-639b-4eca-b75d-a67c907ba7be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.url('https://sebbo.net/foo');\nassert.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "908695b5-ff81-466f-b552-fe4ec5ae2b5a",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.method(ICalCalendarMethod.REFRESH);\nassert.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "b941b9f2-b5f2-41b8-984c-bdae2668fe9a",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.name('TEST');\nassert.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "341ba5e2-bcd8-4fd8-a326-70d22c565bbe",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.description('TEST');\nassert.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "89432e33-46e6-4f54-8855-b47948782d0c",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone('TEST');\nassert.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "d2da52da-9ca4-412d-bc96-e4968324d232",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "6c8ca758-48fd-460b-904c-197705038b76",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'Europe/Berlin', generator: getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "ecb206f6-3854-4479-96af-6542d9473239",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'FOO', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "2a0b629f-ea97-436f-b9c7-16194fd5c846",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: '/Europe/Berlin', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "b62e728c-1bf5-43c0-aa11-55853f6fb91f",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.ttl(moment.duration(3, 'days'));\nassert.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "c599925b-5a8f-4cbf-a687-771cca0fd777",
                  "parentUUID": "89fc449e-197d-40bd-8600-dfb40fc6b8a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "908695b5-ff81-466f-b552-fe4ec5ae2b5a",
                "b941b9f2-b5f2-41b8-984c-bdae2668fe9a",
                "341ba5e2-bcd8-4fd8-a326-70d22c565bbe",
                "89432e33-46e6-4f54-8855-b47948782d0c",
                "d2da52da-9ca4-412d-bc96-e4968324d232",
                "6c8ca758-48fd-460b-904c-197705038b76",
                "ecb206f6-3854-4479-96af-6542d9473239",
                "2a0b629f-ea97-436f-b9c7-16194fd5c846",
                "b62e728c-1bf5-43c0-aa11-55853f6fb91f",
                "c599925b-5a8f-4cbf-a687-771cca0fd777"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d07d882-757f-4dd9-9a02-2679770c705d",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_01.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "1f6d8fd0-d8b1-447f-9217-eb8a3fe4abd5",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_02.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "af9d809a-977a-42c9-8ba6-a5f320e8f172",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({\n        method: ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_03.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "dfa95e77-014f-42a4-a5fd-125fb570a59d",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert.strictEqual(cal.toString(), yield fs.readFile(resultDir + '/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert.strictEqual(ical(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "47f99b48-746a-427c-a38a-c1478aacfe71",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_05.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "d8511698-dc1c-4769-a094-d33b4d0b5863",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN', method: ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Smith, Matt; (\"Sales\")',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_06.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "341de072-7f9d-4a87-99a3-dcf3499d2c3c",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [ICalWeekday.MO, ICalWeekday.WE, ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_07.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "2ccc6d78-2b97-40ba-b844-a68a4770a09b",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_08.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "b02518d7-7f6a-4b71-999e-816a823affc9",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ method: ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_09.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "136f7092-172c-43f8-b903-7795096c4ea9",
              "parentUUID": "3d07d882-757f-4dd9-9a02-2679770c705d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1f6d8fd0-d8b1-447f-9217-eb8a3fe4abd5",
            "af9d809a-977a-42c9-8ba6-a5f320e8f172",
            "dfa95e77-014f-42a4-a5fd-125fb570a59d",
            "47f99b48-746a-427c-a38a-c1478aacfe71",
            "d8511698-dc1c-4769-a094-d33b4d0b5863",
            "341de072-7f9d-4a87-99a3-dcf3499d2c3c",
            "2ccc6d78-2b97-40ba-b844-a68a4770a09b",
            "b02518d7-7f6a-4b71-999e-816a823affc9",
            "136f7092-172c-43f8-b903-7795096c4ea9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3946f20-4e87-4bfa-ac92-28eb43f27ab9",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "36deef1d-3d51-45f9-abf6-630ddecff2a1",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCategory({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "dc869d45-b553-4e09-bca6-12fbcde802f9",
                  "parentUUID": "36deef1d-3d51-45f9-abf6-630ddecff2a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc869d45-b553-4e09-bca6-12fbcde802f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1b2e3c9-3018-4687-87a3-36080b875efb",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.deepStrictEqual(c, c.name('FOO'));\nassert.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "500e3ac4-a0a1-4937-8a35-daa60f9f272e",
                  "parentUUID": "a1b2e3c9-3018-4687-87a3-36080b875efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "95e2e7bb-d767-4430-bafe-4848c88b207e",
                  "parentUUID": "a1b2e3c9-3018-4687-87a3-36080b875efb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'BANANA' });\nassert.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "dc42ea79-fcd1-4ccd-af04-01b377f38287",
                  "parentUUID": "a1b2e3c9-3018-4687-87a3-36080b875efb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "500e3ac4-a0a1-4937-8a35-daa60f9f272e",
                "95e2e7bb-d767-4430-bafe-4848c88b207e",
                "dc42ea79-fcd1-4ccd-af04-01b377f38287"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d5cc021-35ad-4e60-a490-f1acb45d331f",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'FOOBAR' });\nassert.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "e6155603-654c-4206-b629-010f4843e12d",
                  "parentUUID": "3d5cc021-35ad-4e60-a490-f1acb45d331f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6155603-654c-4206-b629-010f4843e12d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5612352d-d5bc-4373-85c8-30fbf9fdfef7",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "b77686a1-629b-4fbc-a980-1383913ca700",
                  "parentUUID": "5612352d-d5bc-4373-85c8-30fbf9fdfef7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b77686a1-629b-4fbc-a980-1383913ca700"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b67c4394-9da5-4a54-b9c8-389897081f6b",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bd208145-09ab-4086-bdf7-0adfbf70d24b",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new ICalEvent(data, new ICalCalendar());\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "5133b5aa-616c-45b7-9a65-e60118672868",
                  "parentUUID": "bd208145-09ab-4086-bdf7-0adfbf70d24b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalEvent({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "f95a3c14-9629-44b7-8c52-3522410b7e46",
                  "parentUUID": "bd208145-09ab-4086-bdf7-0adfbf70d24b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5133b5aa-616c-45b7-9a65-e60118672868",
                "f95a3c14-9629-44b7-8c52-3522410b7e46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "51f9127d-b405-4221-b101-1c516c237cb3",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "c342a397-c620-4ebb-b8f0-0c88516d17ac",
                  "parentUUID": "51f9127d-b405-4221-b101-1c516c237cb3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).id(512);\nassert.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "2aa0b98d-e114-458c-a8c5-6032eb70ea8f",
                  "parentUUID": "51f9127d-b405-4221-b101-1c516c237cb3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c342a397-c620-4ebb-b8f0-0c88516d17ac",
                "2aa0b98d-e114-458c-a8c5-6032eb70ea8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9367c111-9f99-4857-8298-fcf216b8296b",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "bc772296-e7d2-4302-9435-0c68a42a1bef",
                  "parentUUID": "9367c111-9f99-4857-8298-fcf216b8296b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).uid(512);\nassert.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "53a35a9d-ff22-4f42-84f7-7383aeeefd93",
                  "parentUUID": "9367c111-9f99-4857-8298-fcf216b8296b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc772296-e7d2-4302-9435-0c68a42a1bef",
                "53a35a9d-ff22-4f42-84f7-7383aeeefd93"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b477087f-7150-4de6-8bc1-7e7d63b1c408",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "835c46a1-2d36-4c61-bb52-e826d9705d8d",
                  "parentUUID": "b477087f-7150-4de6-8bc1-7e7d63b1c408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(1048);\nassert.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "6db70b61-3dff-479c-98d5-277422fa6fd7",
                  "parentUUID": "b477087f-7150-4de6-8bc1-7e7d63b1c408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "3fc90a27-3469-414d-86e0-391b3606e35e",
                  "parentUUID": "b477087f-7150-4de6-8bc1-7e7d63b1c408",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(12);\nassert.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "8e480992-cfda-4ab7-94ef-77e4d43823f2",
                  "parentUUID": "b477087f-7150-4de6-8bc1-7e7d63b1c408",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "835c46a1-2d36-4c61-bb52-e826d9705d8d",
                "6db70b61-3dff-479c-98d5-277422fa6fd7",
                "3fc90a27-3469-414d-86e0-391b3606e35e",
                "8e480992-cfda-4ab7-94ef-77e4d43823f2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "602f89ec-8c83-4be9-9896-1e011c51dac3",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.start(now);\nassert.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "a9b2b46c-d9a5-4c28-bbcc-6c537f350c5f",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "2aa6c7bb-d5a1-46da-8393-6b239dd2f920",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "5765133a-a141-4e4e-b17d-8a3759c36fad",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "8997e983-3917-4531-96cf-5b60e165ab4c",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .end(end)\n    .start(start);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "a89e431b-b0a2-44a0-80bf-ac956bf371e4",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.start(moment()));\nassert.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "217ef9ca-b57c-4daf-92c2-6aff01ed94d0",
                  "parentUUID": "602f89ec-8c83-4be9-9896-1e011c51dac3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9b2b46c-d9a5-4c28-bbcc-6c537f350c5f",
                "2aa6c7bb-d5a1-46da-8393-6b239dd2f920",
                "5765133a-a141-4e4e-b17d-8a3759c36fad",
                "8997e983-3917-4531-96cf-5b60e165ab4c",
                "a89e431b-b0a2-44a0-80bf-ac956bf371e4",
                "217ef9ca-b57c-4daf-92c2-6aff01ed94d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dce6da0a-f790-419e-9f15-f239b65c202b",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.end(now);\nassert.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "baa9107d-3527-4e11-bb04-7426c926e101",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "ae387e35-524b-4012-af1b-97d7cd6f9859",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "1e9d0c99-3a58-41c3-9fe5-d4ffa60107c4",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "10589151-2717-46bf-a7b8-d1a80fc8acfe",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .start(start)\n    .end(end);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "94619f56-fcac-4876-a6a2-614294c6b5bf",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.end(moment()));\nassert.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "9bd90599-4ff3-42ba-afa7-3a2615eeab0b",
                  "parentUUID": "dce6da0a-f790-419e-9f15-f239b65c202b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "baa9107d-3527-4e11-bb04-7426c926e101",
                "ae387e35-524b-4012-af1b-97d7cd6f9859",
                "1e9d0c99-3a58-41c3-9fe5-d4ffa60107c4",
                "10589151-2717-46bf-a7b8-d1a80fc8acfe",
                "94619f56-fcac-4876-a6a2-614294c6b5bf",
                "9bd90599-4ff3-42ba-afa7-3a2615eeab0b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72f02111-3726-444e-ad87-28b89d99537d",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.recurrenceId(now);\nassert.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "b5f7d71f-2bae-4a4a-980a-2d598c35a871",
                  "parentUUID": "72f02111-3726-444e-ad87-28b89d99537d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "d02a2029-105c-4017-baae-d75dcfef32f6",
                  "parentUUID": "72f02111-3726-444e-ad87-28b89d99537d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "ac7cb12c-effa-4679-9a85-6890e25965f8",
                  "parentUUID": "72f02111-3726-444e-ad87-28b89d99537d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "4992b2ba-2428-4283-bf1b-c0c35f5fb77e",
                  "parentUUID": "72f02111-3726-444e-ad87-28b89d99537d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.recurrenceId(moment()));\nassert.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "d030bac3-6998-48d2-b97b-903a3e947f2c",
                  "parentUUID": "72f02111-3726-444e-ad87-28b89d99537d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b5f7d71f-2bae-4a4a-980a-2d598c35a871",
                "d02a2029-105c-4017-baae-d75dcfef32f6",
                "ac7cb12c-effa-4679-9a85-6890e25965f8",
                "4992b2ba-2428-4283-bf1b-c0c35f5fb77e",
                "d030bac3-6998-48d2-b97b-903a3e947f2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).timezone('Europe/Berlin');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "0e913bfb-992e-4188-9280-b9bbe1b8b6ba",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, cal);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "2bdea872-8be1-463a-886e-6c68469615de",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "c8b13e3a-e937-4c4e-ab12-ecda11be407f",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "8203d7dc-3d56-406e-b204-4e00411efe34",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone('Europe/London');\nassert.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "b488766f-182a-447c-b1bb-35ee011624d5",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone(null);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "e45e679a-cb15-42e7-9408-907b39cede76",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "cc01c4c6-a189-45bd-842f-72a496ff6339",
                  "parentUUID": "dbbb987b-4819-4e60-830b-72c8d2832aa8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e913bfb-992e-4188-9280-b9bbe1b8b6ba",
                "2bdea872-8be1-463a-886e-6c68469615de",
                "c8b13e3a-e937-4c4e-ab12-ecda11be407f",
                "8203d7dc-3d56-406e-b204-4e00411efe34",
                "b488766f-182a-447c-b1bb-35ee011624d5",
                "e45e679a-cb15-42e7-9408-907b39cede76",
                "cc01c4c6-a189-45bd-842f-72a496ff6339"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).stamp(now);\nassert.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "e22e30b0-c31c-4153-aa29-77cb93c1270f",
                  "parentUUID": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "45762a99-d417-4ea1-90a2-d4666028c68d",
                  "parentUUID": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "2bacad04-4a65-4449-be1f-50934d0c4f1f",
                  "parentUUID": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "7d888808-7d47-47b7-8afa-4b18471867e4",
                  "parentUUID": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "ad9cb53a-0325-40ae-b246-358550aa4723",
                  "parentUUID": "d1646006-532d-4d7f-9c26-1b09fbcc91d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e22e30b0-c31c-4153-aa29-77cb93c1270f",
                "45762a99-d417-4ea1-90a2-d4666028c68d",
                "2bacad04-4a65-4449-be1f-50934d0c4f1f",
                "7d888808-7d47-47b7-8afa-4b18471867e4",
                "ad9cb53a-0325-40ae-b246-358550aa4723"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).timestamp(now);\nassert.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "cf907ce4-f0cb-419d-9b51-1b35f24ce309",
                  "parentUUID": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "a1b3f4a2-c33c-4889-bfcb-56a0d4898770",
                  "parentUUID": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "ff6d165b-9894-414d-b7f1-c64f50ba60f2",
                  "parentUUID": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "a08d7a3d-3c25-446c-8bfc-a250c8e5f972",
                  "parentUUID": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "b6c81b52-196a-4c1a-9baf-9b6a1d4ad287",
                  "parentUUID": "6929b229-fc5b-40d3-9c1d-7b08de02e405",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf907ce4-f0cb-419d-9b51-1b35f24ce309",
                "a1b3f4a2-c33c-4889-bfcb-56a0d4898770",
                "ff6d165b-9894-414d-b7f1-c64f50ba60f2",
                "a08d7a3d-3c25-446c-8bfc-a250c8e5f972",
                "b6c81b52-196a-4c1a-9baf-9b6a1d4ad287"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "900394c5-cef6-411b-9093-3d89a3800047",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.allDay(true);\nassert.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "69fce835-ba60-4d8e-a339-b5251dd0e8f4",
                  "parentUUID": "900394c5-cef6-411b-9093-3d89a3800047",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "9feeee0f-df38-4551-8bdf-e0817b58b9d9",
                  "parentUUID": "900394c5-cef6-411b-9093-3d89a3800047",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.allDay(true);\nassert.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "c75f8279-6127-49f8-9a6f-ebf9a6a8c53c",
                  "parentUUID": "900394c5-cef6-411b-9093-3d89a3800047",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "69fce835-ba60-4d8e-a339-b5251dd0e8f4",
                "9feeee0f-df38-4551-8bdf-e0817b58b9d9",
                "c75f8279-6127-49f8-9a6f-ebf9a6a8c53c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).floating(true);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "85b4e8c3-d7ca-456e-b661-0510f6f35e08",
                  "parentUUID": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.floating(false));\nassert.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "c451afde-28a5-48a6-a32a-728dfe3f9dda",
                  "parentUUID": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.floating(true);\nassert.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "309f3487-c1fa-4832-a251-ac2fa185c885",
                  "parentUUID": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(true);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "3b2487f1-e2bd-46f1-ad01-9dc13285a4d3",
                  "parentUUID": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(false);\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "1c7921d1-99ec-4999-81c1-e55d1ae7ba2f",
                  "parentUUID": "e72fbc40-ae10-4492-aea4-c7cfedefc1c6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85b4e8c3-d7ca-456e-b661-0510f6f35e08",
                "c451afde-28a5-48a6-a32a-728dfe3f9dda",
                "309f3487-c1fa-4832-a251-ac2fa185c885",
                "3b2487f1-e2bd-46f1-ad01-9dc13285a4d3",
                "1c7921d1-99ec-4999-81c1-e55d1ae7ba2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment(),\n    exclude: [moment()]\n};\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "8d77fd78-3ad3-42bf-aead-1379f87a3dc5",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null));\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "d71f7f92-442f-4b4a-92a6-fcfb4409f314",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert.deepStrictEqual(e, e.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "6284c468-7cda-4022-b359-66b3778b869b",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new ICalCalendar());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "a5604436-07bc-472b-b6ef-f71749666890",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new ICalCalendar());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "b8ca74c4-5d2a-4f5d-ae37-0548fb36d608",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "06423046-62a8-409e-a67e-654354bade57",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.count` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "3ad19fd0-9ded-49e5-9588-fd360f4e9a8a",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "70d3b2d8-b3df-4c2d-89a5-ac4d0b44f1de",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "7ebad492-bee9-4fe2-8625-fa331f3ec052",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "b6052f81-ff37-4597-9f6a-349f4451a6f6",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new ICalCalendar());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "7e2fd11e-5d70-4262-a007-390f5524b853",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "d1ada9de-b62d-4c4d-a098-19e22380ca73",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "ba745b30-02e9-4247-ad1c-171a5d94a0a9",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "da5291b3-9c47-4a13-abac-591104e36a4f",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert.throws(function () {\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "7a6fd65b-3b53-4933-9640-e678a35e43ce",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "65b3d5e0-0299-4940-be3c-2affeb88d375",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU, ICalWeekday.WE, ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "f932010a-e9f9-45ad-8122-983aed2ffbfb",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "504e6804-5f20-4e49-8bc9-1ff66d735ae6",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "2f5a81e0-0b4a-41f8-9b35-56eb4c152a4f",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, -15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [-1, -32, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `-32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 0, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `0`/);",
                  "err": {},
                  "uuid": "4df28954-66b8-4168-8604-08fdeecb4be9",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "e196f2b3-ed8f-40ad-8182-a2175de83358",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [-367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `-367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [0]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `0`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: ['FOO']\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "b97a0f7c-bbdb-4ce6-a22e-cf2265c50dc3",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "efb62f40-8a47-46be-912a-ab73169e2831",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU],\n    bySetPos: [2]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert.strictEqual((_b = result.bySetPos) === null || _b === void 0 ? void 0 : _b.length, 1);",
                  "err": {},
                  "uuid": "322ab323-31e4-40f6-8594-ea9b66dbb03b",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "2120286a-9728-44c1-aff4-5545837de851",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: [moment(), new Date('BAR'), 'FOO']\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "629ebbbc-cd4e-4cb1-887f-9904fdc64ef7",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new ICalCalendar());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "0b42fac6-646f-43d3-89d4-02c84e4cc3eb",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.ok(Array.isArray(result.exclude));\nassert.strictEqual(result.exclude.length, 3);\nassert.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "ad4a3cdf-4386-41de-bf46-31a612c28b0d",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "85d61c03-9db1-4125-bbbb-5268f7ef5d8a",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: ICalWeekday.SU\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "5963ce71-5bc9-44c7-8a65-58735ffa6b6d",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new ICalEvent({ start }, new ICalCalendar());\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert.ok(isRRule(result));\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "dcc34916-4a40-4227-84e8-1204c195b01e",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "da799d31-2160-4df5-8d88-6ac7ea197211",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "0fb65894-78c7-4a49-87bc-015b0f0b6b57",
                  "parentUUID": "a54f6d1e-3c65-46c4-b500-b0f3f9903fb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8d77fd78-3ad3-42bf-aead-1379f87a3dc5",
                "d71f7f92-442f-4b4a-92a6-fcfb4409f314",
                "6284c468-7cda-4022-b359-66b3778b869b",
                "a5604436-07bc-472b-b6ef-f71749666890",
                "b8ca74c4-5d2a-4f5d-ae37-0548fb36d608",
                "06423046-62a8-409e-a67e-654354bade57",
                "3ad19fd0-9ded-49e5-9588-fd360f4e9a8a",
                "70d3b2d8-b3df-4c2d-89a5-ac4d0b44f1de",
                "7ebad492-bee9-4fe2-8625-fa331f3ec052",
                "b6052f81-ff37-4597-9f6a-349f4451a6f6",
                "7e2fd11e-5d70-4262-a007-390f5524b853",
                "d1ada9de-b62d-4c4d-a098-19e22380ca73",
                "ba745b30-02e9-4247-ad1c-171a5d94a0a9",
                "da5291b3-9c47-4a13-abac-591104e36a4f",
                "7a6fd65b-3b53-4933-9640-e678a35e43ce",
                "65b3d5e0-0299-4940-be3c-2affeb88d375",
                "f932010a-e9f9-45ad-8122-983aed2ffbfb",
                "504e6804-5f20-4e49-8bc9-1ff66d735ae6",
                "2f5a81e0-0b4a-41f8-9b35-56eb4c152a4f",
                "4df28954-66b8-4168-8604-08fdeecb4be9",
                "e196f2b3-ed8f-40ad-8182-a2175de83358",
                "b97a0f7c-bbdb-4ce6-a22e-cf2265c50dc3",
                "efb62f40-8a47-46be-912a-ab73169e2831",
                "322ab323-31e4-40f6-8594-ea9b66dbb03b",
                "2120286a-9728-44c1-aff4-5545837de851",
                "629ebbbc-cd4e-4cb1-887f-9904fdc64ef7",
                "0b42fac6-646f-43d3-89d4-02c84e4cc3eb",
                "ad4a3cdf-4386-41de-bf46-31a612c28b0d",
                "85d61c03-9db1-4125-bbbb-5268f7ef5d8a",
                "5963ce71-5bc9-44c7-8a65-58735ffa6b6d",
                "dcc34916-4a40-4227-84e8-1204c195b01e",
                "da799d31-2160-4df5-8d88-6ac7ea197211",
                "0fb65894-78c7-4a49-87bc-015b0f0b6b57"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e91f9b7-8332-4ac3-8e4b-1257c5f74bea",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "e07d9ab2-e18b-4e12-968a-2c433aa1fd92",
                  "parentUUID": "0e91f9b7-8332-4ac3-8e4b-1257c5f74bea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.summary(''));\nassert.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "31a849e6-fdb7-4234-b662-28abca0bef3a",
                  "parentUUID": "0e91f9b7-8332-4ac3-8e4b-1257c5f74bea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.summary('Example Event II');\nassert.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "43b9beb6-cfa3-43f4-9f43-46fcf89af5d4",
                  "parentUUID": "0e91f9b7-8332-4ac3-8e4b-1257c5f74bea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e07d9ab2-e18b-4e12-968a-2c433aa1fd92",
                "31a849e6-fdb7-4234-b662-28abca0bef3a",
                "43b9beb6-cfa3-43f4-9f43-46fcf89af5d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location('Test Location');\nassert.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "05a0fb2b-70ad-4c3e-9d35-5ab474e7f0d1",
                  "parentUUID": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "8e2e15f0-b97a-4922-bc74-5a081cbf6292",
                  "parentUUID": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.location(null));\nassert.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "a219876a-bd04-4c0b-b061-16e9ec5c940c",
                  "parentUUID": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.location('Europa-Park');\nassert.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "fcf049c6-588a-47db-b5c0-c4f20557ef7d",
                  "parentUUID": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\n// @ts-ignore\nassert.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "1190e868-8467-4ee8-afb7-a1c291944627",
                  "parentUUID": "2b900ca0-1dab-4ab2-87d6-fc6d3e28ac36",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05a0fb2b-70ad-4c3e-9d35-5ab474e7f0d1",
                "8e2e15f0-b97a-4922-bc74-5a081cbf6292",
                "a219876a-bd04-4c0b-b061-16e9ec5c940c",
                "fcf049c6-588a-47db-b5c0-c4f20557ef7d",
                "1190e868-8467-4ee8-afb7-a1c291944627"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ee22b42-e2dd-4a47-9c05-0b1fe8408ba3",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "55782755-9df9-4310-893c-8b1b16312f89",
                  "parentUUID": "6ee22b42-e2dd-4a47-9c05-0b1fe8408ba3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.description(null));\nassert.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "73842225-4584-4b5a-b25b-27de0f9668db",
                  "parentUUID": "6ee22b42-e2dd-4a47-9c05-0b1fe8408ba3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.description('Well. But other people need descriptions… :/');\nassert.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "4bb54473-98be-415e-b50c-eb7568f7c5e7",
                  "parentUUID": "6ee22b42-e2dd-4a47-9c05-0b1fe8408ba3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55782755-9df9-4310-893c-8b1b16312f89",
                "73842225-4584-4b5a-b25b-27de0f9668db",
                "4bb54473-98be-415e-b50c-eb7568f7c5e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "a163eeda-4441-4ede-bca6-7ffb976db51a",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.organizer(null));\nassert.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "10f4ef4f-916f-42b0-a46d-11b0eee9a75c",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "4a830400-ee34-4603-bda9-5b1763fdc856",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "34a066c6-11ed-4c6e-a380-927208a340d9",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "e7929abd-61f7-4730-a631-f7ccedc50ed8",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "a7ffeb3e-598d-4e3a-9f9f-6cf025a38248",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "351b36d9-5aa9-4b71-bfc2-f0866f9e32cb",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "195ac8ea-3c5e-4cb3-8a3a-268391d15cee",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "8b4eca9e-a297-425f-9a1d-816eccd76b82",
                  "parentUUID": "0953b41c-564a-40bb-8533-cb3e4b98dd54",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a163eeda-4441-4ede-bca6-7ffb976db51a",
                "10f4ef4f-916f-42b0-a46d-11b0eee9a75c",
                "4a830400-ee34-4603-bda9-5b1763fdc856",
                "34a066c6-11ed-4c6e-a380-927208a340d9",
                "e7929abd-61f7-4730-a631-f7ccedc50ed8",
                "a7ffeb3e-598d-4e3a-9f9f-6cf025a38248",
                "351b36d9-5aa9-4b71-bfc2-f0866f9e32cb",
                "195ac8ea-3c5e-4cb3-8a3a-268391d15cee",
                "8b4eca9e-a297-425f-9a1d-816eccd76b82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({}, event);\nassert.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "89087ef6-5c26-46cd-abb9-258866bb996f",
                  "parentUUID": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAttendee({}) instanceof ICalAttendee);\nassert.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "f89f51bb-e03a-4440-883d-17ab761eb6ec",
                  "parentUUID": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "38b7ded3-0cea-4181-a513-baea2734fd9c",
                  "parentUUID": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "8eada1ed-7bc8-4a2d-bc71-66f1cb3a952b",
                  "parentUUID": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "17e52ccd-b5a3-4ad1-b818-d4e253b77caf",
                  "parentUUID": "ae270e2a-c63d-49b6-89c1-aad8c80f084d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89087ef6-5c26-46cd-abb9-258866bb996f",
                "f89f51bb-e03a-4440-883d-17ab761eb6ec",
                "38b7ded3-0cea-4181-a513-baea2734fd9c",
                "8eada1ed-7bc8-4a2d-bc71-66f1cb3a952b",
                "17e52ccd-b5a3-4ad1-b818-d4e253b77caf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ca922085-8ee7-49f9-abac-b5c96525065b",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert.strictEqual(event.attendees().length, 1);\nassert.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "e896cd6d-8182-4945-8db0-15d2632a77da",
                  "parentUUID": "ca922085-8ee7-49f9-abac-b5c96525065b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert.strictEqual(event.attendees().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "f82e5795-2134-40dd-9b8f-1a567251011d",
                  "parentUUID": "ca922085-8ee7-49f9-abac-b5c96525065b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e896cd6d-8182-4945-8db0-15d2632a77da",
                "f82e5795-2134-40dd-9b8f-1a567251011d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e2847c36-b26c-46a7-90ae-1c085a6cf4f0",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAlarm() instanceof ICalAlarm);",
                  "err": {},
                  "uuid": "37b48f9f-31a1-47f9-95c4-3c32bb65dc7c",
                  "parentUUID": "e2847c36-b26c-46a7-90ae-1c085a6cf4f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst alarm = event.createAlarm({ type: ICalAlarmType.audio });\nassert.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "a7f8caf1-6a7b-4c11-8415-93fbde3df951",
                  "parentUUID": "e2847c36-b26c-46a7-90ae-1c085a6cf4f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37b48f9f-31a1-47f9-95c4-3c32bb65dc7c",
                "a7f8caf1-6a7b-4c11-8415-93fbde3df951"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da61d167-e2de-4bc2-8b01-f9b72adc96d5",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert.strictEqual(event.alarms().length, 1);\nassert.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "bf42bae3-0dbf-4b81-87e0-a632f4424979",
                  "parentUUID": "da61d167-e2de-4bc2-8b01-f9b72adc96d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.alarms([\n    { type: ICalAlarmType.audio },\n    { type: ICalAlarmType.display }\n]);\nassert.strictEqual(event.alarms().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "dfea6afb-ee2f-44e5-9499-faa467ba5654",
                  "parentUUID": "da61d167-e2de-4bc2-8b01-f9b72adc96d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf42bae3-0dbf-4b81-87e0-a632f4424979",
                "dfea6afb-ee2f-44e5-9499-faa467ba5654"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e618bf0f-f67d-44e0-980f-af14ba368e8d",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createCategory() instanceof ICalCategory);",
                  "err": {},
                  "uuid": "1a4a6102-9e43-479c-8f80-c3bcfe159c0c",
                  "parentUUID": "e618bf0f-f67d-44e0-980f-af14ba368e8d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst category = event.createCategory({ name: 'foo' });\nassert.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "af76c384-1eec-491c-8c90-aa21a7ba26b4",
                  "parentUUID": "e618bf0f-f67d-44e0-980f-af14ba368e8d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a4a6102-9e43-479c-8f80-c3bcfe159c0c",
                "af76c384-1eec-491c-8c90-aa21a7ba26b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e42da4f-0484-49d4-b68c-f7de2e405c49",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert.strictEqual(event.categories().length, 1);\nassert.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "197765b5-5666-40c8-a592-75278529cd23",
                  "parentUUID": "6e42da4f-0484-49d4-b68c-f7de2e405c49",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert.strictEqual(event.categories().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "a50468e9-f241-4ad5-8e9b-c584a3dbe874",
                  "parentUUID": "6e42da4f-0484-49d4-b68c-f7de2e405c49",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "197765b5-5666-40c8-a592-75278529cd23",
                "a50468e9-f241-4ad5-8e9b-c584a3dbe874"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.status(), null);\nevent.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "98537eca-3fa8-4b2e-bfa8-d9a5917bedc3",
                  "parentUUID": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.status(null));\nassert.deepStrictEqual(e, e.status(ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "55e21052-fb72-4936-be75-f3606c8f331b",
                  "parentUUID": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\ne.status(null);\nassert.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "445f4483-bd4d-4ec2-9eba-9fb0ff087b90",
                  "parentUUID": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(e.status(), 'CONFIRMED');\nassert.strictEqual(e.status(), ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "40a90194-2e1a-4b0a-a2eb-444fd313eb41",
                  "parentUUID": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "00f2942b-6f2f-45f9-8706-50b7055c8f3c",
                  "parentUUID": "7ba87c39-2202-4047-bd35-1e4721c12a0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "98537eca-3fa8-4b2e-bfa8-d9a5917bedc3",
                "55e21052-fb72-4936-be75-f3606c8f331b",
                "445f4483-bd4d-4ec2-9eba-9fb0ff087b90",
                "40a90194-2e1a-4b0a-a2eb-444fd313eb41",
                "00f2942b-6f2f-45f9-8706-50b7055c8f3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.busystatus(), null);\nevent.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "2a707ac2-1c22-4f7c-b520-58f4a152cea6",
                  "parentUUID": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.busystatus(null));\nassert.deepStrictEqual(e, e.busystatus(ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "a005972b-e272-4f98-81c1-dcb35ed26ca3",
                  "parentUUID": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "99e860df-075c-4ad9-b902-ea3b58071e68",
                  "parentUUID": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "cbe56412-df52-46d0-9ee8-93399f31bc75",
                  "parentUUID": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "373708b6-bd17-4b90-9ce4-cfc012ffe371",
                  "parentUUID": "6c31fdcf-e4d4-4312-91e0-ff436c44a2eb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2a707ac2-1c22-4f7c-b520-58f4a152cea6",
                "a005972b-e272-4f98-81c1-dcb35ed26ca3",
                "99e860df-075c-4ad9-b902-ea3b58071e68",
                "cbe56412-df52-46d0-9ee8-93399f31bc75",
                "373708b6-bd17-4b90-9ce4-cfc012ffe371"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d6915fb2-009e-443b-a25a-77a07aa29f25",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.priority(), null);\ne.priority(5);\nassert.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "dbaac443-6b72-4b1a-9d76-fffd34f51460",
                  "parentUUID": "d6915fb2-009e-443b-a25a-77a07aa29f25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.priority(null));\nassert.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "65b3a4d1-774b-43d0-b07f-e0ca7642a6f5",
                  "parentUUID": "d6915fb2-009e-443b-a25a-77a07aa29f25",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.priority(5);\nassert.strictEqual(event.priority(), 5);\nassert.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "e5ca44e5-f38e-4077-857c-6f239207be1b",
                  "parentUUID": "d6915fb2-009e-443b-a25a-77a07aa29f25",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbaac443-6b72-4b1a-9d76-fffd34f51460",
                "65b3a4d1-774b-43d0-b07f-e0ca7642a6f5",
                "e5ca44e5-f38e-4077-857c-6f239207be1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e692c9d2-f528-4421-81c1-d0f6ff79385a",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "c8d60981-f72b-406c-ab56-c8ece056da73",
                  "parentUUID": "e692c9d2-f528-4421-81c1-d0f6ff79385a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.url(null));\nassert.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "cb8f760b-f6e2-42e5-8be4-2afffae6cb2d",
                  "parentUUID": "e692c9d2-f528-4421-81c1-d0f6ff79385a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "81d71516-5aa2-445f-8cb5-5e07eefc12a3",
                  "parentUUID": "e692c9d2-f528-4421-81c1-d0f6ff79385a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c8d60981-f72b-406c-ab56-c8ece056da73",
                "cb8f760b-f6e2-42e5-8be4-2afffae6cb2d",
                "81d71516-5aa2-445f-8cb5-5e07eefc12a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd8ac161-920e-44f1-b4c6-18aa8d9b5d14",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "7f5435dd-b3a5-49e0-81de-c79c320e9cc3",
                  "parentUUID": "fd8ac161-920e-44f1-b4c6-18aa8d9b5d14",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f5435dd-b3a5-49e0-81de-c79c320e9cc3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "937415d1-8ef2-4966-bef7-004b17adb50c",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert.strictEqual(event.attachments().length, 1);\nassert.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "c52e04b7-5f98-4ec9-a2d0-85ddeaeb287b",
                  "parentUUID": "937415d1-8ef2-4966-bef7-004b17adb50c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert.strictEqual(event.attachments().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "3b127290-58ae-4e01-a281-325f45dbe2e8",
                  "parentUUID": "937415d1-8ef2-4966-bef7-004b17adb50c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c52e04b7-5f98-4ec9-a2d0-85ddeaeb287b",
                "3b127290-58ae-4e01-a281-325f45dbe2e8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39f3c416-f540-462f-8a6a-e4461baca014",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "68c16db7-298f-4eda-852c-55de5d5344d7",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment());\nassert.ok(moment.isMoment(e.created()));",
                  "err": {},
                  "uuid": "633b1d75-f5b8-484f-986d-7e0bbb95954b",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "1d782c0d-77ab-4840-b773-15bd66d53c93",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment().toJSON());\nassert.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "f0e0e121-6bd8-451b-81ac-81cc4cfba222",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "1b1ed935-53c3-4421-a40e-9b4eb1d4f039",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).created(now);\nassert.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "05df01aa-293a-477b-abe2-6cac5d210710",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "b70810bc-39f9-4a83-8d4b-3a7cf9feac78",
                  "parentUUID": "39f3c416-f540-462f-8a6a-e4461baca014",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68c16db7-298f-4eda-852c-55de5d5344d7",
                "633b1d75-f5b8-484f-986d-7e0bbb95954b",
                "1d782c0d-77ab-4840-b773-15bd66d53c93",
                "f0e0e121-6bd8-451b-81ac-81cc4cfba222",
                "1b1ed935-53c3-4421-a40e-9b4eb1d4f039",
                "05df01aa-293a-477b-abe2-6cac5d210710",
                "b70810bc-39f9-4a83-8d4b-3a7cf9feac78"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "73daff53-fcee-4f1f-9a8b-c8696b8286da",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(moment());\nassert.ok(moment.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "5582c4bf-efdd-4fc1-bc48-35d5b944e8e4",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "ee574060-ad78-477e-a1eb-fb8e58384ce6",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().toJSON();\ne.lastModified(date);\nassert.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "039c7f3b-2399-489f-ade2-3c625a16a9f5",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "698e8f11-ac73-4ee5-9f39-8464d4da6c61",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).lastModified(now);\nassert.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "98b8baf1-8c1f-46d2-81a8-3b6d6d172077",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "69c56e13-fafc-40ae-ad7f-c686ce2970ed",
                  "parentUUID": "3f565d10-d7a6-4ab9-b29f-4e76fb3fd419",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "73daff53-fcee-4f1f-9a8b-c8696b8286da",
                "5582c4bf-efdd-4fc1-bc48-35d5b944e8e4",
                "ee574060-ad78-477e-a1eb-fb8e58384ce6",
                "039c7f3b-2399-489f-ade2-3c625a16a9f5",
                "698e8f11-ac73-4ee5-9f39-8464d4da6c61",
                "98b8baf1-8c1f-46d2-81a8-3b6d6d172077",
                "69c56e13-fafc-40ae-ad7f-c686ce2970ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.class(), null);\nevent.class(ICalEventClass.PRIVATE);\nassert.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "51f43889-8df8-4e1f-a00f-27d5fc69b5d6",
                  "parentUUID": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.class(null));\nassert.deepStrictEqual(e, e.class(ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "ee30684c-946f-46e5-9464-e8b8de4343e6",
                  "parentUUID": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\ne.class(null);\nassert.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "71bb87a2-8630-4b46-8659-10fc1a1f4dec",
                  "parentUUID": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\nassert.strictEqual(e.class(), 'PRIVATE');\nassert.strictEqual(e.class(), ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "ed503ebc-e4c8-4d25-9022-b6e06b7af047",
                  "parentUUID": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "36ea151d-fdf1-4d13-a58a-15940529101e",
                  "parentUUID": "380eb1e0-08cc-410e-b8a6-312c4f438dad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51f43889-8df8-4e1f-a00f-27d5fc69b5d6",
                "ee30684c-946f-46e5-9464-e8b8de4343e6",
                "71bb87a2-8630-4b46-8659-10fc1a1f4dec",
                "ed503ebc-e4c8-4d25-9022-b6e06b7af047",
                "36ea151d-fdf1-4d13-a58a-15940529101e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33c223ff-7d71-4d36-a208-0c9c52b36ae2",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "c5bbe6f0-8148-4207-ba76-695f58ae40b8",
                  "parentUUID": "33c223ff-7d71-4d36-a208-0c9c52b36ae2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5bbe6f0-8148-4207-ba76-695f58ae40b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "beb48b31-9978-4b50-86f2-b3b80ba1662a",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment().add(1, 'month');\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date);\nassert.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "0cfc2255-ccfe-4092-8b5c-0974945048b1",
                  "parentUUID": "beb48b31-9978-4b50-86f2-b3b80ba1662a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert.ok(typeof json.repeating === 'string');\nconst event2 = new ICalEvent(event.toJSON(), new ICalCalendar());\nconst after = event2.toString();\nassert.strictEqual(after, before);",
                  "err": {},
                  "uuid": "8e9e97d1-97c4-4462-ab09-3be45fb3c659",
                  "parentUUID": "beb48b31-9978-4b50-86f2-b3b80ba1662a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalEvent({}, new ICalCalendar());\nnew ICalEvent(a.toJSON(), new ICalCalendar());",
                  "err": {},
                  "uuid": "4adc987c-946c-440f-918a-b940e954dd37",
                  "parentUUID": "beb48b31-9978-4b50-86f2-b3b80ba1662a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0cfc2255-ccfe-4092-8b5c-0974945048b1",
                "8e9e97d1-97c4-4462-ab09-3be45fb3c659",
                "4adc987c-946c-440f-918a-b940e954dd37"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.transparency(), null);\nevent.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "d303e363-dc9b-4119-afbd-d146e8e67ae7",
                  "parentUUID": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.transparency(null));\nassert.deepStrictEqual(e, e.transparency(ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "78ae43ed-a46f-4230-ac5b-128c07d5556e",
                  "parentUUID": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "c8ad439e-a415-47e3-8b14-ea11b5dc47c3",
                  "parentUUID": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "bd00ddc3-97a5-44ce-b586-4d84ee2425f9",
                  "parentUUID": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "5bffd1a4-188f-46a0-b4c8-3b31dba08ea2",
                  "parentUUID": "8a097c0f-1d20-4ba5-85a8-724ef2087519",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d303e363-dc9b-4119-afbd-d146e8e67ae7",
                "78ae43ed-a46f-4230-ac5b-128c07d5556e",
                "c8ad439e-a415-47e3-8b14-ea11b5dc47c3",
                "bd00ddc3-97a5-44ce-b586-4d84ee2425f9",
                "5bffd1a4-188f-46a0-b4c8-3b31dba08ea2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0b4c88f-c3e2-424a-9410-6e352362ae99",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "63f489b0-b1e2-49cc-9f5a-e4ccfcd8d96f",
                  "parentUUID": "f0b4c88f-c3e2-424a-9410-6e352362ae99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new ICalCalendar());\nassert.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "0a690e74-aaa2-40e1-a40f-7356eae62076",
                  "parentUUID": "f0b4c88f-c3e2-424a-9410-6e352362ae99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = new ICalEvent({\n    id: 42,\n    start: moment(),\n    summary: ':)'\n}, cal);\nassert.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "667c63e7-3cbf-4c36-aa00-2cedec61ddf8",
                  "parentUUID": "f0b4c88f-c3e2-424a-9410-6e352362ae99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nlet event = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: ICalWeekday.SU\n    }\n}, cal);\nassert.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "9f6d4302-8fcc-4a85-92b8-26ed5f989e22",
                  "parentUUID": "f0b4c88f-c3e2-424a-9410-6e352362ae99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63f489b0-b1e2-49cc-9f5a-e4ccfcd8d96f",
                "0a690e74-aaa2-40e1-a40f-7356eae62076",
                "667c63e7-3cbf-4c36-aa00-2cedec61ddf8",
                "9f6d4302-8fcc-4a85-92b8-26ed5f989e22"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1ab8d281-7092-4943-8807-b0de107908ae",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41dd6453-fca3-4a3f-b2fe-fbb351ae4f75",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical, 'function');",
                  "err": {},
                  "uuid": "89bface0-217f-431d-bace-d12203a21542",
                  "parentUUID": "41dd6453-fca3-4a3f-b2fe-fbb351ae4f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical() instanceof ICalCalendar);",
                  "err": {},
                  "uuid": "4be82a9d-5e2c-44d1-87ce-7b46d80f3072",
                  "parentUUID": "41dd6453-fca3-4a3f-b2fe-fbb351ae4f75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "89bface0-217f-431d-bace-d12203a21542",
                "4be82a9d-5e2c-44d1-87ce-7b46d80f3072"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "25e05020-63a9-4abe-88fa-ffc2f2f9ff95",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm);",
                  "err": {},
                  "uuid": "bd575839-ebd8-4f70-ba0b-c9e3190a5911",
                  "parentUUID": "25e05020-63a9-4abe-88fa-ffc2f2f9ff95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType);",
                  "err": {},
                  "uuid": "f47e14cb-8a5a-44d9-acc8-bf27ce24c3af",
                  "parentUUID": "25e05020-63a9-4abe-88fa-ffc2f2f9ff95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd575839-ebd8-4f70-ba0b-c9e3190a5911",
                "f47e14cb-8a5a-44d9-acc8-bf27ce24c3af"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "27fb7b1f-bdcf-4c4a-8de2-004769f2aeb6",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee);",
                  "err": {},
                  "uuid": "99983fa5-49dd-4b58-b8d3-3b87bc235e68",
                  "parentUUID": "27fb7b1f-bdcf-4c4a-8de2-004769f2aeb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType);",
                  "err": {},
                  "uuid": "9695e24b-51e5-44d4-88d2-8cea104ee0c7",
                  "parentUUID": "27fb7b1f-bdcf-4c4a-8de2-004769f2aeb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole);",
                  "err": {},
                  "uuid": "cde1cd87-80d7-457a-b603-7da2a7280500",
                  "parentUUID": "27fb7b1f-bdcf-4c4a-8de2-004769f2aeb6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "06c49865-b2c9-4a99-af11-8bc528261ab1",
                  "parentUUID": "27fb7b1f-bdcf-4c4a-8de2-004769f2aeb6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99983fa5-49dd-4b58-b8d3-3b87bc235e68",
                "9695e24b-51e5-44d4-88d2-8cea104ee0c7",
                "cde1cd87-80d7-457a-b603-7da2a7280500",
                "06c49865-b2c9-4a99-af11-8bc528261ab1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "65dd6224-0682-48c0-96cd-c8f5a4debf20",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar);",
                  "err": {},
                  "uuid": "0424b74c-5e7a-4497-8047-3370ef0ed5b7",
                  "parentUUID": "65dd6224-0682-48c0-96cd-c8f5a4debf20",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod);",
                  "err": {},
                  "uuid": "5663a165-ad24-41e0-b13d-b299207b5a51",
                  "parentUUID": "65dd6224-0682-48c0-96cd-c8f5a4debf20",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0424b74c-5e7a-4497-8047-3370ef0ed5b7",
                "5663a165-ad24-41e0-b13d-b299207b5a51"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8c5c7733-b9d3-4532-8663-be7f87cf2c98",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory);",
                  "err": {},
                  "uuid": "22d12a0f-d970-44da-9a5b-40502c8cade4",
                  "parentUUID": "8c5c7733-b9d3-4532-8663-be7f87cf2c98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "22d12a0f-d970-44da-9a5b-40502c8cade4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a59d229-27d0-4a21-b6db-76538b5e4c60",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent);",
                  "err": {},
                  "uuid": "4a735337-a7d7-469c-9990-b104a50d97b6",
                  "parentUUID": "4a59d229-27d0-4a21-b6db-76538b5e4c60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus);",
                  "err": {},
                  "uuid": "370e673a-7a4d-49fb-9dfc-033d114b2b84",
                  "parentUUID": "4a59d229-27d0-4a21-b6db-76538b5e4c60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "3bec3a6c-7389-462a-b31d-35d48ddbedfc",
                  "parentUUID": "4a59d229-27d0-4a21-b6db-76538b5e4c60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency);",
                  "err": {},
                  "uuid": "020d34ca-46d5-44ee-94fc-6dedbeb993a9",
                  "parentUUID": "4a59d229-27d0-4a21-b6db-76538b5e4c60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a735337-a7d7-469c-9990-b104a50d97b6",
                "370e673a-7a4d-49fb-9dfc-033d114b2b84",
                "3bec3a6c-7389-462a-b31d-35d48ddbedfc",
                "020d34ca-46d5-44ee-94fc-6dedbeb993a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9d3095c-cc32-464e-9365-3cb79eeb4601",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "5bf0a860-9adf-4360-8e2f-2e4202beda6e",
                  "parentUUID": "c9d3095c-cc32-464e-9365-3cb79eeb4601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday);",
                  "err": {},
                  "uuid": "d45aabe3-9726-4ff2-a702-a365047b7bc0",
                  "parentUUID": "c9d3095c-cc32-464e-9365-3cb79eeb4601",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bf0a860-9adf-4360-8e2f-2e4202beda6e",
                "d45aabe3-9726-4ff2-a702-a365047b7bc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b502af0-8051-4afa-a26c-b4bbca8c48ac",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate === 'function');",
                  "err": {},
                  "uuid": "38196bdb-b2f0-4d90-8e00-0905abf259fd",
                  "parentUUID": "3b502af0-8051-4afa-a26c-b4bbca8c48ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "e19adb23-821b-45c9-9c42-7300189899f1",
                  "parentUUID": "3b502af0-8051-4afa-a26c-b4bbca8c48ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape === 'function');",
                  "err": {},
                  "uuid": "04dc5983-db3b-4667-bf81-ce2161880b12",
                  "parentUUID": "3b502af0-8051-4afa-a26c-b4bbca8c48ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines === 'function');",
                  "err": {},
                  "uuid": "06c683da-6e95-4109-a3be-c4d31811286e",
                  "parentUUID": "3b502af0-8051-4afa-a26c-b4bbca8c48ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38196bdb-b2f0-4d90-8e00-0905abf259fd",
                "e19adb23-821b-45c9-9c42-7300189899f1",
                "04dc5983-db3b-4667-bf81-ce2161880b12",
                "06c683da-6e95-4109-a3be-c4d31811286e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0e163d16-a6e6-48c5-81ed-6ba5c768e73a",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "77afc91d-8477-4af5-9595-fe78ba3a11dc",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "a07637f6-3df5-46d8-98fd-da8e7b493462",
                  "parentUUID": "77afc91d-8477-4af5-9595-fe78ba3a11dc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment('2016-05-01T03:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "0df03325-6be9-44f3-8fa6-5e84d7fa5f8e",
                  "parentUUID": "77afc91d-8477-4af5-9595-fe78ba3a11dc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a07637f6-3df5-46d8-98fd-da8e7b493462",
                "0df03325-6be9-44f3-8fa6-5e84d7fa5f8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81d421ec-e0e8-42fd-8542-848e509077a3",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "8fa84535-50eb-47ea-80bf-a198e95373a7",
                  "parentUUID": "81d421ec-e0e8-42fd-8542-848e509077a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.MO, ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "fcfbdb30-e4c8-4af8-b02c-10432213b28b",
                  "parentUUID": "81d421ec-e0e8-42fd-8542-848e509077a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8fa84535-50eb-47ea-80bf-a198e95373a7",
                "fcfbdb30-e4c8-4af8-b02c-10432213b28b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64fc3446-ba0d-4ae9-88f2-7685696b7b28",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "099239d6-42db-4d66-b17c-3eb520824789",
                  "parentUUID": "64fc3446-ba0d-4ae9-88f2-7685696b7b28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "8c7b9ac6-4daf-42ac-9130-924a71f5bd39",
                  "parentUUID": "64fc3446-ba0d-4ae9-88f2-7685696b7b28",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "85a21b70-79a9-49e4-9bdf-231f412d1fe3",
                  "parentUUID": "64fc3446-ba0d-4ae9-88f2-7685696b7b28",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "099239d6-42db-4d66-b17c-3eb520824789",
                "8c7b9ac6-4daf-42ac-9130-924a71f5bd39",
                "85a21b70-79a9-49e4-9bdf-231f412d1fe3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f368384-c483-4d44-8815-c39aaa22d532",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "277959ba-6655-4842-bfa1-51ab2443617e",
                  "parentUUID": "6f368384-c483-4d44-8815-c39aaa22d532",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "c0e35456-69d2-4a87-878d-01ec3b14c094",
                  "parentUUID": "6f368384-c483-4d44-8815-c39aaa22d532",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "277959ba-6655-4842-bfa1-51ab2443617e",
                "c0e35456-69d2-4a87-878d-01ec3b14c094"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6307d88f-e9da-4794-976f-2f2773101a9f",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "e3cb2042-45d2-4e81-84cf-a38193415929",
                  "parentUUID": "6307d88f-e9da-4794-976f-2f2773101a9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3cb2042-45d2-4e81-84cf-a38193415929"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b039d269-817e-4801-8cf4-d9b6c11f8197",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "995615b3-9106-487e-ba2f-d7a607c02037",
                  "parentUUID": "b039d269-817e-4801-8cf4-d9b6c11f8197",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "995615b3-9106-487e-ba2f-d7a607c02037"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "485d35bb-4604-4ca5-a9a6-2ecd091a9f52",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "42ab9fd7-6e45-4a07-bd0f-85c6fd489bb3",
                  "parentUUID": "485d35bb-4604-4ca5-a9a6-2ecd091a9f52",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "29fbcd8f-eb0a-4eab-b1f5-7409365279c6",
                  "parentUUID": "485d35bb-4604-4ca5-a9a6-2ecd091a9f52",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "42ab9fd7-6e45-4a07-bd0f-85c6fd489bb3",
                "29fbcd8f-eb0a-4eab-b1f5-7409365279c6"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e7dc370-a5b2-4987-b171-a53d079d6682",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "90549a9d-396b-4f58-a7e2-3aff51ac71d2",
                  "parentUUID": "5e7dc370-a5b2-4987-b171-a53d079d6682",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "ffdbf59d-4201-421e-91b1-d78653bc8d8a",
                  "parentUUID": "5e7dc370-a5b2-4987-b171-a53d079d6682",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90549a9d-396b-4f58-a7e2-3aff51ac71d2",
                "ffdbf59d-4201-421e-91b1-d78653bc8d8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8030acef-cbde-4bab-9ba4-e0a410251c0e",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fb44e3c8-4294-436b-b5c4-51c8ba5232c0",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "233fe612-c6df-4c21-91de-6b98e2c045a0",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "6cd70394-281f-4d8b-af61-9b1a1b1a81ab",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "5c0e2977-db5d-4d2f-9a93-2b6679d8b3df",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "184d56ff-1212-426d-9785-e308960351e7",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "938dc8b9-8307-4e76-9cde-a1868750cfe4",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "1f225eec-8199-4a58-aa01-66a495f68aa7",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "abdf2a7c-06e2-4365-9119-20fb42f7be73",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "6f5a3ad6-35fd-4a47-8f65-8db5673659e8",
                      "parentUUID": "da75549d-1d71-4f49-881b-00cf92bf6fe5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "233fe612-c6df-4c21-91de-6b98e2c045a0",
                    "6cd70394-281f-4d8b-af61-9b1a1b1a81ab",
                    "5c0e2977-db5d-4d2f-9a93-2b6679d8b3df",
                    "184d56ff-1212-426d-9785-e308960351e7",
                    "938dc8b9-8307-4e76-9cde-a1868750cfe4",
                    "1f225eec-8199-4a58-aa01-66a495f68aa7",
                    "abdf2a7c-06e2-4365-9119-20fb42f7be73",
                    "6f5a3ad6-35fd-4a47-8f65-8db5673659e8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "51afae05-52b1-4bcc-be9a-dfd612e04c7e",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "d324b50a-2555-40ab-9c3e-70c83deaf042",
                      "parentUUID": "51afae05-52b1-4bcc-be9a-dfd612e04c7e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "e99b3d9f-73e3-4136-8c44-be7d33335a04",
                      "parentUUID": "51afae05-52b1-4bcc-be9a-dfd612e04c7e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "afa6ed0f-0b16-453a-b3bd-5b9a9072fcb0",
                      "parentUUID": "51afae05-52b1-4bcc-be9a-dfd612e04c7e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d324b50a-2555-40ab-9c3e-70c83deaf042",
                    "e99b3d9f-73e3-4136-8c44-be7d33335a04",
                    "afa6ed0f-0b16-453a-b3bd-5b9a9072fcb0"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b42ef03b-0352-4f95-8551-2f5995bab42f",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "114f0ec0-ba5f-47ba-afee-9a8942540d15",
                      "parentUUID": "b42ef03b-0352-4f95-8551-2f5995bab42f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "0adbdddd-cead-42cf-89e4-72ac60d29ea0",
                      "parentUUID": "b42ef03b-0352-4f95-8551-2f5995bab42f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "01cbf85a-e06b-46b2-b26a-1c1207201f3c",
                      "parentUUID": "b42ef03b-0352-4f95-8551-2f5995bab42f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "114f0ec0-ba5f-47ba-afee-9a8942540d15",
                    "0adbdddd-cead-42cf-89e4-72ac60d29ea0",
                    "01cbf85a-e06b-46b2-b26a-1c1207201f3c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "9ec559c0-dd4a-46e4-8944-7f4ea0260931",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 21,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "70e354eb-fc28-4dd9-bd3c-b1167140d39c",
                      "parentUUID": "9ec559c0-dd4a-46e4-8944-7f4ea0260931",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "57caf139-79b8-426d-a087-6ba535e3e70f",
                      "parentUUID": "9ec559c0-dd4a-46e4-8944-7f4ea0260931",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "7ea99f6a-bd59-4ff6-988e-1895f5621067",
                      "parentUUID": "9ec559c0-dd4a-46e4-8944-7f4ea0260931",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "d923db67-0e7d-4d52-9c1a-c7c0247a7397",
                      "parentUUID": "9ec559c0-dd4a-46e4-8944-7f4ea0260931",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "70e354eb-fc28-4dd9-bd3c-b1167140d39c",
                    "57caf139-79b8-426d-a087-6ba535e3e70f",
                    "7ea99f6a-bd59-4ff6-988e-1895f5621067",
                    "d923db67-0e7d-4d52-9c1a-c7c0247a7397"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c2be87fa-627a-4bca-8016-771557dc8772",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "04b24b7e-da9e-4173-90a3-ce373f528bcc",
                      "parentUUID": "c2be87fa-627a-4bca-8016-771557dc8772",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "3f410647-0471-4059-bd26-787fb4af4a18",
                      "parentUUID": "c2be87fa-627a-4bca-8016-771557dc8772",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "2dda9348-d966-4c2a-ac55-fc807e950a3b",
                      "parentUUID": "c2be87fa-627a-4bca-8016-771557dc8772",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "b5c3aea6-8dfb-409c-b590-6d752ba43f54",
                      "parentUUID": "c2be87fa-627a-4bca-8016-771557dc8772",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "04b24b7e-da9e-4173-90a3-ce373f528bcc",
                    "3f410647-0471-4059-bd26-787fb4af4a18",
                    "2dda9348-d966-4c2a-ac55-fc807e950a3b",
                    "b5c3aea6-8dfb-409c-b590-6d752ba43f54"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9def580-212c-4ee6-9b5e-fa5ad88c10d6",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert.strictEqual(formatDateTZ('Europe/Berlin', 'DSTART', moment('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "bc0156d8-2fea-426f-b861-9515f4a2bea2",
                  "parentUUID": "a9def580-212c-4ee6-9b5e-fa5ad88c10d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "8fc2c163-a619-4ef8-9f62-b91a8fa53729",
                  "parentUUID": "a9def580-212c-4ee6-9b5e-fa5ad88c10d6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "bf54c640-c878-4baf-9117-efba822b274f",
                  "parentUUID": "a9def580-212c-4ee6-9b5e-fa5ad88c10d6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bc0156d8-2fea-426f-b861-9515f4a2bea2",
                "8fc2c163-a619-4ef8-9f62-b91a8fa53729",
                "bf54c640-c878-4baf-9117-efba822b274f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "33842a1a-e8fe-4e73-9564-664ff04dbd8f",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "ce4895a4-e7cf-40ab-9176-6975d4dd610e",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "735a2318-108d-4574-9fbc-96f4958e7c9d",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "3200a411-2a0f-4902-89c2-1d1a3efe4f55",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "bb5f7564-b103-4326-b1bb-9baa504bec07",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "043b2f91-5df4-4837-a151-3b37afeaa208",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "51ed9308-ea59-4ded-9a87-e5486650f9ec",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "756448d6-bbaa-4749-99ae-621884ac6cb9",
                  "parentUUID": "fc76a49c-b31d-489a-9e06-e0a54c575f5c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "33842a1a-e8fe-4e73-9564-664ff04dbd8f",
                "ce4895a4-e7cf-40ab-9176-6975d4dd610e",
                "735a2318-108d-4574-9fbc-96f4958e7c9d",
                "3200a411-2a0f-4902-89c2-1d1a3efe4f55",
                "bb5f7564-b103-4326-b1bb-9baa504bec07",
                "043b2f91-5df4-4837-a151-3b37afeaa208",
                "51ed9308-ea59-4ded-9a87-e5486650f9ec",
                "756448d6-bbaa-4749-99ae-621884ac6cb9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "837341aa-0ce4-4e16-af3c-dee49e806304",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "75dc28f8-e567-419f-9d16-5e1cf10b6563",
                  "parentUUID": "837341aa-0ce4-4e16-af3c-dee49e806304",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "0525f754-0b6f-4fa7-ba41-c6513dba0839",
                  "parentUUID": "837341aa-0ce4-4e16-af3c-dee49e806304",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "75dc28f8-e567-419f-9d16-5e1cf10b6563",
                "0525f754-0b6f-4fa7-ba41-c6513dba0839"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "273bfa5f-5fd7-42ca-9dca-528671d0930d",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "e7573cb8-1415-404d-9d6e-3d06a8c67bf9",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "98b1b17e-3ad4-48b8-ac03-0ea95b80c449",
                      "parentUUID": "e7573cb8-1415-404d-9d6e-3d06a8c67bf9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "d135eced-4be6-4e75-b237-ac2a888bd7be",
                      "parentUUID": "e7573cb8-1415-404d-9d6e-3d06a8c67bf9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "98b1b17e-3ad4-48b8-ac03-0ea95b80c449",
                    "d135eced-4be6-4e75-b237-ac2a888bd7be"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "995b4c65-1a35-4ee2-91ad-5ff0e456cdbe",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "96f53228-a772-498a-97fa-b7bff21f99b6",
                      "parentUUID": "995b4c65-1a35-4ee2-91ad-5ff0e456cdbe",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "df37e490-2bfa-4ce5-bdf4-e802d46d0c6a",
                      "parentUUID": "995b4c65-1a35-4ee2-91ad-5ff0e456cdbe",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "96f53228-a772-498a-97fa-b7bff21f99b6",
                    "df37e490-2bfa-4ce5-bdf4-e802d46d0c6a"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "c7145af8-b95a-4035-ac39-ea538e6cb9c6",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.now();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "b0e3e1f9-c1b2-42f2-8414-40eb156294ac",
                      "parentUUID": "c7145af8-b95a-4035-ac39-ea538e6cb9c6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.fromISO('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "adee1caf-0239-4b60-b997-18e5b164bd22",
                      "parentUUID": "c7145af8-b95a-4035-ac39-ea538e6cb9c6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "b0e3e1f9-c1b2-42f2-8414-40eb156294ac",
                    "adee1caf-0239-4b60-b997-18e5b164bd22"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "f77cbeca-5ce0-4487-bc31-159f31c5048d",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "43417b9d-f85d-420f-9441-03b706db875e",
                      "parentUUID": "f77cbeca-5ce0-4487-bc31-159f31c5048d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 12,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "533dd474-7c06-46ff-b472-9269ce113b20",
                      "parentUUID": "f77cbeca-5ce0-4487-bc31-159f31c5048d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "43417b9d-f85d-420f-9441-03b706db875e",
                    "533dd474-7c06-46ff-b472-9269ce113b20"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 12,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "01666b47-6d8c-4fff-8cea-64227886cdf1",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "0706a585-4433-496f-8bd8-a06087b0c066",
                      "parentUUID": "01666b47-6d8c-4fff-8cea-64227886cdf1",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "102e7c41-b4cf-428b-b26a-c9611452035f",
                      "parentUUID": "01666b47-6d8c-4fff-8cea-64227886cdf1",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0706a585-4433-496f-8bd8-a06087b0c066",
                    "102e7c41-b4cf-428b-b26a-c9611452035f"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "e9963c49-4376-42bd-98af-258691222d44",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date), date);",
                  "err": {},
                  "uuid": "f8ec971e-a215-46a1-8b96-f56eb0b9d1a1",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(moment(date)), date);",
                  "err": {},
                  "uuid": "f526f91a-d0f7-4e0d-9e7a-3894da751ad3",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(momentTz(date)), date);",
                  "err": {},
                  "uuid": "c41c6492-b829-4a3b-bf86-c26bceaa91ea",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(dayjs(date)), date);",
                  "err": {},
                  "uuid": "ff13f716-4509-4da6-b95c-41c118a90a41",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "4086be05-e4e3-4065-b734-64628b6d04b4",
                  "parentUUID": "cb45315f-8b6d-48ea-87c1-bf83dc8e4f71",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9963c49-4376-42bd-98af-258691222d44",
                "f8ec971e-a215-46a1-8b96-f56eb0b9d1a1",
                "f526f91a-d0f7-4e0d-9e7a-3894da751ad3",
                "c41c6492-b829-4a3b-bf86-c26bceaa91ea",
                "ff13f716-4509-4da6-b95c-41c118a90a41",
                "4086be05-e4e3-4065-b734-64628b6d04b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}