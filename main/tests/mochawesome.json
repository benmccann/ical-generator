{
  "stats": {
    "suites": 131,
    "tests": 439,
    "passes": 437,
    "pending": 2,
    "failures": 0,
    "start": "2023-03-30T16:06:42.624Z",
    "end": "2023-03-30T16:06:43.003Z",
    "duration": 379,
    "testsRegistered": 439,
    "passPercent": 100,
    "pendingPercent": 0.45558086560364464,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1ee19195-efe8-456b-8b4c-f4c06ad948f7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "119a4c96-ee57-4925-af71-ad3a3489db0d",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e5f6284d-f7bc-4f9c-9a3c-4d771b87773d",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAlarm({ type: ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "28a3d594-f709-4711-a606-db3be67a1c2a",
                  "parentUUID": "e5f6284d-f7bc-4f9c-9a3c-4d771b87773d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    // @ts-ignore\n    unknown: true,\n    type: ICalAlarmType.display\n}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "b53654eb-1a80-4d68-85f0-37b06970954e",
                  "parentUUID": "e5f6284d-f7bc-4f9c-9a3c-4d771b87773d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28a3d594-f709-4711-a606-db3be67a1c2a",
                "b53654eb-1a80-4d68-85f0-37b06970954e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f70f6f7-20d9-4392-8be6-88f056f2e6ca",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.type(null));\nassert.deepStrictEqual(a, a.type(ICalAlarmType.display));",
                  "err": {},
                  "uuid": "e6c21324-edd7-48af-af86-6a71e79e0597",
                  "parentUUID": "3f70f6f7-20d9-4392-8be6-88f056f2e6ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAlarmType.display);\nassert.strictEqual(a.type(), 'display');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "f3a729c3-d2da-4d5b-8a63-9c2860aef85d",
                  "parentUUID": "3f70f6f7-20d9-4392-8be6-88f056f2e6ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "dfafdbe3-1407-4b8b-84b3-ec251563216d",
                  "parentUUID": "3f70f6f7-20d9-4392-8be6-88f056f2e6ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 60 * 10\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "6d885554-1471-4794-9f8d-74a6062f7a6a",
                  "parentUUID": "3f70f6f7-20d9-4392-8be6-88f056f2e6ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6c21324-edd7-48af-af86-6a71e79e0597",
                "f3a729c3-d2da-4d5b-8a63-9c2860aef85d",
                "dfafdbe3-1407-4b8b-84b3-ec251563216d",
                "6d885554-1471-4794-9f8d-74a6062f7a6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.trigger(null));\nassert.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "bf48b26a-f86e-4a98-8c36-23b6bb80ce88",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert.strictEqual(a.trigger(), 300);\nassert.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "35c4113f-5483-4f1c-98d2-5dcecd0aedba",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "6b429b0a-4977-4127-9412-8ee5504c3280",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(60 * 10);\na.trigger(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "abd3af33-a748-4e45-922b-25683823c7a6",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(new Date());\nassert.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "6858d1cc-5e70-414d-9740-1e198d134990",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "9f861191-451d-4723-bb68-2d0afa062b72",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "9444641d-035f-48f5-8608-d7b8e6b41078",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "d6c22f94-0a64-423b-b5d2-07f02cb3c131",
                  "parentUUID": "b0d15eae-7cbb-4b3a-98c5-121ebc0015e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf48b26a-f86e-4a98-8c36-23b6bb80ce88",
                "35c4113f-5483-4f1c-98d2-5dcecd0aedba",
                "6b429b0a-4977-4127-9412-8ee5504c3280",
                "abd3af33-a748-4e45-922b-25683823c7a6",
                "6858d1cc-5e70-414d-9740-1e198d134990",
                "9f861191-451d-4723-bb68-2d0afa062b72",
                "9444641d-035f-48f5-8608-d7b8e6b41078",
                "d6c22f94-0a64-423b-b5d2-07f02cb3c131"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e17584a-d306-423b-aecc-9d8fac5702f6",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "145a5870-360f-4a39-86be-bd48de9db291",
                  "parentUUID": "5e17584a-d306-423b-aecc-9d8fac5702f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar())).triggerAfter(300);\nassert.strictEqual(a.triggerAfter(), 300);\nassert.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "e46b3723-f6df-45f8-b733-a8d4b4b3b2e7",
                  "parentUUID": "5e17584a-d306-423b-aecc-9d8fac5702f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerAfter(120);\nassert.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "212b86c2-b2e3-41ed-8df6-ba954435b0e8",
                  "parentUUID": "5e17584a-d306-423b-aecc-9d8fac5702f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "f7c4b56b-5cb3-4cc2-bbbe-81a4339d3528",
                  "parentUUID": "5e17584a-d306-423b-aecc-9d8fac5702f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('20150201T133845Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerAfter: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "0a8cf060-3f4c-453c-a0fb-5f1d4df3182e",
                  "parentUUID": "5e17584a-d306-423b-aecc-9d8fac5702f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "145a5870-360f-4a39-86be-bd48de9db291",
                "e46b3723-f6df-45f8-b733-a8d4b4b3b2e7",
                "212b86c2-b2e3-41ed-8df6-ba954435b0e8",
                "f7c4b56b-5cb3-4cc2-bbbe-81a4339d3528",
                "0a8cf060-3f4c-453c-a0fb-5f1d4df3182e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "83bf917c-3ae1-421d-b0e9-48577b434f87",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerBefore(null));\nassert.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "e4e25c8f-376c-410b-8e41-c725821b547f",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "c64161fa-39fa-4696-ba38-6fb7ced5c170",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "a498efa6-35e5-41d2-9d44-aaf5b54e1307",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "261a2f8b-4954-4d20-8931-5cad272534f7",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\na.triggerBefore(now);\nassert.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "b3b35e78-bbda-4b95-9a50-c5c3f33003e6",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "30ec027d-8e00-4b97-b0db-18197a1879be",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "21280bc2-a6c0-4933-9d3e-93b792357c5f",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerBefore: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "125782d3-1423-434e-8798-36352c6b343a",
                  "parentUUID": "83bf917c-3ae1-421d-b0e9-48577b434f87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4e25c8f-376c-410b-8e41-c725821b547f",
                "c64161fa-39fa-4696-ba38-6fb7ced5c170",
                "a498efa6-35e5-41d2-9d44-aaf5b54e1307",
                "261a2f8b-4954-4d20-8931-5cad272534f7",
                "b3b35e78-bbda-4b95-9a50-c5c3f33003e6",
                "30ec027d-8e00-4b97-b0db-18197a1879be",
                "21280bc2-a6c0-4933-9d3e-93b792357c5f",
                "125782d3-1423-434e-8798-36352c6b343a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "144d96f8-7e4f-4cfc-929d-e199bd650708",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.repeat(null));\nassert.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "d7a64688-1c83-4d94-b8d9-bef15e0aad92",
                  "parentUUID": "144d96f8-7e4f-4cfc-929d-e199bd650708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.repeat(), null);\na.repeat(100);\nassert.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "7f915252-d37a-490b-9d0c-0dd9f53d4df1",
                  "parentUUID": "144d96f8-7e4f-4cfc-929d-e199bd650708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "5661f972-6660-432a-92cc-ee81ca711bd3",
                  "parentUUID": "144d96f8-7e4f-4cfc-929d-e199bd650708",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "cd437248-54d2-4703-9c23-284ab262cac3",
                  "parentUUID": "144d96f8-7e4f-4cfc-929d-e199bd650708",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7a64688-1c83-4d94-b8d9-bef15e0aad92",
                "7f915252-d37a-490b-9d0c-0dd9f53d4df1",
                "5661f972-6660-432a-92cc-ee81ca711bd3",
                "cd437248-54d2-4703-9c23-284ab262cac3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "304a9365-3aa8-4bbb-a91b-0338d720aa2b",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.interval(null));\nassert.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "750c4fcc-1109-416a-8b35-cb5ec1cc3774",
                  "parentUUID": "304a9365-3aa8-4bbb-a91b-0338d720aa2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.interval(), null);\na.interval(30);\nassert.strictEqual(a.interval(), 30);\na.interval(null);\nassert.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "16454b23-191e-4564-a66e-ddb917a6b68b",
                  "parentUUID": "304a9365-3aa8-4bbb-a91b-0338d720aa2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "3e3ea8d9-8743-4863-a297-828ea0738a8f",
                  "parentUUID": "304a9365-3aa8-4bbb-a91b-0338d720aa2b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "0849510a-27b3-4378-be01-800b97d1cc34",
                  "parentUUID": "304a9365-3aa8-4bbb-a91b-0338d720aa2b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "750c4fcc-1109-416a-8b35-cb5ec1cc3774",
                "16454b23-191e-4564-a66e-ddb917a6b68b",
                "3e3ea8d9-8743-4863-a297-828ea0738a8f",
                "0849510a-27b3-4378-be01-800b97d1cc34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.attach(null));\nassert.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "0e7ca1f3-2c7a-4eda-b1cd-d8f5f5756339",
                  "parentUUID": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.attach(), null);\na.attach(t);\nassert.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "2c4e3196-2601-43d8-86e9-ddbc9afef9cd",
                  "parentUUID": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "20f56ff1-20ed-43ea-a5b7-41ff1814e2f4",
                  "parentUUID": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "825eb35c-198f-41cf-bd9e-f6ce77f74e22",
                  "parentUUID": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.audio,\n    trigger: 300\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "58ba473d-6ee4-4716-83c1-95d8c4c9f47f",
                  "parentUUID": "0fb627e2-d9a9-489d-9cfc-1ac681e9dec9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0e7ca1f3-2c7a-4eda-b1cd-d8f5f5756339",
                "2c4e3196-2601-43d8-86e9-ddbc9afef9cd",
                "20f56ff1-20ed-43ea-a5b7-41ff1814e2f4",
                "825eb35c-198f-41cf-bd9e-f6ce77f74e22",
                "58ba473d-6ee4-4716-83c1-95d8c4c9f47f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af130983-437f-42c8-b473-51f464b6ba4a",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.description(null));\nassert.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "3ec8f7c3-c744-4133-a6f4-b78f7e2a29d3",
                  "parentUUID": "af130983-437f-42c8-b473-51f464b6ba4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "06edfec5-46b8-489a-93d2-8f4b0f9e61cb",
                  "parentUUID": "af130983-437f-42c8-b473-51f464b6ba4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "aa4d5985-4ef0-4098-9cd0-d0f8fa394493",
                  "parentUUID": "af130983-437f-42c8-b473-51f464b6ba4a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300\n}, new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "7b282627-f537-4c46-be84-e171c9c7d1bd",
                  "parentUUID": "af130983-437f-42c8-b473-51f464b6ba4a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3ec8f7c3-c744-4133-a6f4-b78f7e2a29d3",
                "06edfec5-46b8-489a-93d2-8f4b0f9e61cb",
                "aa4d5985-4ef0-4098-9cd0-d0f8fa394493",
                "7b282627-f537-4c46-be84-e171c9c7d1bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8cd351aa-f01f-45a3-9767-4c83ee4b1f6a",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "8dda797a-09a4-4cea-8bb6-94f9dc626afa",
                  "parentUUID": "8cd351aa-f01f-45a3-9767-4c83ee4b1f6a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dda797a-09a4-4cea-8bb6-94f9dc626afa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58aa0173-26ba-4941-872b-63134ce4d311",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.type(ICalAlarmType.display);\na.trigger(120);\nassert.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "ec84bfa3-1716-4bcf-82f8-de93307450b8",
                  "parentUUID": "58aa0173-26ba-4941-872b-63134ce4d311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAlarm(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "84c697b4-f8f5-455b-bfd4-3f4c3090c167",
                  "parentUUID": "58aa0173-26ba-4941-872b-63134ce4d311",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ec84bfa3-1716-4bcf-82f8-de93307450b8",
                "84c697b4-f8f5-455b-bfd4-3f4c3090c167"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e436ba03-683b-460c-bfc9-d56e2391d51e",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ trigger: 300 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "dc920fff-0a0c-4e06-b42c-415fb77b4a00",
                  "parentUUID": "e436ba03-683b-460c-bfc9-d56e2391d51e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "0afc0fb2-7142-4a90-bb03-55b3401731a3",
                  "parentUUID": "e436ba03-683b-460c-bfc9-d56e2391d51e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 300, repeat: 4 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "d7dcf2c1-43f8-47f8-a592-3a8ecb150955",
                  "parentUUID": "e436ba03-683b-460c-bfc9-d56e2391d51e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "6365db78-4dcb-4700-8495-e6f5a65b10da",
                  "parentUUID": "e436ba03-683b-460c-bfc9-d56e2391d51e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc920fff-0a0c-4e06-b42c-415fb77b4a00",
                "0afc0fb2-7142-4a90-bb03-55b3401731a3",
                "d7dcf2c1-43f8-47f8-a592-3a8ecb150955",
                "6365db78-4dcb-4700-8495-e6f5a65b10da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "231d6272-9309-419d-8edc-1588ce1f2934",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4c0fe29e-da4a-47a7-b47f-5e423fac9e07",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: ICalAttendeeStatus.ACCEPTED,\n    role: ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new ICalAttendee(data, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "2c14c67a-cc05-4ffe-9693-6c19e99513a8",
                  "parentUUID": "4c0fe29e-da4a-47a7-b47f-5e423fac9e07",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAttendee({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "c4d77e1b-051d-424e-a9a1-6f3c0c96ecc0",
                  "parentUUID": "4c0fe29e-da4a-47a7-b47f-5e423fac9e07",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2c14c67a-cc05-4ffe-9693-6c19e99513a8",
                "c4d77e1b-051d-424e-a9a1-6f3c0c96ecc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9fc43e0c-1c23-4a87-a3ef-06cbe6b94a75",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.name(), null);\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "28588e1b-812c-4677-bd07-59cc580ba688",
                  "parentUUID": "9fc43e0c-1c23-4a87-a3ef-06cbe6b94a75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.name(null));\nassert.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "4e7aa720-ff9d-4ce7-bae5-e248a337b13d",
                  "parentUUID": "9fc43e0c-1c23-4a87-a3ef-06cbe6b94a75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "d8c0ed86-38a7-4675-8528-68ed9e14dd62",
                  "parentUUID": "9fc43e0c-1c23-4a87-a3ef-06cbe6b94a75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28588e1b-812c-4677-bd07-59cc580ba688",
                "4e7aa720-ff9d-4ce7-bae5-e248a337b13d",
                "d8c0ed86-38a7-4675-8528-68ed9e14dd62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0eea2f40-6550-4178-adbe-62571be4dc40",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).email('foo@example.com');\nassert.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "1a33bc80-cb91-4b1e-9a3c-acc89d72f20f",
                  "parentUUID": "0eea2f40-6550-4178-adbe-62571be4dc40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "a6307ebb-2f29-4915-a410-a9cc7c35e085",
                  "parentUUID": "0eea2f40-6550-4178-adbe-62571be4dc40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "df37d258-7962-40aa-a1b6-e64071173b9d",
                  "parentUUID": "0eea2f40-6550-4178-adbe-62571be4dc40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a33bc80-cb91-4b1e-9a3c-acc89d72f20f",
                "a6307ebb-2f29-4915-a410-a9cc7c35e085",
                "df37d258-7962-40aa-a1b6-e64071173b9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3a32f869-4d3d-42d2-befa-3ff1fb101a05",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "401b190d-a8f8-4131-a6a8-c30f978a3d96",
                  "parentUUID": "3a32f869-4d3d-42d2-befa-3ff1fb101a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.mailto(null));\nassert.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "325c0fce-d0c8-4a58-881a-953e92282e1d",
                  "parentUUID": "3a32f869-4d3d-42d2-befa-3ff1fb101a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\na.mailto('mail2@example2.com');\nassert.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "2f97a28b-f33a-4739-9ac3-d6f9bb595bbf",
                  "parentUUID": "3a32f869-4d3d-42d2-befa-3ff1fb101a05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "401b190d-a8f8-4131-a6a8-c30f978a3d96",
                "325c0fce-d0c8-4a58-881a-953e92282e1d",
                "2f97a28b-f33a-4739-9ac3-d6f9bb595bbf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0b8a974d-5112-4ced-b6e9-684488f2638b",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).sentBy('foo@example.com');\nassert.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "cf1cd22a-41a4-4a09-a931-7b64b9797f9a",
                  "parentUUID": "0b8a974d-5112-4ced-b6e9-684488f2638b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "ee77224a-6074-429e-9365-39d9d21c91c4",
                  "parentUUID": "0b8a974d-5112-4ced-b6e9-684488f2638b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "49a455ec-adde-435e-9857-3cb0bc69427e",
                  "parentUUID": "0b8a974d-5112-4ced-b6e9-684488f2638b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf1cd22a-41a4-4a09-a931-7b64b9797f9a",
                "ee77224a-6074-429e-9365-39d9d21c91c4",
                "49a455ec-adde-435e-9857-3cb0bc69427e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.role(ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "d8950921-8f05-4c8e-be76-95730f5eb038",
                  "parentUUID": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).role(ICalAttendeeRole.REQ);\nassert.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "b1b0e919-575e-4623-b006-c44f547d0829",
                  "parentUUID": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "0a668b81-85b2-47ff-901f-4548dada6e34",
                  "parentUUID": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "ccd97946-8f8d-4c62-996f-7414095ff0c8",
                  "parentUUID": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    role: ICalAttendeeRole.NON\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "e12e752c-9a4f-4a81-a1a3-81a05121a6a1",
                  "parentUUID": "dedf86dd-a214-46d3-9ebc-3bd7ee92ccc0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d8950921-8f05-4c8e-be76-95730f5eb038",
                "b1b0e919-575e-4623-b006-c44f547d0829",
                "0a668b81-85b2-47ff-901f-4548dada6e34",
                "ccd97946-8f8d-4c62-996f-7414095ff0c8",
                "e12e752c-9a4f-4a81-a1a3-81a05121a6a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0561d6ae-9b05-4214-8cad-1daf79a4ed80",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.rsvp(null));\nassert.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "e9536501-7ed7-415f-a5a3-089730a67617",
                  "parentUUID": "0561d6ae-9b05-4214-8cad-1daf79a4ed80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.rsvp(true);\nassert.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "91b3d01e-ffc8-47d7-a8d2-e6194f188e55",
                  "parentUUID": "0561d6ae-9b05-4214-8cad-1daf79a4ed80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "0bc1d868-84b9-42fc-86d8-1d8053ca7517",
                  "parentUUID": "0561d6ae-9b05-4214-8cad-1daf79a4ed80",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    rsvp: true\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "f15b03f8-7685-4af8-a818-77f69c91b32b",
                  "parentUUID": "0561d6ae-9b05-4214-8cad-1daf79a4ed80",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e9536501-7ed7-415f-a5a3-089730a67617",
                "91b3d01e-ffc8-47d7-a8d2-e6194f188e55",
                "0bc1d868-84b9-42fc-86d8-1d8053ca7517",
                "f15b03f8-7685-4af8-a818-77f69c91b32b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.status(null));\nassert.deepStrictEqual(a, a.status(ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "9a027190-b9a8-482d-af87-9482e61a2015",
                  "parentUUID": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.status(), null);\na.status(ICalAttendeeStatus.ACCEPTED);\nassert.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "6ebcbd20-d1f6-4808-b434-48521337c3b8",
                  "parentUUID": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "85876d95-654e-4cbb-ae82-e09287ed6f0a",
                  "parentUUID": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.DECLINED }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "202bd39c-a2b5-4e0d-9f0f-63f564b79859",
                  "parentUUID": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.NEEDSACTION }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "7eb624f7-5b7b-446a-af76-9148d91031b2",
                  "parentUUID": "db140ab7-4d1d-4fca-87c2-41d547ca674c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9a027190-b9a8-482d-af87-9482e61a2015",
                "6ebcbd20-d1f6-4808-b434-48521337c3b8",
                "85876d95-654e-4cbb-ae82-e09287ed6f0a",
                "202bd39c-a2b5-4e0d-9f0f-63f564b79859",
                "7eb624f7-5b7b-446a-af76-9148d91031b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ad744210-8e5e-47ab-9510-1f87a7ea2803",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.type(null), a);\nassert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "70f48339-d2af-43dc-880c-5a38b4b136c3",
                  "parentUUID": "ad744210-8e5e-47ab-9510-1f87a7ea2803",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAttendeeType.ROOM);\nassert.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "267f7573-4a9a-4523-8040-af91d488fada",
                  "parentUUID": "ad744210-8e5e-47ab-9510-1f87a7ea2803",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "15789d06-cfe4-46bd-8673-2b3e1d96477d",
                  "parentUUID": "ad744210-8e5e-47ab-9510-1f87a7ea2803",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mailing-list@example.com',\n    type: ICalAttendeeType.GROUP\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "7603203d-a70b-454a-bff7-c8bba7dedfdc",
                  "parentUUID": "ad744210-8e5e-47ab-9510-1f87a7ea2803",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "70f48339-d2af-43dc-880c-5a38b4b136c3",
                "267f7573-4a9a-4523-8040-af91d488fada",
                "15789d06-cfe4-46bd-8673-2b3e1d96477d",
                "7603203d-a70b-454a-bff7-c8bba7dedfdc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b25409c8-1283-4d17-93ca-a32ba244e0f0",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedTo(null));\nassert.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "59cfc4d4-efe5-41b0-8720-4a29d4f32638",
                  "parentUUID": "b25409c8-1283-4d17-93ca-a32ba244e0f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "a655b7f0-9ece-49e1-b0a7-5104fcc265e3",
                  "parentUUID": "b25409c8-1283-4d17-93ca-a32ba244e0f0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "fbb34cfe-7027-4c72-9c40-4ea3b1ea4644",
                  "parentUUID": "b25409c8-1283-4d17-93ca-a32ba244e0f0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59cfc4d4-efe5-41b0-8720-4a29d4f32638",
                "a655b7f0-9ece-49e1-b0a7-5104fcc265e3",
                "fbb34cfe-7027-4c72-9c40-4ea3b1ea4644"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b02ddb1-e5b5-4117-aa12-15fed162c3cb",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedFrom(null));\nassert.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "aaf68b7c-95ab-4b0f-acb4-e08e361678a7",
                  "parentUUID": "3b02ddb1-e5b5-4117-aa12-15fed162c3cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nlet result = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom({\n    name: 'Max Mustermann',\n    email: 'max.mustermann@example.com'\n});\nresult = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.name(), 'Max Mustermann');\nassert.strictEqual(result.email(), 'max.mustermann@example.com');\na.delegatedFrom(null);\nassert.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "39da555f-6242-4e04-8f30-a1071e6c1577",
                  "parentUUID": "3b02ddb1-e5b5-4117-aa12-15fed162c3cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "c307208b-6cc0-40a0-b26c-a89d1e6f3901",
                  "parentUUID": "3b02ddb1-e5b5-4117-aa12-15fed162c3cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aaf68b7c-95ab-4b0f-acb4-e08e361678a7",
                "39da555f-6242-4e04-8f30-a1071e6c1577",
                "c307208b-6cc0-40a0-b26c-a89d1e6f3901"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78a998ac-3e9d-4add-82ca-516db758ff16",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesTo({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "605eabac-c3ab-419d-b76a-aa13fb7d2b2c",
                  "parentUUID": "78a998ac-3e9d-4add-82ca-516db758ff16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "08392f3f-8fdb-4c47-8fcb-d8858a13639f",
                  "parentUUID": "78a998ac-3e9d-4add-82ca-516db758ff16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar()))\n    .delegatesTo({ name: 'Cody' });\nassert.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "2b4e7e64-3887-4781-bc18-3167495c540e",
                  "parentUUID": "78a998ac-3e9d-4add-82ca-516db758ff16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "605eabac-c3ab-419d-b76a-aa13fb7d2b2c",
                "08392f3f-8fdb-4c47-8fcb-d8858a13639f",
                "2b4e7e64-3887-4781-bc18-3167495c540e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff841454-6f86-45d7-9bab-2e6dca92d956",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesFrom({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "ad59e83e-db03-4563-96e7-bdb2af4976f5",
                  "parentUUID": "ff841454-6f86-45d7-9bab-2e6dca92d956",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "ae9e9f39-9ad5-4aec-b347-93518a993f9f",
                  "parentUUID": "ff841454-6f86-45d7-9bab-2e6dca92d956",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar())).delegatesFrom({ name: 'Cody' });\nassert.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "3b673184-1aa6-4bea-b5a8-83d08579504f",
                  "parentUUID": "ff841454-6f86-45d7-9bab-2e6dca92d956",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad59e83e-db03-4563-96e7-bdb2af4976f5",
                "ae9e9f39-9ad5-4aec-b347-93518a993f9f",
                "3b673184-1aa6-4bea-b5a8-83d08579504f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d9554541-73db-4b71-a46f-579235456c8b",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.org' }, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "039e56b2-10b9-4322-92e5-38ac5df0146b",
                  "parentUUID": "d9554541-73db-4b71-a46f-579235456c8b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "039e56b2-10b9-4322-92e5-38ac5df0146b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "401f25a0-80a3-4fc7-b061-f30c85fbc5da",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "4d92095f-36be-4ea1-a541-10316450a390",
                  "parentUUID": "401f25a0-80a3-4fc7-b061-f30c85fbc5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAttendee(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "7c9171ac-41fc-4af4-b6a0-586b0ed0365a",
                  "parentUUID": "401f25a0-80a3-4fc7-b061-f30c85fbc5da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d92095f-36be-4ea1-a541-10316450a390",
                "7c9171ac-41fc-4af4-b6a0-586b0ed0365a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3b560fb1-9605-44ed-9579-c6c70bd99e58",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Testuser' }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "67538b80-397d-4803-b10c-53e66c3de1b2",
                  "parentUUID": "3b560fb1-9605-44ed-9579-c6c70bd99e58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "67538b80-397d-4803-b10c-53e66c3de1b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e153ba7c-2e89-4675-9ffd-575382addfe5",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0e3d08c7-582c-484d-8e2d-6869cf4ae16e",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new ICalCalendar(data);\nassert.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "e04b97ab-52de-4b4d-9485-6aa83afa4c4b",
                  "parentUUID": "0e3d08c7-582c-484d-8e2d-6869cf4ae16e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e04b97ab-52de-4b4d-9485-6aa83afa4c4b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "4eb92ea5-df75-40f4-be1f-ee55cf745e29",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "61feeef0-7aca-44b7-81ad-7efdb6612645",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "f87135ec-8942-42d9-b633-9d934feb7e63",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "e449981b-3628-421a-8e7c-ade0fa72c41f",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "87c8fab6-77b9-492b-a6e5-8686d420a0a5",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "d13039d6-ef85-4107-b43b-aa0b4436db9a",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "492e2926-2bf5-4216-9ecf-480a1cd4b37f",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "a57d21b0-781f-4e9d-a348-81583e9a76b6",
                  "parentUUID": "95dd5fce-5d3d-42b6-96dc-0367379b67f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4eb92ea5-df75-40f4-be1f-ee55cf745e29",
                "61feeef0-7aca-44b7-81ad-7efdb6612645",
                "f87135ec-8942-42d9-b633-9d934feb7e63",
                "e449981b-3628-421a-8e7c-ade0fa72c41f",
                "87c8fab6-77b9-492b-a6e5-8686d420a0a5",
                "d13039d6-ef85-4107-b43b-aa0b4436db9a",
                "492e2926-2bf5-4216-9ecf-480a1cd4b37f",
                "a57d21b0-781f-4e9d-a348-81583e9a76b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5bf28521-1c35-4cd9-b596-f94e651dcc59",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.deepStrictEqual(c, c.method(null), 'method(null)');\nassert.deepStrictEqual(c, c.method(ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "114321fc-26ac-4b93-8abb-c3f187611eb4",
                  "parentUUID": "5bf28521-1c35-4cd9-b596-f94e651dcc59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.strictEqual(c.method(), null);\nc.method(null);\nassert.strictEqual(c.method(), null);\nc.method(ICalCalendarMethod.PUBLISH);\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "bfdf1c9c-1a3a-4273-a2d2-6eddf025a3ee",
                  "parentUUID": "5bf28521-1c35-4cd9-b596-f94e651dcc59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "fb311bdd-f508-4b71-a833-31cd7f3a43b9",
                  "parentUUID": "5bf28521-1c35-4cd9-b596-f94e651dcc59",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar({ method: ICalCalendarMethod.PUBLISH });\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(ICalCalendarMethod.ADD);\nassert.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "c4129cd4-94f9-4385-880a-c37457a7e4c5",
                  "parentUUID": "5bf28521-1c35-4cd9-b596-f94e651dcc59",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "114321fc-26ac-4b93-8abb-c3f187611eb4",
                "bfdf1c9c-1a3a-4273-a2d2-6eddf025a3ee",
                "fb311bdd-f508-4b71-a833-31cd7f3a43b9",
                "c4129cd4-94f9-4385-880a-c37457a7e4c5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2d7416a1-e2fc-4af4-8ce1-9fe0940965c4",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.name(null));\nassert.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "c2117a6e-5b28-4f1a-9f2c-8e673f83b864",
                  "parentUUID": "2d7416a1-e2fc-4af4-8ce1-9fe0940965c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "71eddc8b-15da-41f2-84c4-63bd1dd658f2",
                  "parentUUID": "2d7416a1-e2fc-4af4-8ce1-9fe0940965c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "ff1b7b4a-b1fd-44a3-bdf8-b0939cb88db3",
                  "parentUUID": "2d7416a1-e2fc-4af4-8ce1-9fe0940965c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c2117a6e-5b28-4f1a-9f2c-8e673f83b864",
                "71eddc8b-15da-41f2-84c4-63bd1dd658f2",
                "ff1b7b4a-b1fd-44a3-bdf8-b0939cb88db3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3de63f72-d490-4f39-8672-9ed3383b850f",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.description(null));\nassert.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "503415a2-62a2-46bb-aa16-15ca229c0e1f",
                  "parentUUID": "3de63f72-d490-4f39-8672-9ed3383b850f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "8f77dcc5-31fe-4568-92e6-fc55058590b3",
                  "parentUUID": "3de63f72-d490-4f39-8672-9ed3383b850f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "4a699f27-ba06-473b-bf1a-94ce67d3f1fd",
                  "parentUUID": "3de63f72-d490-4f39-8672-9ed3383b850f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "503415a2-62a2-46bb-aa16-15ca229c0e1f",
                "8f77dcc5-31fe-4568-92e6-fc55058590b3",
                "4a699f27-ba06-473b-bf1a-94ce67d3f1fd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "72ee34e4-2f78-48d3-9dc3-3ff5a3ce25c8",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert.deepStrictEqual(cal, cal.timezone(null));\nassert.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "59eac1d2-88b1-4ca8-8f05-df1b8c90253e",
                  "parentUUID": "72ee34e4-2f78-48d3-9dc3-3ff5a3ce25c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "dc166bff-d8be-484b-b1ba-313ac51aeb62",
                  "parentUUID": "72ee34e4-2f78-48d3-9dc3-3ff5a3ce25c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "a4f4f510-614f-4eae-8e8f-c67973da799b",
                  "parentUUID": "72ee34e4-2f78-48d3-9dc3-3ff5a3ce25c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "59eac1d2-88b1-4ca8-8f05-df1b8c90253e",
                "dc166bff-d8be-484b-b1ba-313ac51aeb62",
                "a4f4f510-614f-4eae-8e8f-c67973da799b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c55d46e-e286-42a9-bb81-5a5e1f9885d5",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert.deepStrictEqual(cal.ttl(moment.duration(2, 'days')), cal);\nassert.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "dc233cc5-c707-4383-b3e8-f851c6dee7e4",
                  "parentUUID": "7c55d46e-e286-42a9-bb81-5a5e1f9885d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "e8045aad-073e-4322-a10b-46c2bbfd6feb",
                  "parentUUID": "7c55d46e-e286-42a9-bb81-5a5e1f9885d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "0930c6b6-d937-4bdd-8a5c-1bef1db290e4",
                  "parentUUID": "7c55d46e-e286-42a9-bb81-5a5e1f9885d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dc233cc5-c707-4383-b3e8-f851c6dee7e4",
                "e8045aad-073e-4322-a10b-46c2bbfd6feb",
                "0930c6b6-d937-4bdd-8a5c-1bef1db290e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "58b7a474-6580-43cf-a2a1-6384f995bc18",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "4bdac820-788e-4132-8ec8-22a7e0667a2c",
                  "parentUUID": "58b7a474-6580-43cf-a2a1-6384f995bc18",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "68fc0cd4-60ea-4984-8a3b-8972a5970d14",
                  "parentUUID": "58b7a474-6580-43cf-a2a1-6384f995bc18",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4bdac820-788e-4132-8ec8-22a7e0667a2c",
                "68fc0cd4-60ea-4984-8a3b-8972a5970d14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c40f36ce-aaa5-4bf6-9541-d5c4faa701d3",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "614835b1-94bb-416d-b5d7-a3d2c876fe41",
                  "parentUUID": "c40f36ce-aaa5-4bf6-9541-d5c4faa701d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "917fe1f8-ac20-47b7-b6dd-0e506022f95a",
                  "parentUUID": "c40f36ce-aaa5-4bf6-9541-d5c4faa701d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "befb7427-da68-4de5-9006-3d7a3abf601f",
                  "parentUUID": "c40f36ce-aaa5-4bf6-9541-d5c4faa701d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "614835b1-94bb-416d-b5d7-a3d2c876fe41",
                "917fe1f8-ac20-47b7-b6dd-0e506022f95a",
                "befb7427-da68-4de5-9006-3d7a3abf601f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "055d43b5-b3b3-4fa0-9ace-d20248cfbe95",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "50fc1f64-44f4-41c1-b9f8-85903d47262e",
                  "parentUUID": "055d43b5-b3b3-4fa0-9ace-d20248cfbe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "45e8f9df-017a-4a0c-ae87-df5e0996d32b",
                  "parentUUID": "055d43b5-b3b3-4fa0-9ace-d20248cfbe95",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "427a8b1d-ab3b-49fd-87dd-ce6956661079",
                  "parentUUID": "055d43b5-b3b3-4fa0-9ace-d20248cfbe95",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50fc1f64-44f4-41c1-b9f8-85903d47262e",
                "45e8f9df-017a-4a0c-ae87-df5e0996d32b",
                "427a8b1d-ab3b-49fd-87dd-ce6956661079"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "740af4f2-e625-4923-9aae-ed48b827a2c0",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.ok(cal.createEvent({}) instanceof ICalEvent);",
                  "err": {},
                  "uuid": "20d4d59f-3e65-44e1-a7b6-b61151bf7598",
                  "parentUUID": "740af4f2-e625-4923-9aae-ed48b827a2c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "13f08712-42c6-42ef-8418-fa82f3586af0",
                  "parentUUID": "740af4f2-e625-4923-9aae-ed48b827a2c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function () {\n    new ICalCalendar().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "7e97e5c8-055c-4985-b4e4-38423f74e740",
                  "parentUUID": "740af4f2-e625-4923-9aae-ed48b827a2c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20d4d59f-3e65-44e1-a7b6-b61151bf7598",
                "13f08712-42c6-42ef-8418-fa82f3586af0",
                "7e97e5c8-055c-4985-b4e4-38423f74e740"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dfbf6f98-13e6-4230-8447-702183c626ab",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "d84064a0-881f-4a36-836a-931ad99cace0",
                  "parentUUID": "dfbf6f98-13e6-4230-8447-702183c626ab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert.strictEqual(cal.length(), 2);\nassert.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "39194f62-0d71-4937-b9b3-51b2293fa4f3",
                  "parentUUID": "dfbf6f98-13e6-4230-8447-702183c626ab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d84064a0-881f-4a36-836a-931ad99cace0",
                "39194f62-0d71-4937-b9b3-51b2293fa4f3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc1dc760-aa60-4473-bfac-420a8f099702",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.clear(), cal);\nassert.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "d54ebfff-8696-4bd1-9b4f-6eb11b071275",
                  "parentUUID": "dc1dc760-aa60-4473-bfac-420a8f099702",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d54ebfff-8696-4bd1-9b4f-6eb11b071275"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e4958cd-28d5-46ca-b29e-45f440d24c21",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.save(file, function () {\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n    assert.deepStrictEqual(cal, cal.save(file, function () {\n        assert.ok(existsSync(file));\n        unlinkSync(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "263c5d20-3ff7-4bb2-bf14-950e7d69f83f",
                  "parentUUID": "5e4958cd-28d5-46ca-b29e-45f440d24c21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = join(tmpdir(), 'save.ical');\n    const cal = new ICalCalendar();\n    yield cal.save(file);\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n});",
                  "err": {},
                  "uuid": "63a0fe2b-f082-418d-b653-8674b34f590e",
                  "parentUUID": "5e4958cd-28d5-46ca-b29e-45f440d24c21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "76e9a9e1-fe1c-469d-89d9-30ad2e3036c3",
                  "parentUUID": "5e4958cd-28d5-46ca-b29e-45f440d24c21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "263c5d20-3ff7-4bb2-bf14-950e7d69f83f",
                "63a0fe2b-f082-418d-b653-8674b34f590e",
                "76e9a9e1-fe1c-469d-89d9-30ad2e3036c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "582ad77c-4439-434a-8f72-63784fccec66",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);",
                  "err": {},
                  "uuid": "747214c2-f1f0-404c-a8e9-f6dc2b19556c",
                  "parentUUID": "582ad77c-4439-434a-8f72-63784fccec66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "cb284e48-d70b-4346-b6bc-403991fe9137",
                  "parentUUID": "582ad77c-4439-434a-8f72-63784fccec66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "747214c2-f1f0-404c-a8e9-f6dc2b19556c",
                "cb284e48-d70b-4346-b6bc-403991fe9137"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "be4d42fb-2f4b-448c-a88f-35a5b5cf0028",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 26,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield getPortPromise();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "4fce5608-3994-4040-9dee-affe430cfd43",
                  "parentUUID": "be4d42fb-2f4b-448c-a88f-35a5b5cf0028",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fce5608-3994-4040-9dee-affe430cfd43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff21b6fd-eeb3-4571-8592-4cab914a3e9f",
              "title": "toBlob()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toBlob() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Blob Calendar Event'\n            }\n        ]\n    });\n    const blob = cal.toBlob();\n    assert.ok(blob instanceof Blob, 'instanceof Blob');\n    assert.ok(blob.size > 0, 'blob is filled');\n    assert.strictEqual(blob.type, 'text/calendar');\n});",
                  "err": {},
                  "uuid": "fdf2b6c5-ed58-4b26-91ea-fef144fb906e",
                  "parentUUID": "ff21b6fd-eeb3-4571-8592-4cab914a3e9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fdf2b6c5-ed58-4b26-91ea-fef144fb906e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35b3d823-f7c1-447f-8019-fe9bbcf6ebf8",
              "title": "toURL()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toURL() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Calendar URL Event'\n            }\n        ]\n    });\n    const url = cal.toURL();\n    console.log(url);\n    assert.strictEqual(typeof url, 'string');\n    assert.ok(url.length > 0, 'url is not empty');\n});",
                  "err": {},
                  "uuid": "e8f40690-f60a-4d7e-acdf-36405eab1761",
                  "parentUUID": "35b3d823-f7c1-447f-8019-fe9bbcf6ebf8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8f40690-f60a-4d7e-acdf-36405eab1761"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "187f0aaf-abb8-46a5-846b-60129c82d130",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "f558a40e-75d9-4737-8c64-484bfff5eec0",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "63940579-fbf5-4168-b162-e8ce906c3a4b",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "9f108471-dce8-439c-aef5-4be1285e0bc0",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "1767e005-b956-4c13-b40c-b6190b5d1002",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "1c047142-09b7-45fd-9433-ed28f59bd40d",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "98fc0bc8-086f-4160-8535-a62bffe487a4",
                  "parentUUID": "187f0aaf-abb8-46a5-846b-60129c82d130",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f558a40e-75d9-4737-8c64-484bfff5eec0",
                "63940579-fbf5-4168-b162-e8ce906c3a4b",
                "9f108471-dce8-439c-aef5-4be1285e0bc0",
                "1767e005-b956-4c13-b40c-b6190b5d1002",
                "1c047142-09b7-45fd-9433-ed28f59bd40d",
                "98fc0bc8-086f-4160-8535-a62bffe487a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a76b430-a46b-42f6-bf15-021e9eb8eba9",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new ICalCalendar();\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nassert.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "d1eadd62-b40a-4ecd-8747-fc6f6c5b9ac0",
                  "parentUUID": "7a76b430-a46b-42f6-bf15-021e9eb8eba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "f109ac83-bc1f-485f-ba35-8703311ab9b6",
                  "parentUUID": "7a76b430-a46b-42f6-bf15-021e9eb8eba9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCalendar();\nnew ICalCalendar(a.toJSON());",
                  "err": {},
                  "uuid": "b037ca3c-d1b9-4d46-81f9-d2eb05416959",
                  "parentUUID": "7a76b430-a46b-42f6-bf15-021e9eb8eba9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1eadd62-b40a-4ecd-8747-fc6f6c5b9ac0",
                "f109ac83-bc1f-485f-ba35-8703311ab9b6",
                "b037ca3c-d1b9-4d46-81f9-d2eb05416959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c4652e0-152e-49c4-9836-7feafb7b588f",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "534d6172-60ed-4bb7-a955-f9a138c005ad",
                  "parentUUID": "6c4652e0-152e-49c4-9836-7feafb7b588f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "534d6172-60ed-4bb7-a955-f9a138c005ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.url('https://sebbo.net/foo');\nassert.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "37a3020e-06d2-4fb2-9b9b-8d0620c58f5c",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.method(ICalCalendarMethod.REFRESH);\nassert.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "86d80e72-380a-418f-bbb1-7e9e37ff1b37",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.name('TEST');\nassert.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "5d5dcc1e-14b1-44d5-80f6-c69cdb38011b",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.description('TEST');\nassert.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "077928d8-bfe6-4447-968b-6f36ccd95c3e",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone('TEST');\nassert.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "b4a653b4-0a16-4cd7-8640-98c25eda2106",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "4241d3aa-bd7f-4386-b9d2-f6f8581a1eaa",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'Europe/Berlin', generator: getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "d9ee5179-3fef-488b-a4e8-4254b0b03f5b",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'FOO', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "10f1307f-902e-4cba-a511-923b91093212",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: '/Europe/Berlin', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "9d1f7166-ae4c-4674-bfc3-cbad8ae50d3e",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.ttl(moment.duration(3, 'days'));\nassert.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "1d09c1cb-10c2-417b-be03-1e3ba3e34ab0",
                  "parentUUID": "923fdd9d-5494-40ee-ab0e-4172ec32a80b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37a3020e-06d2-4fb2-9b9b-8d0620c58f5c",
                "86d80e72-380a-418f-bbb1-7e9e37ff1b37",
                "5d5dcc1e-14b1-44d5-80f6-c69cdb38011b",
                "077928d8-bfe6-4447-968b-6f36ccd95c3e",
                "b4a653b4-0a16-4cd7-8640-98c25eda2106",
                "4241d3aa-bd7f-4386-b9d2-f6f8581a1eaa",
                "d9ee5179-3fef-488b-a4e8-4254b0b03f5b",
                "10f1307f-902e-4cba-a511-923b91093212",
                "9d1f7166-ae4c-4674-bfc3-cbad8ae50d3e",
                "1d09c1cb-10c2-417b-be03-1e3ba3e34ab0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 11,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "25e6480b-6863-425c-8cb6-298c269d2782",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_01.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "40f86d8e-b01d-4ac6-a9d8-7db884543d33",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_02.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "d0f676c7-ff4e-4567-8de5-40d6a0b697d4",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({\n        method: ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_03.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "dde706be-a879-41d3-b909-0bdc507a1a1a",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert.strictEqual(cal.toString(), yield fs.readFile(resultDir + '/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert.strictEqual(ical(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "5c1da458-5fd3-4583-afad-a3386e77e95b",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_05.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "019d8f0a-1157-4a07-9931-13db1873d749",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN', method: ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Smith, Matt; (\"Sales\")',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_06.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "30793e72-3d88-4a1f-b531-78fe1a5c5475",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [ICalWeekday.MO, ICalWeekday.WE, ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_07.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "8d0d6114-7f61-4539-bdf9-bad5d39ae72b",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_08.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "769c907b-78d2-4e26-a97d-e1dbd320b23b",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ method: ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_09.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "49ddc835-3869-4e67-ac3f-e5c1e0f1ef0d",
              "parentUUID": "25e6480b-6863-425c-8cb6-298c269d2782",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "40f86d8e-b01d-4ac6-a9d8-7db884543d33",
            "d0f676c7-ff4e-4567-8de5-40d6a0b697d4",
            "dde706be-a879-41d3-b909-0bdc507a1a1a",
            "5c1da458-5fd3-4583-afad-a3386e77e95b",
            "019d8f0a-1157-4a07-9931-13db1873d749",
            "30793e72-3d88-4a1f-b531-78fe1a5c5475",
            "8d0d6114-7f61-4539-bdf9-bad5d39ae72b",
            "769c907b-78d2-4e26-a97d-e1dbd320b23b",
            "49ddc835-3869-4e67-ac3f-e5c1e0f1ef0d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "71768700-6423-4e44-bcfc-3f66742695bf",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61d298ee-40ac-4a6f-a2e1-568a914dd0ca",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCategory({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "0141b4ae-1883-4e5c-b7ad-1bf0d525ba68",
                  "parentUUID": "61d298ee-40ac-4a6f-a2e1-568a914dd0ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0141b4ae-1883-4e5c-b7ad-1bf0d525ba68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a48681a-7d9e-4bb8-8733-d70f4b6da73d",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.deepStrictEqual(c, c.name('FOO'));\nassert.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "29246a17-98b1-40a8-97c6-daffd6d77132",
                  "parentUUID": "7a48681a-7d9e-4bb8-8733-d70f4b6da73d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "d853fe40-2bfb-4c13-913e-9b323afdcdf6",
                  "parentUUID": "7a48681a-7d9e-4bb8-8733-d70f4b6da73d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'BANANA' });\nassert.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "93729fff-1c64-45ab-b01a-bedb1e9c97e5",
                  "parentUUID": "7a48681a-7d9e-4bb8-8733-d70f4b6da73d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29246a17-98b1-40a8-97c6-daffd6d77132",
                "d853fe40-2bfb-4c13-913e-9b323afdcdf6",
                "93729fff-1c64-45ab-b01a-bedb1e9c97e5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f6502cd1-94cc-4297-a801-a1c4ecf4c0c5",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'FOOBAR' });\nassert.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "ee2f6455-95ea-4c5a-86ee-e1be1e0473bf",
                  "parentUUID": "f6502cd1-94cc-4297-a801-a1c4ecf4c0c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee2f6455-95ea-4c5a-86ee-e1be1e0473bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ad69f29-d4e2-49af-8372-b18d693fbf34",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "c96b25d8-ffc1-4fbc-be72-26909ba1b044",
                  "parentUUID": "5ad69f29-d4e2-49af-8372-b18d693fbf34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c96b25d8-ffc1-4fbc-be72-26909ba1b044"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2882284c-b819-4c93-9183-17bdcf792432",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "63e5fc56-0c5a-49cc-b547-280839c2cb53",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new ICalEvent(data, new ICalCalendar());\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "693a62c8-3e1e-4f8d-a9c4-2072003422f8",
                  "parentUUID": "63e5fc56-0c5a-49cc-b547-280839c2cb53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalEvent({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "1f9ea47c-be7f-437e-979c-c79a97eacb11",
                  "parentUUID": "63e5fc56-0c5a-49cc-b547-280839c2cb53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "693a62c8-3e1e-4f8d-a9c4-2072003422f8",
                "1f9ea47c-be7f-437e-979c-c79a97eacb11"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06f08d86-4d84-4c0d-82ee-7ca270f1c2b8",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "80d34284-b441-471f-917c-e20d43bdc7aa",
                  "parentUUID": "06f08d86-4d84-4c0d-82ee-7ca270f1c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).id(512);\nassert.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "3aaf79a0-2cac-4fa9-8278-e6cda376d8d4",
                  "parentUUID": "06f08d86-4d84-4c0d-82ee-7ca270f1c2b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80d34284-b441-471f-917c-e20d43bdc7aa",
                "3aaf79a0-2cac-4fa9-8278-e6cda376d8d4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "99391651-3bf7-4bf7-88d0-b9966c0f740e",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "0829e4cc-bcdc-476a-b9ec-beb39c540234",
                  "parentUUID": "99391651-3bf7-4bf7-88d0-b9966c0f740e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).uid(512);\nassert.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "f02c3ce2-141f-4b17-aee6-00b7e0102331",
                  "parentUUID": "99391651-3bf7-4bf7-88d0-b9966c0f740e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0829e4cc-bcdc-476a-b9ec-beb39c540234",
                "f02c3ce2-141f-4b17-aee6-00b7e0102331"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a86ff519-ef1a-4ab0-bb66-746950c7dfde",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "1358d762-2bbb-4fc9-8bd3-3f194718f602",
                  "parentUUID": "a86ff519-ef1a-4ab0-bb66-746950c7dfde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(1048);\nassert.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "7bd64330-a08a-4b82-9b3b-c3aba3855b5b",
                  "parentUUID": "a86ff519-ef1a-4ab0-bb66-746950c7dfde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "f8d976c6-5d1c-4d07-948d-f9b2edba06f3",
                  "parentUUID": "a86ff519-ef1a-4ab0-bb66-746950c7dfde",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(12);\nassert.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "9eb913e5-21c5-458b-97e1-f977cb71a257",
                  "parentUUID": "a86ff519-ef1a-4ab0-bb66-746950c7dfde",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1358d762-2bbb-4fc9-8bd3-3f194718f602",
                "7bd64330-a08a-4b82-9b3b-c3aba3855b5b",
                "f8d976c6-5d1c-4d07-948d-f9b2edba06f3",
                "9eb913e5-21c5-458b-97e1-f977cb71a257"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.start(now);\nassert.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "f468a5af-370b-415f-8ee7-8499454d4836",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "860e73d1-b97b-42ae-885b-c70e7566b116",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "2ff6e184-2381-4430-811d-9455a4ca2398",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "570aca54-e498-458d-9b5f-79bc0a51e9bc",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .end(end)\n    .start(start);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "38fdbfce-476c-4349-8b88-8c1082e1b32e",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.start(moment()));\nassert.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "1db7192c-7c53-40f0-89a0-66cf3a94f157",
                  "parentUUID": "f90f947d-28f2-44bd-aa1f-ef1ad69e6cf3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f468a5af-370b-415f-8ee7-8499454d4836",
                "860e73d1-b97b-42ae-885b-c70e7566b116",
                "2ff6e184-2381-4430-811d-9455a4ca2398",
                "570aca54-e498-458d-9b5f-79bc0a51e9bc",
                "38fdbfce-476c-4349-8b88-8c1082e1b32e",
                "1db7192c-7c53-40f0-89a0-66cf3a94f157"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5824366b-2529-454e-b5e5-7486f823df69",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.end(now);\nassert.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "ae8f5beb-409b-49c5-b3c2-bc13a905b59c",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "7e588785-e72c-4045-bad9-a109cbb54b6c",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "6720535d-79dd-41d9-9e7e-cf28e9de7dc4",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "8be8f7d9-8d6b-49ae-aadc-f0ffa1a887df",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .start(start)\n    .end(end);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "a2d1152b-808d-40e2-97fb-f849b5d6da8c",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.end(moment()));\nassert.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "4ad6f15d-f319-4bd6-8116-1d87460e10e1",
                  "parentUUID": "5824366b-2529-454e-b5e5-7486f823df69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae8f5beb-409b-49c5-b3c2-bc13a905b59c",
                "7e588785-e72c-4045-bad9-a109cbb54b6c",
                "6720535d-79dd-41d9-9e7e-cf28e9de7dc4",
                "8be8f7d9-8d6b-49ae-aadc-f0ffa1a887df",
                "a2d1152b-808d-40e2-97fb-f849b5d6da8c",
                "4ad6f15d-f319-4bd6-8116-1d87460e10e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.recurrenceId(now);\nassert.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "55bb8e08-5586-4999-bcab-4ced47a0011c",
                  "parentUUID": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "72c401b1-91da-4a95-a5bf-0f8894253d0d",
                  "parentUUID": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "e38f077e-0ae9-4273-904f-ff6188e1780f",
                  "parentUUID": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "44b4506d-13bb-49db-9797-ae2b6409ef6e",
                  "parentUUID": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.recurrenceId(moment()));\nassert.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "fb3bb3ae-1fa9-4b06-b334-20904f9a822f",
                  "parentUUID": "b95e143c-38a9-4a13-a79e-053d1a54ab16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55bb8e08-5586-4999-bcab-4ced47a0011c",
                "72c401b1-91da-4a95-a5bf-0f8894253d0d",
                "e38f077e-0ae9-4273-904f-ff6188e1780f",
                "44b4506d-13bb-49db-9797-ae2b6409ef6e",
                "fb3bb3ae-1fa9-4b06-b334-20904f9a822f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).timezone('Europe/Berlin');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "2038778d-8c2a-434c-8621-a6a6a1da81ac",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, cal);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "e3d818a2-911e-4b97-a386-2e33e07c2714",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "f1e96e45-0d86-49d6-977e-c636998231d1",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "543bcf04-b8da-44a1-977f-eb755bd40b7a",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone('Europe/London');\nassert.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "b217017e-080e-4955-87d9-b15058f16438",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone(null);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "b802cad1-e5a7-41f6-9812-360c519a8778",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "2d5f93a3-c907-4e85-9d2c-22a4f4651120",
                  "parentUUID": "75577b3d-d13e-4a96-be9a-afe2fd4c0980",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2038778d-8c2a-434c-8621-a6a6a1da81ac",
                "e3d818a2-911e-4b97-a386-2e33e07c2714",
                "f1e96e45-0d86-49d6-977e-c636998231d1",
                "543bcf04-b8da-44a1-977f-eb755bd40b7a",
                "b217017e-080e-4955-87d9-b15058f16438",
                "b802cad1-e5a7-41f6-9812-360c519a8778",
                "2d5f93a3-c907-4e85-9d2c-22a4f4651120"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).stamp(now);\nassert.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "fbd1d5b5-65e0-4fa3-b6d2-8f8561d1fecd",
                  "parentUUID": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "170d86bc-0806-46ed-a90e-005d5af53b18",
                  "parentUUID": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "1e90fe38-523c-43f6-846f-e17422fb5acf",
                  "parentUUID": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "1b5c171e-dea8-44b1-8df1-7979cc03a6a5",
                  "parentUUID": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "7ee16abc-9169-46f8-bcb7-0cf3837ab6ca",
                  "parentUUID": "1a95853f-6069-4591-9e91-ecdfaa3890e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fbd1d5b5-65e0-4fa3-b6d2-8f8561d1fecd",
                "170d86bc-0806-46ed-a90e-005d5af53b18",
                "1e90fe38-523c-43f6-846f-e17422fb5acf",
                "1b5c171e-dea8-44b1-8df1-7979cc03a6a5",
                "7ee16abc-9169-46f8-bcb7-0cf3837ab6ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7897afb-2d7f-45da-9467-7687b38942e8",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).timestamp(now);\nassert.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "d7b12e70-49ac-4e4d-902d-07f5b3491b83",
                  "parentUUID": "b7897afb-2d7f-45da-9467-7687b38942e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "afd4485d-749b-4549-bf0b-3b40810b0816",
                  "parentUUID": "b7897afb-2d7f-45da-9467-7687b38942e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "1be13378-bf6f-4b6e-90e6-7a4a60db81d2",
                  "parentUUID": "b7897afb-2d7f-45da-9467-7687b38942e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "a9224986-2c23-422d-aa88-dbee4fb5e83a",
                  "parentUUID": "b7897afb-2d7f-45da-9467-7687b38942e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "de88932d-82f9-4a82-a12d-37a6f445b9dd",
                  "parentUUID": "b7897afb-2d7f-45da-9467-7687b38942e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7b12e70-49ac-4e4d-902d-07f5b3491b83",
                "afd4485d-749b-4549-bf0b-3b40810b0816",
                "1be13378-bf6f-4b6e-90e6-7a4a60db81d2",
                "a9224986-2c23-422d-aa88-dbee4fb5e83a",
                "de88932d-82f9-4a82-a12d-37a6f445b9dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "add5dab7-be59-48a1-a8f7-3fb44f6f13ea",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.allDay(true);\nassert.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "a5f9ba08-8077-46ee-bc96-84ab089f73e8",
                  "parentUUID": "add5dab7-be59-48a1-a8f7-3fb44f6f13ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "0447c03a-0504-465d-9979-a72367eb1135",
                  "parentUUID": "add5dab7-be59-48a1-a8f7-3fb44f6f13ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.allDay(true);\nassert.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "1fca5fc6-b2c0-43b3-8f40-91d1a6c9b8a3",
                  "parentUUID": "add5dab7-be59-48a1-a8f7-3fb44f6f13ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5f9ba08-8077-46ee-bc96-84ab089f73e8",
                "0447c03a-0504-465d-9979-a72367eb1135",
                "1fca5fc6-b2c0-43b3-8f40-91d1a6c9b8a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a198719-df78-4d78-a58c-ac38721f18b2",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).floating(true);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "2add0274-4791-4463-a5a3-7233c91c37a0",
                  "parentUUID": "1a198719-df78-4d78-a58c-ac38721f18b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.floating(false));\nassert.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "0cced799-749e-49e6-9af1-dd74821447e9",
                  "parentUUID": "1a198719-df78-4d78-a58c-ac38721f18b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.floating(true);\nassert.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "6be731fe-3a02-4c02-a214-1f69c9b3530a",
                  "parentUUID": "1a198719-df78-4d78-a58c-ac38721f18b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(true);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "317c6a3f-900f-462e-aa21-76e053cb7be6",
                  "parentUUID": "1a198719-df78-4d78-a58c-ac38721f18b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(false);\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "a9fdb626-1bbb-4936-92cf-24c450e7ba9f",
                  "parentUUID": "1a198719-df78-4d78-a58c-ac38721f18b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2add0274-4791-4463-a5a3-7233c91c37a0",
                "0cced799-749e-49e6-9af1-dd74821447e9",
                "6be731fe-3a02-4c02-a214-1f69c9b3530a",
                "317c6a3f-900f-462e-aa21-76e053cb7be6",
                "a9fdb626-1bbb-4936-92cf-24c450e7ba9f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment(),\n    exclude: [moment()]\n};\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "510b0ed4-7ebf-481b-8e56-f03813de4132",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null));\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "505aa5b9-d844-4a15-b166-b952d4fd992e",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert.deepStrictEqual(e, e.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "ef7f1d2d-a734-4205-b1a5-cc503d0894fc",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new ICalCalendar());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "3c7c60a0-b7e5-4d12-9507-ef4247cb9c69",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new ICalCalendar());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "3667c540-17e3-4d2c-b09d-a89b0d9bd751",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "5a7377bf-15fa-451d-9f78-cb247971ec69",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.count` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "f33e0512-4b3b-4624-aa29-0e9f28147d54",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "cc4c9d1f-6af7-4f8f-a056-f2c73898a22f",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "3e0d7b75-6807-44de-b302-2f8c5b118e2f",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "9ad99f7b-fd00-45a1-bdc5-52b0d681dda5",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new ICalCalendar());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "b372c51c-e43c-484f-89c9-a2392b081441",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "d1998002-797c-40a6-9641-c7a849f98a53",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "2a40208f-b219-4a36-8c3e-2804b8e6f7f3",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "f50bb8e6-71ad-4a46-930c-b7ba6b2501af",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert.throws(function () {\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "b0755e82-285f-418c-b7e5-539e3599a97b",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "0f75e7d7-aa30-4cc4-a1d9-61a75dd032bf",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU, ICalWeekday.WE, ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "2c7f2654-dfef-431a-a831-1ddc1271dfbd",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "a233ce2e-1d99-4f77-a2ca-d692b8d8a9d4",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "8739a85f-e43e-4a2e-8e7f-5a0bc8a63ffd",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, -15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [-1, -32, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `-32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 0, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `0`/);",
                  "err": {},
                  "uuid": "8862a823-f984-45b5-a8dc-4050eb432d13",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "eb87f3ed-4d85-41ff-a95f-14e7d9f89a8f",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [-367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `-367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [0]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `0`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: ['FOO']\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "a4b879c5-d653-47f1-8578-d7e336f681c3",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "99229221-a110-4d60-9f3c-eb609c772031",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU],\n    bySetPos: [2]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert.strictEqual((_b = result.bySetPos) === null || _b === void 0 ? void 0 : _b.length, 1);",
                  "err": {},
                  "uuid": "5f68fac4-64d4-4913-98d8-5c8c38289d17",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "26532877-5e85-4df8-8d0c-91894701a04a",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: [moment(), new Date('BAR'), 'FOO']\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "7e4c02a6-81ae-4e23-9fc9-d3d063ea794c",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new ICalCalendar());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "f2f376a3-601c-40ff-a975-ba0776afff62",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.ok(Array.isArray(result.exclude));\nassert.strictEqual(result.exclude.length, 3);\nassert.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "b3bfc281-8f7d-4215-9913-00c16e2b766c",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "315fbece-4e82-4b43-b52d-a7ec844ff691",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: ICalWeekday.SU\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "17cce918-5815-4109-b822-9235b7798ded",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new ICalEvent({ start }, new ICalCalendar());\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert.ok(isRRule(result));\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "899cb89b-0e21-4906-a769-56aef9a7b427",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "aa26c423-bfda-4f95-aa8a-490e5b491b0e",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "978800cb-90d4-4970-948d-41576c3f2f45",
                  "parentUUID": "2c171e84-6e4f-4b3d-b645-31fa605eff6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "510b0ed4-7ebf-481b-8e56-f03813de4132",
                "505aa5b9-d844-4a15-b166-b952d4fd992e",
                "ef7f1d2d-a734-4205-b1a5-cc503d0894fc",
                "3c7c60a0-b7e5-4d12-9507-ef4247cb9c69",
                "3667c540-17e3-4d2c-b09d-a89b0d9bd751",
                "5a7377bf-15fa-451d-9f78-cb247971ec69",
                "f33e0512-4b3b-4624-aa29-0e9f28147d54",
                "cc4c9d1f-6af7-4f8f-a056-f2c73898a22f",
                "3e0d7b75-6807-44de-b302-2f8c5b118e2f",
                "9ad99f7b-fd00-45a1-bdc5-52b0d681dda5",
                "b372c51c-e43c-484f-89c9-a2392b081441",
                "d1998002-797c-40a6-9641-c7a849f98a53",
                "2a40208f-b219-4a36-8c3e-2804b8e6f7f3",
                "f50bb8e6-71ad-4a46-930c-b7ba6b2501af",
                "b0755e82-285f-418c-b7e5-539e3599a97b",
                "0f75e7d7-aa30-4cc4-a1d9-61a75dd032bf",
                "2c7f2654-dfef-431a-a831-1ddc1271dfbd",
                "a233ce2e-1d99-4f77-a2ca-d692b8d8a9d4",
                "8739a85f-e43e-4a2e-8e7f-5a0bc8a63ffd",
                "8862a823-f984-45b5-a8dc-4050eb432d13",
                "eb87f3ed-4d85-41ff-a95f-14e7d9f89a8f",
                "a4b879c5-d653-47f1-8578-d7e336f681c3",
                "99229221-a110-4d60-9f3c-eb609c772031",
                "5f68fac4-64d4-4913-98d8-5c8c38289d17",
                "26532877-5e85-4df8-8d0c-91894701a04a",
                "7e4c02a6-81ae-4e23-9fc9-d3d063ea794c",
                "f2f376a3-601c-40ff-a975-ba0776afff62",
                "b3bfc281-8f7d-4215-9913-00c16e2b766c",
                "315fbece-4e82-4b43-b52d-a7ec844ff691",
                "17cce918-5815-4109-b822-9235b7798ded",
                "899cb89b-0e21-4906-a769-56aef9a7b427",
                "aa26c423-bfda-4f95-aa8a-490e5b491b0e",
                "978800cb-90d4-4970-948d-41576c3f2f45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 16,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d068b49-21ea-44b0-a693-35ed95d8fdd2",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "e2331083-d5d0-4dbf-aa84-5f6985c7d49e",
                  "parentUUID": "4d068b49-21ea-44b0-a693-35ed95d8fdd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.summary(''));\nassert.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "48872353-d79a-4550-aa8c-8cfdd8e65ed6",
                  "parentUUID": "4d068b49-21ea-44b0-a693-35ed95d8fdd2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.summary('Example Event II');\nassert.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "7e43b021-5cde-4b6f-b20a-d859d761745a",
                  "parentUUID": "4d068b49-21ea-44b0-a693-35ed95d8fdd2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2331083-d5d0-4dbf-aa84-5f6985c7d49e",
                "48872353-d79a-4550-aa8c-8cfdd8e65ed6",
                "7e43b021-5cde-4b6f-b20a-d859d761745a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location('Test Location');\nassert.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "684d14e6-4bfa-4f79-9111-8334bac8157a",
                  "parentUUID": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "d7f97bdd-35fa-4948-b056-25cd134a2c21",
                  "parentUUID": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.location(null));\nassert.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "5beacf24-813a-4ba8-b568-f8236fe71eaf",
                  "parentUUID": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.location('Europa-Park');\nassert.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "b22cf09a-4e21-417d-a210-63102c858d87",
                  "parentUUID": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\n// @ts-ignore\nassert.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "317ca998-5b81-46b6-ae8e-ea54ed38e2d8",
                  "parentUUID": "607cbee7-b82e-4490-934b-ba0c84a3a9af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "684d14e6-4bfa-4f79-9111-8334bac8157a",
                "d7f97bdd-35fa-4948-b056-25cd134a2c21",
                "5beacf24-813a-4ba8-b568-f8236fe71eaf",
                "b22cf09a-4e21-417d-a210-63102c858d87",
                "317ca998-5b81-46b6-ae8e-ea54ed38e2d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e08af0c-f1e3-4d43-ad19-27178ab88b66",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "61515f7d-52ae-4f73-91ab-fcdd4d8840c9",
                  "parentUUID": "5e08af0c-f1e3-4d43-ad19-27178ab88b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.description(null));\nassert.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "d99172a1-f381-43c1-a41b-35fddec8d582",
                  "parentUUID": "5e08af0c-f1e3-4d43-ad19-27178ab88b66",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.description('Well. But other people need descriptions… :/');\nassert.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "cd14eabc-ed5d-47f7-99ce-220841080032",
                  "parentUUID": "5e08af0c-f1e3-4d43-ad19-27178ab88b66",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61515f7d-52ae-4f73-91ab-fcdd4d8840c9",
                "d99172a1-f381-43c1-a41b-35fddec8d582",
                "cd14eabc-ed5d-47f7-99ce-220841080032"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "82486776-f963-4bf6-be70-dd6b98ed4e84",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "1d295591-1c69-4d48-ba3f-b30859b9e5d0",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.organizer(null));\nassert.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "2288baba-6e90-4a6a-935b-5ebfd6f9305f",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "57bd1710-beaa-4614-be53-179e6b1201e1",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "ddf49943-a0bd-4b80-b4a9-33b119e5729b",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "d32ba761-e86f-4732-bedf-71bac8fba4e2",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "93c1ed3c-c8e6-4c3d-adf0-2bdc964a9fb6",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "4325b37b-536e-4c82-bd1c-7c63cef5be18",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "a45da0eb-2a9b-444c-bb88-42e86ac08378",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "3a485ab5-a71d-488c-8add-ea881371e96e",
                  "parentUUID": "82486776-f963-4bf6-be70-dd6b98ed4e84",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1d295591-1c69-4d48-ba3f-b30859b9e5d0",
                "2288baba-6e90-4a6a-935b-5ebfd6f9305f",
                "57bd1710-beaa-4614-be53-179e6b1201e1",
                "ddf49943-a0bd-4b80-b4a9-33b119e5729b",
                "d32ba761-e86f-4732-bedf-71bac8fba4e2",
                "93c1ed3c-c8e6-4c3d-adf0-2bdc964a9fb6",
                "4325b37b-536e-4c82-bd1c-7c63cef5be18",
                "a45da0eb-2a9b-444c-bb88-42e86ac08378",
                "3a485ab5-a71d-488c-8add-ea881371e96e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d9248de-c629-4e86-905c-62dddf17a595",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({}, event);\nassert.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "54a8df17-ecb1-445e-a318-b60c4b1aa52b",
                  "parentUUID": "1d9248de-c629-4e86-905c-62dddf17a595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAttendee({}) instanceof ICalAttendee);\nassert.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "0151f296-602d-46eb-98e3-87104b778fc3",
                  "parentUUID": "1d9248de-c629-4e86-905c-62dddf17a595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "35bae84f-10a1-403f-a078-18221929df44",
                  "parentUUID": "1d9248de-c629-4e86-905c-62dddf17a595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "7cbe1339-2133-430f-aad5-019c79e1466d",
                  "parentUUID": "1d9248de-c629-4e86-905c-62dddf17a595",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "e16da739-cc5d-4142-9f76-ec6589f554f0",
                  "parentUUID": "1d9248de-c629-4e86-905c-62dddf17a595",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54a8df17-ecb1-445e-a318-b60c4b1aa52b",
                "0151f296-602d-46eb-98e3-87104b778fc3",
                "35bae84f-10a1-403f-a078-18221929df44",
                "7cbe1339-2133-430f-aad5-019c79e1466d",
                "e16da739-cc5d-4142-9f76-ec6589f554f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0218d339-1859-4245-8bf6-57bb3e9dd069",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert.strictEqual(event.attendees().length, 1);\nassert.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "350345ae-c739-481e-90fc-f2142cfc31fb",
                  "parentUUID": "0218d339-1859-4245-8bf6-57bb3e9dd069",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert.strictEqual(event.attendees().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "930e02f1-9031-43c9-86b9-be3410006c24",
                  "parentUUID": "0218d339-1859-4245-8bf6-57bb3e9dd069",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "350345ae-c739-481e-90fc-f2142cfc31fb",
                "930e02f1-9031-43c9-86b9-be3410006c24"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f0b9e78-ae11-4139-a3a8-6bc490c3ea8f",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAlarm() instanceof ICalAlarm);",
                  "err": {},
                  "uuid": "a101eca0-721c-4abd-bd88-92e5f38c079b",
                  "parentUUID": "5f0b9e78-ae11-4139-a3a8-6bc490c3ea8f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst alarm = event.createAlarm({ type: ICalAlarmType.audio });\nassert.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "86cbf526-7726-4306-9244-ed0162706dec",
                  "parentUUID": "5f0b9e78-ae11-4139-a3a8-6bc490c3ea8f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a101eca0-721c-4abd-bd88-92e5f38c079b",
                "86cbf526-7726-4306-9244-ed0162706dec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4fe375a3-88e9-465b-9708-9184e1c7a2e0",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert.strictEqual(event.alarms().length, 1);\nassert.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "34c79c3c-10f4-4684-9f4d-fae5fd18299e",
                  "parentUUID": "4fe375a3-88e9-465b-9708-9184e1c7a2e0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.alarms([\n    { type: ICalAlarmType.audio },\n    { type: ICalAlarmType.display }\n]);\nassert.strictEqual(event.alarms().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "535dffe3-d684-4ed5-8df5-4a3aeaf7e29c",
                  "parentUUID": "4fe375a3-88e9-465b-9708-9184e1c7a2e0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "34c79c3c-10f4-4684-9f4d-fae5fd18299e",
                "535dffe3-d684-4ed5-8df5-4a3aeaf7e29c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5e7a058f-8056-424c-ad75-7839f335361d",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createCategory() instanceof ICalCategory);",
                  "err": {},
                  "uuid": "03fd0e28-36a7-4f0f-91cf-8f88e75e467a",
                  "parentUUID": "5e7a058f-8056-424c-ad75-7839f335361d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst category = event.createCategory({ name: 'foo' });\nassert.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "97d22a10-ad9e-4c1b-8512-d7469bab8582",
                  "parentUUID": "5e7a058f-8056-424c-ad75-7839f335361d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03fd0e28-36a7-4f0f-91cf-8f88e75e467a",
                "97d22a10-ad9e-4c1b-8512-d7469bab8582"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e68ac922-1595-47f7-9cae-b1c11d653d02",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert.strictEqual(event.categories().length, 1);\nassert.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "96431939-b5fe-4aa8-b107-29739582e90e",
                  "parentUUID": "e68ac922-1595-47f7-9cae-b1c11d653d02",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert.strictEqual(event.categories().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "33be2c3d-79f3-4f55-9e6f-1f8b38e215e7",
                  "parentUUID": "e68ac922-1595-47f7-9cae-b1c11d653d02",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96431939-b5fe-4aa8-b107-29739582e90e",
                "33be2c3d-79f3-4f55-9e6f-1f8b38e215e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b438248d-6f9c-4e50-b922-d34ea680e885",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.status(), null);\nevent.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "8ca711fc-a8b9-4b57-a60c-c67d9789854e",
                  "parentUUID": "b438248d-6f9c-4e50-b922-d34ea680e885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.status(null));\nassert.deepStrictEqual(e, e.status(ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "427b4650-e5fb-4768-aee0-5acb6140a99d",
                  "parentUUID": "b438248d-6f9c-4e50-b922-d34ea680e885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\ne.status(null);\nassert.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "cb274ab8-15c3-4521-9c86-82708b6356e6",
                  "parentUUID": "b438248d-6f9c-4e50-b922-d34ea680e885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(e.status(), 'CONFIRMED');\nassert.strictEqual(e.status(), ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "cd223fdd-23f8-41a3-998b-888485b2fa31",
                  "parentUUID": "b438248d-6f9c-4e50-b922-d34ea680e885",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "f2043d78-4429-449b-a4fa-dfd3e7e19f95",
                  "parentUUID": "b438248d-6f9c-4e50-b922-d34ea680e885",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8ca711fc-a8b9-4b57-a60c-c67d9789854e",
                "427b4650-e5fb-4768-aee0-5acb6140a99d",
                "cb274ab8-15c3-4521-9c86-82708b6356e6",
                "cd223fdd-23f8-41a3-998b-888485b2fa31",
                "f2043d78-4429-449b-a4fa-dfd3e7e19f95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.busystatus(), null);\nevent.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "4e019aa5-4cf8-4808-93cf-328ce6390c6f",
                  "parentUUID": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.busystatus(null));\nassert.deepStrictEqual(e, e.busystatus(ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "383e4846-6c13-4a92-a20d-c4b6c0269079",
                  "parentUUID": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "ffe06521-b974-4b83-9c00-293487766000",
                  "parentUUID": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "96a84942-50e5-487c-b77c-09d2d26187a3",
                  "parentUUID": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "7cca608f-03a1-4515-ab8d-5cf2cdd1ac95",
                  "parentUUID": "bc88f8f7-73c0-461a-88eb-a0b57521a0a7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4e019aa5-4cf8-4808-93cf-328ce6390c6f",
                "383e4846-6c13-4a92-a20d-c4b6c0269079",
                "ffe06521-b974-4b83-9c00-293487766000",
                "96a84942-50e5-487c-b77c-09d2d26187a3",
                "7cca608f-03a1-4515-ab8d-5cf2cdd1ac95"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5f410ae9-8b62-4e11-8262-55cb5df19919",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.priority(), null);\ne.priority(5);\nassert.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "9ca45c87-c4b0-440f-8b18-74b408e6bd85",
                  "parentUUID": "5f410ae9-8b62-4e11-8262-55cb5df19919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.priority(null));\nassert.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "8eef3fa7-a59b-4edc-bb72-c857e7ef684b",
                  "parentUUID": "5f410ae9-8b62-4e11-8262-55cb5df19919",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.priority(5);\nassert.strictEqual(event.priority(), 5);\nassert.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "7d99eec3-de3d-4f16-966f-7d8ed8200223",
                  "parentUUID": "5f410ae9-8b62-4e11-8262-55cb5df19919",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ca45c87-c4b0-440f-8b18-74b408e6bd85",
                "8eef3fa7-a59b-4edc-bb72-c857e7ef684b",
                "7d99eec3-de3d-4f16-966f-7d8ed8200223"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "45874c99-bc48-4128-ac14-df1b74c01853",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "1de5b8dd-a5c0-437f-91b3-71f321acc0f9",
                  "parentUUID": "45874c99-bc48-4128-ac14-df1b74c01853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.url(null));\nassert.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "c3b92462-c293-4c21-8e4c-f3e6c1ce0d75",
                  "parentUUID": "45874c99-bc48-4128-ac14-df1b74c01853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "676d37be-3fcc-4f9b-97d1-18a49cf72fe0",
                  "parentUUID": "45874c99-bc48-4128-ac14-df1b74c01853",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1de5b8dd-a5c0-437f-91b3-71f321acc0f9",
                "c3b92462-c293-4c21-8e4c-f3e6c1ce0d75",
                "676d37be-3fcc-4f9b-97d1-18a49cf72fe0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b85fe25a-cb1f-4907-a5bd-1aa8023d2669",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "14ecf744-b54e-405e-a668-ee838b6de896",
                  "parentUUID": "b85fe25a-cb1f-4907-a5bd-1aa8023d2669",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14ecf744-b54e-405e-a668-ee838b6de896"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "af5cd742-443e-482c-bdd5-9a6d72441c41",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert.strictEqual(event.attachments().length, 1);\nassert.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "8505295a-3995-437e-9de5-4384fd950e66",
                  "parentUUID": "af5cd742-443e-482c-bdd5-9a6d72441c41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert.strictEqual(event.attachments().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "cce770b5-5c66-43d7-9a99-a8f7e1b927ae",
                  "parentUUID": "af5cd742-443e-482c-bdd5-9a6d72441c41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8505295a-3995-437e-9de5-4384fd950e66",
                "cce770b5-5c66-43d7-9a99-a8f7e1b927ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d651a5f2-0764-4c38-be95-368724fbacdd",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "c9573dce-13a0-492e-aaf6-277ad5530989",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment());\nassert.ok(moment.isMoment(e.created()));",
                  "err": {},
                  "uuid": "2f19e1b0-c9d6-463f-9b1d-7ee39f220812",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "c2f0c1d3-a1c7-424f-bdeb-c5223e37a374",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment().toJSON());\nassert.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "b569db20-2294-4b4b-9247-49a2e92852a3",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "b50ce154-6c16-40c3-b278-372519b262c0",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).created(now);\nassert.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "2bc85e03-d375-43ae-941d-09232a89873d",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "aff72e48-fac5-4026-89da-b06b7505e22d",
                  "parentUUID": "d651a5f2-0764-4c38-be95-368724fbacdd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c9573dce-13a0-492e-aaf6-277ad5530989",
                "2f19e1b0-c9d6-463f-9b1d-7ee39f220812",
                "c2f0c1d3-a1c7-424f-bdeb-c5223e37a374",
                "b569db20-2294-4b4b-9247-49a2e92852a3",
                "b50ce154-6c16-40c3-b278-372519b262c0",
                "2bc85e03-d375-43ae-941d-09232a89873d",
                "aff72e48-fac5-4026-89da-b06b7505e22d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5881ac61-15a2-406c-be59-302409065435",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "229b0d4d-1bd5-45af-97ba-4e67affb4fa9",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(moment());\nassert.ok(moment.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "f4c051f2-9698-4b54-bf13-0442060c6487",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "9801e167-12be-4aff-a9ce-69e41ad080e1",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().toJSON();\ne.lastModified(date);\nassert.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "5d12a700-0e86-4ce2-85b9-2d0e74c9fa47",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "f3f31566-36a9-48e8-a1d8-d77191079db5",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).lastModified(now);\nassert.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "595bb63a-9f12-405f-8139-75c614a79d6f",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "be301de5-3bf2-413e-ab00-a2d97446b624",
                  "parentUUID": "5881ac61-15a2-406c-be59-302409065435",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "229b0d4d-1bd5-45af-97ba-4e67affb4fa9",
                "f4c051f2-9698-4b54-bf13-0442060c6487",
                "9801e167-12be-4aff-a9ce-69e41ad080e1",
                "5d12a700-0e86-4ce2-85b9-2d0e74c9fa47",
                "f3f31566-36a9-48e8-a1d8-d77191079db5",
                "595bb63a-9f12-405f-8139-75c614a79d6f",
                "be301de5-3bf2-413e-ab00-a2d97446b624"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3b386cb-d10b-405e-bed3-f377fe795166",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.class(), null);\nevent.class(ICalEventClass.PRIVATE);\nassert.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "6c65b5ff-095c-42cb-8aba-a9795f551afd",
                  "parentUUID": "a3b386cb-d10b-405e-bed3-f377fe795166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.class(null));\nassert.deepStrictEqual(e, e.class(ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "183fa6a2-2337-4547-998e-09f7a241e821",
                  "parentUUID": "a3b386cb-d10b-405e-bed3-f377fe795166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\ne.class(null);\nassert.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "7d20b0b9-457a-429e-a9db-cd06fc963841",
                  "parentUUID": "a3b386cb-d10b-405e-bed3-f377fe795166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\nassert.strictEqual(e.class(), 'PRIVATE');\nassert.strictEqual(e.class(), ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "cffa1069-8adb-488e-93ec-ceb3e411f728",
                  "parentUUID": "a3b386cb-d10b-405e-bed3-f377fe795166",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "3debf4ac-f571-4947-957f-735414d6674c",
                  "parentUUID": "a3b386cb-d10b-405e-bed3-f377fe795166",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c65b5ff-095c-42cb-8aba-a9795f551afd",
                "183fa6a2-2337-4547-998e-09f7a241e821",
                "7d20b0b9-457a-429e-a9db-cd06fc963841",
                "cffa1069-8adb-488e-93ec-ceb3e411f728",
                "3debf4ac-f571-4947-957f-735414d6674c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4d846331-2cf8-401f-82e5-0b6941f80355",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "7fbd0570-765c-41e5-8f6c-08ddb50edc7b",
                  "parentUUID": "4d846331-2cf8-401f-82e5-0b6941f80355",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7fbd0570-765c-41e5-8f6c-08ddb50edc7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "18e875d0-7803-481f-ba5a-e1c3e1ef5a05",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment().add(1, 'month');\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date);\nassert.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "f6d31c2d-ba38-4daf-8fd7-8ed8e719fa4e",
                  "parentUUID": "18e875d0-7803-481f-ba5a-e1c3e1ef5a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert.ok(typeof json.repeating === 'string');\nconst event2 = new ICalEvent(event.toJSON(), new ICalCalendar());\nconst after = event2.toString();\nassert.strictEqual(after, before);",
                  "err": {},
                  "uuid": "f068f0a8-69d0-40f0-882c-6e18f478e0c1",
                  "parentUUID": "18e875d0-7803-481f-ba5a-e1c3e1ef5a05",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalEvent({}, new ICalCalendar());\nnew ICalEvent(a.toJSON(), new ICalCalendar());",
                  "err": {},
                  "uuid": "af2b1824-4dba-4343-8677-be48d42606e4",
                  "parentUUID": "18e875d0-7803-481f-ba5a-e1c3e1ef5a05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f6d31c2d-ba38-4daf-8fd7-8ed8e719fa4e",
                "f068f0a8-69d0-40f0-882c-6e18f478e0c1",
                "af2b1824-4dba-4343-8677-be48d42606e4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f678940-8be2-4079-aab9-843479d469ca",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.transparency(), null);\nevent.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "e8f397bc-fea0-409f-bfad-876c04bfed00",
                  "parentUUID": "6f678940-8be2-4079-aab9-843479d469ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.transparency(null));\nassert.deepStrictEqual(e, e.transparency(ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "38757d5e-ede5-4509-8228-3c2a5e7561f0",
                  "parentUUID": "6f678940-8be2-4079-aab9-843479d469ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "833a4307-6d4e-4f6b-827c-e5ddea8480ed",
                  "parentUUID": "6f678940-8be2-4079-aab9-843479d469ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "6a3159a5-6d94-4104-8f7c-403d5c996245",
                  "parentUUID": "6f678940-8be2-4079-aab9-843479d469ca",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "363437fe-275c-4ffb-b50b-60be8e9a5336",
                  "parentUUID": "6f678940-8be2-4079-aab9-843479d469ca",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e8f397bc-fea0-409f-bfad-876c04bfed00",
                "38757d5e-ede5-4509-8228-3c2a5e7561f0",
                "833a4307-6d4e-4f6b-827c-e5ddea8480ed",
                "6a3159a5-6d94-4104-8f7c-403d5c996245",
                "363437fe-275c-4ffb-b50b-60be8e9a5336"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7155ce85-72d5-465c-97d9-289839ca4ee0",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "9b557ef7-d02d-489f-a72e-1030b1b1440b",
                  "parentUUID": "7155ce85-72d5-465c-97d9-289839ca4ee0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new ICalCalendar());\nassert.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "0fa6639d-a3de-4be3-9529-e7205aa3f337",
                  "parentUUID": "7155ce85-72d5-465c-97d9-289839ca4ee0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = new ICalEvent({\n    id: 42,\n    start: moment(),\n    summary: ':)'\n}, cal);\nassert.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "05d661a0-ecda-4583-a7d0-545b4e2e8c76",
                  "parentUUID": "7155ce85-72d5-465c-97d9-289839ca4ee0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nlet event = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: ICalWeekday.SU\n    }\n}, cal);\nassert.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "9ff34010-9052-4344-9563-0df3d786496a",
                  "parentUUID": "7155ce85-72d5-465c-97d9-289839ca4ee0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b557ef7-d02d-489f-a72e-1030b1b1440b",
                "0fa6639d-a3de-4be3-9529-e7205aa3f337",
                "05d661a0-ecda-4583-a7d0-545b4e2e8c76",
                "9ff34010-9052-4344-9563-0df3d786496a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e82e127a-f656-477d-aedb-76c8cfa1d30f",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad53e1df-2673-423a-8916-e2e1e7298779",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical, 'function');",
                  "err": {},
                  "uuid": "1601d6bd-02ab-4d59-990a-a6fb055f4109",
                  "parentUUID": "ad53e1df-2673-423a-8916-e2e1e7298779",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical() instanceof ICalCalendar);",
                  "err": {},
                  "uuid": "233c30f2-976b-45a2-a01c-2038b80e5ad8",
                  "parentUUID": "ad53e1df-2673-423a-8916-e2e1e7298779",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1601d6bd-02ab-4d59-990a-a6fb055f4109",
                "233c30f2-976b-45a2-a01c-2038b80e5ad8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3345804a-9b7b-4091-bb34-088b7778b11c",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm);",
                  "err": {},
                  "uuid": "f2eed5a9-86a1-48df-8755-e3df67b81114",
                  "parentUUID": "3345804a-9b7b-4091-bb34-088b7778b11c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType);",
                  "err": {},
                  "uuid": "a3248a3b-8fac-48cb-a285-a6fae67dfb3a",
                  "parentUUID": "3345804a-9b7b-4091-bb34-088b7778b11c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2eed5a9-86a1-48df-8755-e3df67b81114",
                "a3248a3b-8fac-48cb-a285-a6fae67dfb3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fff59d09-2305-4585-b1f9-79963f43595a",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee);",
                  "err": {},
                  "uuid": "456fe982-b304-49a4-9aae-ed53b0e5e8b9",
                  "parentUUID": "fff59d09-2305-4585-b1f9-79963f43595a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType);",
                  "err": {},
                  "uuid": "d1d867cb-613b-475d-84fc-f64e88c10cf6",
                  "parentUUID": "fff59d09-2305-4585-b1f9-79963f43595a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole);",
                  "err": {},
                  "uuid": "5c5b1ef9-1a4f-4d10-ad9e-18bbfdd03e49",
                  "parentUUID": "fff59d09-2305-4585-b1f9-79963f43595a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "571c74ff-b877-40ed-bd7c-717cb28dbc3d",
                  "parentUUID": "fff59d09-2305-4585-b1f9-79963f43595a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "456fe982-b304-49a4-9aae-ed53b0e5e8b9",
                "d1d867cb-613b-475d-84fc-f64e88c10cf6",
                "5c5b1ef9-1a4f-4d10-ad9e-18bbfdd03e49",
                "571c74ff-b877-40ed-bd7c-717cb28dbc3d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8520025e-c509-463d-b4a8-6700ec8d1b63",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar);",
                  "err": {},
                  "uuid": "e832bf58-6c84-4804-a770-88cbb188e6e3",
                  "parentUUID": "8520025e-c509-463d-b4a8-6700ec8d1b63",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod);",
                  "err": {},
                  "uuid": "2b000293-d5bb-4ec3-819c-bdf30e6820db",
                  "parentUUID": "8520025e-c509-463d-b4a8-6700ec8d1b63",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e832bf58-6c84-4804-a770-88cbb188e6e3",
                "2b000293-d5bb-4ec3-819c-bdf30e6820db"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3d01dc5-acac-455d-a2fe-caee61b78425",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory);",
                  "err": {},
                  "uuid": "ac4ca973-dc88-4c6f-ada8-c2ba28f0d325",
                  "parentUUID": "c3d01dc5-acac-455d-a2fe-caee61b78425",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac4ca973-dc88-4c6f-ada8-c2ba28f0d325"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea25accd-98bf-483e-bdcc-8d75f330df78",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent);",
                  "err": {},
                  "uuid": "660f39e4-b7fe-48be-97ef-c9cc04cdde2a",
                  "parentUUID": "ea25accd-98bf-483e-bdcc-8d75f330df78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus);",
                  "err": {},
                  "uuid": "0f0d8254-bbc7-46e4-9bd9-83e09a917bd4",
                  "parentUUID": "ea25accd-98bf-483e-bdcc-8d75f330df78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "da053f93-77a6-4759-bd46-20b14b38b646",
                  "parentUUID": "ea25accd-98bf-483e-bdcc-8d75f330df78",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency);",
                  "err": {},
                  "uuid": "f8e39dac-49c3-4e03-8839-219169b19a72",
                  "parentUUID": "ea25accd-98bf-483e-bdcc-8d75f330df78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "660f39e4-b7fe-48be-97ef-c9cc04cdde2a",
                "0f0d8254-bbc7-46e4-9bd9-83e09a917bd4",
                "da053f93-77a6-4759-bd46-20b14b38b646",
                "f8e39dac-49c3-4e03-8839-219169b19a72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4b39dd6-ed48-4ffc-bbf5-3c1e383c9e76",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "0011131d-f504-401c-9bc0-5755a5584e5d",
                  "parentUUID": "c4b39dd6-ed48-4ffc-bbf5-3c1e383c9e76",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday);",
                  "err": {},
                  "uuid": "dce08b4d-30aa-4477-bed2-ec446ae44278",
                  "parentUUID": "c4b39dd6-ed48-4ffc-bbf5-3c1e383c9e76",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0011131d-f504-401c-9bc0-5755a5584e5d",
                "dce08b4d-30aa-4477-bed2-ec446ae44278"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "24430e12-e039-4ae4-9974-c94c75bfaac6",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate === 'function');",
                  "err": {},
                  "uuid": "e2c924b1-dea7-4b6e-a435-7dbd53fad13c",
                  "parentUUID": "24430e12-e039-4ae4-9974-c94c75bfaac6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "7f1d9e1b-7e9e-4d4f-a180-c0f4185c1a1e",
                  "parentUUID": "24430e12-e039-4ae4-9974-c94c75bfaac6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape === 'function');",
                  "err": {},
                  "uuid": "3e49bd65-a5f8-4a57-a0af-adfb4e507827",
                  "parentUUID": "24430e12-e039-4ae4-9974-c94c75bfaac6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines === 'function');",
                  "err": {},
                  "uuid": "d68b5b8e-f58a-483a-8473-7d27328045c0",
                  "parentUUID": "24430e12-e039-4ae4-9974-c94c75bfaac6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2c924b1-dea7-4b6e-a435-7dbd53fad13c",
                "7f1d9e1b-7e9e-4d4f-a180-c0f4185c1a1e",
                "3e49bd65-a5f8-4a57-a0af-adfb4e507827",
                "d68b5b8e-f58a-483a-8473-7d27328045c0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae232c41-4690-40d2-b714-128b78af4d54",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "aa4a92df-9289-4507-bc66-b0d0f9c7a448",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "8989bdfb-8cc2-4bc0-9e6d-67203ac74c9e",
                  "parentUUID": "aa4a92df-9289-4507-bc66-b0d0f9c7a448",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment('2016-05-01T03:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "d62cef8a-689c-4515-84a7-b96f34e5827e",
                  "parentUUID": "aa4a92df-9289-4507-bc66-b0d0f9c7a448",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8989bdfb-8cc2-4bc0-9e6d-67203ac74c9e",
                "d62cef8a-689c-4515-84a7-b96f34e5827e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6f291640-9e3d-48fb-bab1-23a20a6501d3",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "5e5e4082-f86b-4153-bbb5-a9b5e07df8e7",
                  "parentUUID": "6f291640-9e3d-48fb-bab1-23a20a6501d3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.MO, ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "9d5b3c6c-3091-496c-9501-3f5f6c1fc4ad",
                  "parentUUID": "6f291640-9e3d-48fb-bab1-23a20a6501d3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5e5e4082-f86b-4153-bbb5-a9b5e07df8e7",
                "9d5b3c6c-3091-496c-9501-3f5f6c1fc4ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "71295572-fd38-4757-93b5-9c422895b82c",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "f134448f-42f0-4205-8d7d-a3083ab451b4",
                  "parentUUID": "71295572-fd38-4757-93b5-9c422895b82c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "d23887ed-8c3f-46e0-8e83-4f581ae676c5",
                  "parentUUID": "71295572-fd38-4757-93b5-9c422895b82c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "a492c5ea-f700-4c8c-a0cc-d53ce579e262",
                  "parentUUID": "71295572-fd38-4757-93b5-9c422895b82c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f134448f-42f0-4205-8d7d-a3083ab451b4",
                "d23887ed-8c3f-46e0-8e83-4f581ae676c5",
                "a492c5ea-f700-4c8c-a0cc-d53ce579e262"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "06317a74-c3ef-4863-b4cf-6fc43022e74e",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "2f7ae9b5-c5b4-4c56-b8ad-8a23e9833e79",
                  "parentUUID": "06317a74-c3ef-4863-b4cf-6fc43022e74e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "33d19e4f-5e51-4b33-815f-841f7ca0ab81",
                  "parentUUID": "06317a74-c3ef-4863-b4cf-6fc43022e74e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2f7ae9b5-c5b4-4c56-b8ad-8a23e9833e79",
                "33d19e4f-5e51-4b33-815f-841f7ca0ab81"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e7ad3904-0bb3-4c30-9999-a3b62f1076f5",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "5ebc285d-174a-4e96-bc2d-9c6c7bad2122",
                  "parentUUID": "e7ad3904-0bb3-4c30-9999-a3b62f1076f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5ebc285d-174a-4e96-bc2d-9c6c7bad2122"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfa08931-72ca-4e12-b5e4-d1f515555092",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "3adfcd8a-63d8-4fca-acce-194f1053933e",
                  "parentUUID": "bfa08931-72ca-4e12-b5e4-d1f515555092",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3adfcd8a-63d8-4fca-acce-194f1053933e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a8b71e30-ba9c-41fc-a0ff-06e0681748b8",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "81ce54de-a062-4191-b5ad-d4b22af98ee9",
                  "parentUUID": "a8b71e30-ba9c-41fc-a0ff-06e0681748b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "ac4c82bd-09a8-42fc-8f0b-29e465837a0f",
                  "parentUUID": "a8b71e30-ba9c-41fc-a0ff-06e0681748b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "81ce54de-a062-4191-b5ad-d4b22af98ee9",
                "ac4c82bd-09a8-42fc-8f0b-29e465837a0f"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd700e9c-e71d-47ae-bc70-9a25358bc30a",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "3d0f3063-4ca7-40b5-bc0c-4f66ed90911d",
                  "parentUUID": "fd700e9c-e71d-47ae-bc70-9a25358bc30a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "5c7f5edc-0ee0-4e7a-828d-04c337020112",
                  "parentUUID": "fd700e9c-e71d-47ae-bc70-9a25358bc30a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d0f3063-4ca7-40b5-bc0c-4f66ed90911d",
                "5c7f5edc-0ee0-4e7a-828d-04c337020112"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9b02ecac-effe-403b-b193-d65d8dd32938",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eff19bc3-d34a-4276-83be-a2db0d7a2aaf",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "3e9da36c-0cbc-4961-97cf-5b4951943a66",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "2c819def-6b6d-4c1b-b5cc-72b48a88ae39",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "5821e2b7-67a4-45bb-9e7d-60e05b4157e8",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "09923855-0f76-4c3d-93e9-7534ddc42e7e",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "ffdac007-e002-4b28-aa55-22940b8eb695",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "4ceda0df-4f4f-437e-975c-e139cf57d153",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "4ec3d788-369b-48ae-ae1a-546494d57f83",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "c7d36576-b8ce-4807-8856-ad8962d58fc2",
                      "parentUUID": "2e205ae8-0450-48fd-8c12-79e3549d8ea6",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3e9da36c-0cbc-4961-97cf-5b4951943a66",
                    "2c819def-6b6d-4c1b-b5cc-72b48a88ae39",
                    "5821e2b7-67a4-45bb-9e7d-60e05b4157e8",
                    "09923855-0f76-4c3d-93e9-7534ddc42e7e",
                    "ffdac007-e002-4b28-aa55-22940b8eb695",
                    "4ceda0df-4f4f-437e-975c-e139cf57d153",
                    "4ec3d788-369b-48ae-ae1a-546494d57f83",
                    "c7d36576-b8ce-4807-8856-ad8962d58fc2"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "93f63108-17c4-4e59-835c-e178546058a5",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "dbcaf3a2-8923-4932-b976-2e6728d7d5c0",
                      "parentUUID": "93f63108-17c4-4e59-835c-e178546058a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "57fff1e0-94a5-420b-a1ec-43cee630d7cc",
                      "parentUUID": "93f63108-17c4-4e59-835c-e178546058a5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "1f4f21d3-12b3-4314-b4cf-dbf3aed2e6c1",
                      "parentUUID": "93f63108-17c4-4e59-835c-e178546058a5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "dbcaf3a2-8923-4932-b976-2e6728d7d5c0",
                    "57fff1e0-94a5-420b-a1ec-43cee630d7cc",
                    "1f4f21d3-12b3-4314-b4cf-dbf3aed2e6c1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "b73f0410-b5cd-4c9e-8a81-3aeacefd5e5d",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "e19eb7a4-7859-47a1-a06d-9339a9fe2421",
                      "parentUUID": "b73f0410-b5cd-4c9e-8a81-3aeacefd5e5d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "c7192f9b-2743-4454-b8e8-1e2920dd9527",
                      "parentUUID": "b73f0410-b5cd-4c9e-8a81-3aeacefd5e5d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "b2844f8a-f514-4b13-948c-13f3d6b72c07",
                      "parentUUID": "b73f0410-b5cd-4c9e-8a81-3aeacefd5e5d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e19eb7a4-7859-47a1-a06d-9339a9fe2421",
                    "c7192f9b-2743-4454-b8e8-1e2920dd9527",
                    "b2844f8a-f514-4b13-948c-13f3d6b72c07"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "a89a9ae0-ced4-428a-a0b9-1b92e80f6d40",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 23,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "d29903b0-15cd-4d1e-8675-79e77284e183",
                      "parentUUID": "a89a9ae0-ced4-428a-a0b9-1b92e80f6d40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "28ef1627-d37a-425d-8f82-a3c7a04058a9",
                      "parentUUID": "a89a9ae0-ced4-428a-a0b9-1b92e80f6d40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "daa16210-d54c-4703-b68a-20ef2c6b0eec",
                      "parentUUID": "a89a9ae0-ced4-428a-a0b9-1b92e80f6d40",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "1e97e450-082b-4387-95f5-ca01ef4a78fa",
                      "parentUUID": "a89a9ae0-ced4-428a-a0b9-1b92e80f6d40",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d29903b0-15cd-4d1e-8675-79e77284e183",
                    "28ef1627-d37a-425d-8f82-a3c7a04058a9",
                    "daa16210-d54c-4703-b68a-20ef2c6b0eec",
                    "1e97e450-082b-4387-95f5-ca01ef4a78fa"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 27,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "34e82347-d819-40e4-907b-36dc6cf92bf0",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "039b93d3-e172-4855-8f8e-2a3f90e935ce",
                      "parentUUID": "34e82347-d819-40e4-907b-36dc6cf92bf0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "5c613e54-bd11-421f-98bd-bef0f046d4f6",
                      "parentUUID": "34e82347-d819-40e4-907b-36dc6cf92bf0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "1ee93b22-4e70-4441-87ef-866398a5d424",
                      "parentUUID": "34e82347-d819-40e4-907b-36dc6cf92bf0",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "15bc8b9f-ab41-472e-ad7c-3b748c1c78c7",
                      "parentUUID": "34e82347-d819-40e4-907b-36dc6cf92bf0",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "039b93d3-e172-4855-8f8e-2a3f90e935ce",
                    "5c613e54-bd11-421f-98bd-bef0f046d4f6",
                    "1ee93b22-4e70-4441-87ef-866398a5d424",
                    "15bc8b9f-ab41-472e-ad7c-3b748c1c78c7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 3,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5312e5f9-1797-49eb-9000-e7b87e634a16",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert.strictEqual(formatDateTZ('Europe/Berlin', 'DSTART', moment('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "7594d719-b04d-4d1f-960c-0805f3317d78",
                  "parentUUID": "5312e5f9-1797-49eb-9000-e7b87e634a16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "56e6db41-dd30-4eea-b21a-2d4d3175a66b",
                  "parentUUID": "5312e5f9-1797-49eb-9000-e7b87e634a16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "c31006c5-2a8b-40c6-b708-e59285418f1d",
                  "parentUUID": "5312e5f9-1797-49eb-9000-e7b87e634a16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7594d719-b04d-4d1f-960c-0805f3317d78",
                "56e6db41-dd30-4eea-b21a-2d4d3175a66b",
                "c31006c5-2a8b-40c6-b708-e59285418f1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "03732011-420b-4d1f-9c58-c65d322975db",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "7b6e5dbc-8aec-4797-957e-0accf9cd41c2",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "01926130-6031-4eb7-8957-db6cc2d97791",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "b4f2a541-2553-4b9e-918d-15628531bb64",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "6a79e629-c003-438b-8ef7-591d2b97fe6a",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "4310971e-0f6d-4126-91b2-50b44f0ef614",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "c8ed0b47-e0c4-41e2-95c5-d952c5739a1e",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "b9dac2b3-4550-440b-9bb6-28b70a4bc1e4",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "d71c6075-de8d-41a9-9644-be65dc91055b",
                  "parentUUID": "03732011-420b-4d1f-9c58-c65d322975db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7b6e5dbc-8aec-4797-957e-0accf9cd41c2",
                "01926130-6031-4eb7-8957-db6cc2d97791",
                "b4f2a541-2553-4b9e-918d-15628531bb64",
                "6a79e629-c003-438b-8ef7-591d2b97fe6a",
                "4310971e-0f6d-4126-91b2-50b44f0ef614",
                "c8ed0b47-e0c4-41e2-95c5-d952c5739a1e",
                "b9dac2b3-4550-440b-9bb6-28b70a4bc1e4",
                "d71c6075-de8d-41a9-9644-be65dc91055b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02da9dcd-ee90-4a7c-a581-1b92281c3421",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "f0d6728c-cc32-4793-881e-eaf16191e063",
                  "parentUUID": "02da9dcd-ee90-4a7c-a581-1b92281c3421",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "ff2a4592-1dd9-4000-84ba-4b8ddf69f0df",
                  "parentUUID": "02da9dcd-ee90-4a7c-a581-1b92281c3421",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0d6728c-cc32-4793-881e-eaf16191e063",
                "ff2a4592-1dd9-4000-84ba-4b8ddf69f0df"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6a7587db-5a03-480c-8255-4cd82bdb4e37",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "40b56788-4f10-467f-b402-836d228f2d4a",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "038d9ac2-3b60-4a31-bf24-0e4aed23020a",
                      "parentUUID": "40b56788-4f10-467f-b402-836d228f2d4a",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "3d0acaca-7cba-421f-8d2f-5b775f1dca18",
                      "parentUUID": "40b56788-4f10-467f-b402-836d228f2d4a",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "038d9ac2-3b60-4a31-bf24-0e4aed23020a",
                    "3d0acaca-7cba-421f-8d2f-5b775f1dca18"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "fbfea84b-b9c9-44f7-8b4b-6e7b722cb488",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "5bf4de60-acba-4f16-badc-bb0542588ac0",
                      "parentUUID": "fbfea84b-b9c9-44f7-8b4b-6e7b722cb488",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "e6c62c88-d64c-4d4d-adcf-078fffd03aa1",
                      "parentUUID": "fbfea84b-b9c9-44f7-8b4b-6e7b722cb488",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "5bf4de60-acba-4f16-badc-bb0542588ac0",
                    "e6c62c88-d64c-4d4d-adcf-078fffd03aa1"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "05e55796-0eb3-463c-8976-63739d98e54f",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.now();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "9a1d9372-8935-40f1-aadf-8c5e727e9ee7",
                      "parentUUID": "05e55796-0eb3-463c-8976-63739d98e54f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.fromISO('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "2084abbb-e7fb-4d8a-8a2b-24f69f872564",
                      "parentUUID": "05e55796-0eb3-463c-8976-63739d98e54f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "9a1d9372-8935-40f1-aadf-8c5e727e9ee7",
                    "2084abbb-e7fb-4d8a-8a2b-24f69f872564"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "ad3c3546-3f2f-493b-9ecc-51e21454269f",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "f3b1db5b-7ed0-40f0-99d2-742f5621fb7c",
                      "parentUUID": "ad3c3546-3f2f-493b-9ecc-51e21454269f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 13,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "d0e975e5-38c9-496c-994b-a4f0fa397ceb",
                      "parentUUID": "ad3c3546-3f2f-493b-9ecc-51e21454269f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "f3b1db5b-7ed0-40f0-99d2-742f5621fb7c",
                    "d0e975e5-38c9-496c-994b-a4f0fa397ceb"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 13,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "73cef72c-aa94-432e-bb4a-64de898e9cd9",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "d9f99b47-ba19-4a4c-ac1a-0b92c6aff958",
                      "parentUUID": "73cef72c-aa94-432e-bb4a-64de898e9cd9",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "5e007491-cfbc-4018-ac24-503d5d2bda90",
                      "parentUUID": "73cef72c-aa94-432e-bb4a-64de898e9cd9",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "d9f99b47-ba19-4a4c-ac1a-0b92c6aff958",
                    "5e007491-cfbc-4018-ac24-503d5d2bda90"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "b955963c-f5ed-4cb0-8417-80008fff2ede",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date), date);",
                  "err": {},
                  "uuid": "8ccd8efe-2c8c-44fc-8ed2-74cf4d265220",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(moment(date)), date);",
                  "err": {},
                  "uuid": "e216450d-f53c-40f1-876c-b773e236a7ce",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(momentTz(date)), date);",
                  "err": {},
                  "uuid": "fcfdce46-4c48-4246-8165-89ba708d9d4a",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(dayjs(date)), date);",
                  "err": {},
                  "uuid": "a75718c5-be7e-423c-9779-2549843d6b0a",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "a1a9861a-da2b-4ced-830c-bc8e958b8857",
                  "parentUUID": "c1aeee51-4d9b-4fd5-bc17-47275a8257cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b955963c-f5ed-4cb0-8417-80008fff2ede",
                "8ccd8efe-2c8c-44fc-8ed2-74cf4d265220",
                "e216450d-f53c-40f1-876c-b773e236a7ce",
                "fcfdce46-4c48-4246-8165-89ba708d9d4a",
                "a75718c5-be7e-423c-9779-2549843d6b0a",
                "a1a9861a-da2b-4ced-830c-bc8e958b8857"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}