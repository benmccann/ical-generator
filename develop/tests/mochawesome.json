{
  "stats": {
    "suites": 132,
    "tests": 443,
    "passes": 441,
    "pending": 2,
    "failures": 0,
    "start": "2023-04-24T18:37:05.941Z",
    "end": "2023-04-24T18:37:06.225Z",
    "duration": 284,
    "testsRegistered": 443,
    "passPercent": 100,
    "pendingPercent": 0.4514672686230248,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "88329ecb-185d-459a-9568-230facbc7fa6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d0f6b32b-982a-4be8-97f6-6e35aba29d7c",
          "title": "ical-generator Alarm",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
          "file": "/test/alarm.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e409b494-4114-4a8a-bbe0-2b5b214fc81e",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Alarm constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAlarm({ type: ICalAlarmType.display }, null);\n}, /`event`/);",
                  "err": {},
                  "uuid": "62422779-9c89-4083-a1d5-ad2bc51c7b27",
                  "parentUUID": "e409b494-4114-4a8a-bbe0-2b5b214fc81e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Alarm constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    // @ts-ignore\n    unknown: true,\n    type: ICalAlarmType.display\n}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), 'display');",
                  "err": {},
                  "uuid": "750a30b5-adc0-4be1-8bfb-dacfbcac6b4c",
                  "parentUUID": "e409b494-4114-4a8a-bbe0-2b5b214fc81e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62422779-9c89-4083-a1d5-ad2bc51c7b27",
                "750a30b5-adc0-4be1-8bfb-dacfbcac6b4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c4e7db0a-3d1e-451d-bbd0-62f55cd16c50",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.type(null));\nassert.deepStrictEqual(a, a.type(ICalAlarmType.display));",
                  "err": {},
                  "uuid": "e55d8fe0-2122-4afc-94d0-ea7355e8c1d7",
                  "parentUUID": "c4e7db0a-3d1e-451d-bbd0-62f55cd16c50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAlarmType.display);\nassert.strictEqual(a.type(), 'display');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "ff6b301e-2894-4c58-95f0-86773786090f",
                  "parentUUID": "c4e7db0a-3d1e-451d-bbd0-62f55cd16c50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when type not allowed",
                  "fullTitle": "ical-generator Alarm type() should throw error when type not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('BANANA');\n}, /`type`/);",
                  "err": {},
                  "uuid": "0a91b2c1-27e3-48e3-8b2f-8a3ea67b527b",
                  "parentUUID": "c4e7db0a-3d1e-451d-bbd0-62f55cd16c50",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm type() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 60 * 10\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('ACTION:DISPLAY') > -1);",
                  "err": {},
                  "uuid": "7bec2fca-b543-4c2a-9c23-cc69a9c01af5",
                  "parentUUID": "c4e7db0a-3d1e-451d-bbd0-62f55cd16c50",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e55d8fe0-2122-4afc-94d0-ea7355e8c1d7",
                "ff6b301e-2894-4c58-95f0-86773786090f",
                "0a91b2c1-27e3-48e3-8b2f-8a3ea67b527b",
                "7bec2fca-b543-4c2a-9c23-cc69a9c01af5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
              "title": "trigger()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm trigger() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.trigger(null));\nassert.deepStrictEqual(a, a.trigger(60 * 10));",
                  "err": {},
                  "uuid": "92673871-aa5f-421b-b0c4-beb1fa310d6d",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm trigger() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);\na.trigger(300);\nassert.strictEqual(a.trigger(), 300);\nassert.strictEqual(a.triggerAfter(), -300);\n// Date\na.trigger(now);\nconst dateResult = a.trigger();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.trigger(), null);\nassert.strictEqual(a.triggerAfter(), null);",
                  "err": {},
                  "uuid": "b707326b-22b8-4e0b-84a0-dcaddb6ae035",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm trigger() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.trigger(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.trigger(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "598d5300-ca8d-4e04-9468-e2d05dcf5c95",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(60 * 10);\na.trigger(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "e0cd65ce-c246-4b5c-ab06-f54767c52c83",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(new Date());\nassert.ok(a.trigger() instanceof Date);",
                  "err": {},
                  "uuid": "df524074-3d61-4eb9-861b-d49fc13a8df6",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "0f150d4d-8c93-48ad-a95a-08b06e7a3fa3",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm trigger() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.trigger(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "3397e016-06ee-415c-8348-394e2b2706d6",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm trigger() should change something",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.trigger(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "6aa85aab-f95c-4086-9029-e568f523e6f1",
                  "parentUUID": "ab94c2aa-eac1-45df-b6b3-76a495729ec4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92673871-aa5f-421b-b0c4-beb1fa310d6d",
                "b707326b-22b8-4e0b-84a0-dcaddb6ae035",
                "598d5300-ca8d-4e04-9468-e2d05dcf5c95",
                "e0cd65ce-c246-4b5c-ab06-f54767c52c83",
                "df524074-3d61-4eb9-861b-d49fc13a8df6",
                "0f150d4d-8c93-48ad-a95a-08b06e7a3fa3",
                "3397e016-06ee-415c-8348-394e2b2706d6",
                "6aa85aab-f95c-4086-9029-e568f523e6f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7c119e4-b1cc-43ba-9b99-697559808750",
              "title": "triggerAfter()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerAfter(60 * 10));",
                  "err": {},
                  "uuid": "4d6d114f-120f-4b90-8347-1c94e30eada4",
                  "parentUUID": "a7c119e4-b1cc-43ba-9b99-697559808750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerAfter() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar())).triggerAfter(300);\nassert.strictEqual(a.triggerAfter(), 300);\nassert.strictEqual(a.trigger(), -300);",
                  "err": {},
                  "uuid": "7b1281be-9b48-42bf-979d-aee393b8120f",
                  "parentUUID": "a7c119e4-b1cc-43ba-9b99-697559808750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerAfter(120);\nassert.strictEqual(a.trigger(), -120);",
                  "err": {},
                  "uuid": "b547d78e-dfa7-4510-a575-e00bb571b670",
                  "parentUUID": "a7c119e4-b1cc-43ba-9b99-697559808750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerAfter() setter should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerAfter(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerAfter(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "9ba36d35-c0a2-4f61-853c-c13ec6835957",
                  "parentUUID": "a7c119e4-b1cc-43ba-9b99-697559808750",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerAfter() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('20150201T133845Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerAfter: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER;RELATED=END:PT10M') > -1);\na.triggerAfter(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "65ca4138-563c-4ee8-bd32-6061c4708647",
                  "parentUUID": "a7c119e4-b1cc-43ba-9b99-697559808750",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4d6d114f-120f-4b90-8347-1c94e30eada4",
                "7b1281be-9b48-42bf-979d-aee393b8120f",
                "b547d78e-dfa7-4510-a575-e00bb571b670",
                "9ba36d35-c0a2-4f61-853c-c13ec6835957",
                "65ca4138-563c-4ee8-bd32-6061c4708647"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "741744fd-de28-4778-8683-60421b5ae6d8",
              "title": "triggerBefore()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.triggerBefore(null));\nassert.deepStrictEqual(a, a.triggerBefore(60 * 10));",
                  "err": {},
                  "uuid": "a6da8531-7f10-4125-a47e-2a764c415b78",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm triggerBefore() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\nassert.strictEqual(a.triggerBefore(), null);\na.trigger(300);\nassert.strictEqual(a.triggerBefore(), 300);\n// Date\na.trigger(now);\nconst dateResult = a.triggerBefore();\nassert.deepStrictEqual(dateResult, now);\n// Null\na.trigger(null);\nassert.strictEqual(a.triggerBefore(), null);",
                  "err": {},
                  "uuid": "a90c3e55-3fb9-4d7c-8114-838a5056d81f",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when trigger not allowed",
                  "fullTitle": "ical-generator Alarm triggerBefore() should throw error when trigger not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.triggerBefore(Infinity);\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore('hi');\n}, /`trigger`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.triggerBefore(true);\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "f5c07ee6-b983-4044-9ccc-e9433b7e218d",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with null",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(60 * 10);\na.triggerBefore(null);\nassert.strictEqual(a.trigger(), null);",
                  "err": {},
                  "uuid": "fec300f5-929d-46de-9e9a-5ecf6d8c5e4c",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with date",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nconst now = new Date();\na.triggerBefore(now);\nassert.deepStrictEqual(a.trigger(), now);",
                  "err": {},
                  "uuid": "0434aa22-6b12-4072-bf00-e7a11c1e27d3",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment instance",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with moment instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(moment());\nassert.ok(moment.isMoment(a.trigger()));",
                  "err": {},
                  "uuid": "60927f0c-5003-4388-8cc6-25db8c72cfea",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with number",
                  "fullTitle": "ical-generator Alarm triggerBefore() setter should work with number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.triggerBefore(2 * 60);\nassert.strictEqual(a.trigger(), 120);",
                  "err": {},
                  "uuid": "33e0ce23-9637-4366-ad06-af92e3d90a00",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm triggerBefore() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const trigger = moment('2015-02-01T13:38:45.000Z');\nconst a = new ICalAlarm({ type: ICalAlarmType.display, triggerBefore: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('TRIGGER:-PT10M') > -1);\na.triggerBefore(trigger);\nassert.ok(a.toString().indexOf('TRIGGER;VALUE=DATE-TIME:20150201T133845Z') > -1);",
                  "err": {},
                  "uuid": "d4f54954-548d-4932-b83f-491065813bf0",
                  "parentUUID": "741744fd-de28-4778-8683-60421b5ae6d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6da8531-7f10-4125-a47e-2a764c415b78",
                "a90c3e55-3fb9-4d7c-8114-838a5056d81f",
                "f5c07ee6-b983-4044-9ccc-e9433b7e218d",
                "fec300f5-929d-46de-9e9a-5ecf6d8c5e4c",
                "0434aa22-6b12-4072-bf00-e7a11c1e27d3",
                "60927f0c-5003-4388-8cc6-25db8c72cfea",
                "33e0ce23-9637-4366-ad06-af92e3d90a00",
                "d4f54954-548d-4932-b83f-491065813bf0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aac1f393-b5f1-45df-9ac0-2a58e4107afc",
              "title": "relatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm relatesTo() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.relatesTo(null));\nassert.deepStrictEqual(a, a.relatesTo(ICalAlarmRelatesTo.end));",
                  "err": {},
                  "uuid": "7104d3d7-c57e-48b4-a81c-50cd35708ec5",
                  "parentUUID": "aac1f393-b5f1-45df-9ac0-2a58e4107afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm relatesTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.relatesTo(), null);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.strictEqual(a.relatesTo(), ICalAlarmRelatesTo.end);\na.relatesTo(null);\nassert.strictEqual(a.relatesTo(), null);",
                  "err": {},
                  "uuid": "86b2d237-9d0b-41ca-887e-abb076c5cc5e",
                  "parentUUID": "aac1f393-b5f1-45df-9ac0-2a58e4107afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw if value is not `null`, \"START\" or \"END\"",
                  "fullTitle": "ical-generator Alarm relatesTo() should throw if value is not `null`, \"START\" or \"END\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo('hi');\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(true);\n}, /`relatesTo`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.relatesTo(Infinity);\n}, /`relatesTo`/);",
                  "err": {},
                  "uuid": "ef41c980-cad5-4f8d-856b-7d44d1556e6e",
                  "parentUUID": "aac1f393-b5f1-45df-9ac0-2a58e4107afc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change RELATED",
                  "fullTitle": "ical-generator Alarm relatesTo() should change RELATED",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display, triggerBefore: 60 * 10 }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('RELATED=START') === -1);\na.relatesTo(ICalAlarmRelatesTo.start);\nassert.ok(a.toString().indexOf('RELATED=START') > -1);\na.relatesTo(ICalAlarmRelatesTo.end);\nassert.ok(a.toString().indexOf('RELATED=END') > -1);",
                  "err": {},
                  "uuid": "7632a50d-b74c-4d5d-80d3-98fb180b27ba",
                  "parentUUID": "aac1f393-b5f1-45df-9ac0-2a58e4107afc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7104d3d7-c57e-48b4-a81c-50cd35708ec5",
                "86b2d237-9d0b-41ca-887e-abb076c5cc5e",
                "ef41c980-cad5-4f8d-856b-7d44d1556e6e",
                "7632a50d-b74c-4d5d-80d3-98fb180b27ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2e04b7ad-5a9c-4715-b368-8211cd663e01",
              "title": "repeat()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm repeat() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.repeat(null));\nassert.deepStrictEqual(a, a.repeat(4));",
                  "err": {},
                  "uuid": "57b53fa9-3097-4847-b0b9-c9128f77f4c5",
                  "parentUUID": "2e04b7ad-5a9c-4715-b368-8211cd663e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm repeat() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.repeat(), null);\na.repeat(100);\nassert.strictEqual(a.repeat(), 100);\na.repeat(null);\nassert.strictEqual(a.repeat(), null);",
                  "err": {},
                  "uuid": "50f963db-3bd7-449f-8dfd-4cffdb73f16f",
                  "parentUUID": "2e04b7ad-5a9c-4715-b368-8211cd663e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm repeat() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.repeat(Infinity);\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat('hi');\n}, /`repeat`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.repeat(true);\n}, /`repeat`/);",
                  "err": {},
                  "uuid": "564409f4-d220-4547-9c95-1f2748dc419a",
                  "parentUUID": "2e04b7ad-5a9c-4715-b368-8211cd663e01",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm repeat() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('REPEAT:42') > -1);",
                  "err": {},
                  "uuid": "0bd6086a-d068-4dd3-9081-5013b57f748d",
                  "parentUUID": "2e04b7ad-5a9c-4715-b368-8211cd663e01",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "57b53fa9-3097-4847-b0b9-c9128f77f4c5",
                "50f963db-3bd7-449f-8dfd-4cffdb73f16f",
                "564409f4-d220-4547-9c95-1f2748dc419a",
                "0bd6086a-d068-4dd3-9081-5013b57f748d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a60a86ee-a0e0-496c-be60-ab8e8aeffff0",
              "title": "interval()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm interval() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.interval(null));\nassert.deepStrictEqual(a, a.interval(60));",
                  "err": {},
                  "uuid": "2d89aafe-3e4c-4367-a8f6-c8be8b149382",
                  "parentUUID": "a60a86ee-a0e0-496c-be60-ab8e8aeffff0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm interval() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.interval(), null);\na.interval(30);\nassert.strictEqual(a.interval(), 30);\na.interval(null);\nassert.strictEqual(a.interval(), null);",
                  "err": {},
                  "uuid": "b3ce4dab-4a88-49bb-9782-9b9401e6bae8",
                  "parentUUID": "a60a86ee-a0e0-496c-be60-ab8e8aeffff0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error if repeat not allowed",
                  "fullTitle": "ical-generator Alarm interval() should throw error if repeat not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.interval(Infinity);\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval('hi');\n}, /`interval`/);\nassert.throws(function () {\n    // @ts-ignore\n    a.interval(true);\n}, /`interval`/);",
                  "err": {},
                  "uuid": "df8be905-0a8d-49d0-83ed-d2762826c028",
                  "parentUUID": "a60a86ee-a0e0-496c-be60-ab8e8aeffff0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm interval() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    repeat: 42,\n    interval: 90\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DURATION:PT1M30S') > -1);",
                  "err": {},
                  "uuid": "37e22176-2fcd-4c0e-9bb4-36aa1612b19b",
                  "parentUUID": "a60a86ee-a0e0-496c-be60-ab8e8aeffff0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d89aafe-3e4c-4367-a8f6-c8be8b149382",
                "b3ce4dab-4a88-49bb-9782-9b9401e6bae8",
                "df8be905-0a8d-49d0-83ed-d2762826c028",
                "37e22176-2fcd-4c0e-9bb4-36aa1612b19b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "50b3985d-11a6-4b70-a13c-57f88af80925",
              "title": "attach()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm attach() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.attach(null));\nassert.deepStrictEqual(a, a.attach('https://sebbo.net/beep.aud'));",
                  "err": {},
                  "uuid": "2ccfce24-b145-4c16-b5b7-95d07a882186",
                  "parentUUID": "50b3985d-11a6-4b70-a13c-57f88af80925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm attach() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const t = { uri: 'https://example.com/alarm.aud', mime: 'audio/basic' };\nconst a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.attach(), null);\na.attach(t);\nassert.deepStrictEqual(a.attach(), t);\na.attach('https://www.example.com/beep.aud');\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach({\n    uri: 'https://www.example.com/beep.aud'\n});\nassert.deepStrictEqual(a.attach(), {\n    uri: 'https://www.example.com/beep.aud',\n    mime: null\n});\na.attach(null);\nassert.strictEqual(a.attach(), null);",
                  "err": {},
                  "uuid": "8baa0965-88c3-4210-8493-666ea1835c36",
                  "parentUUID": "50b3985d-11a6-4b70-a13c-57f88af80925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error withour uri",
                  "fullTitle": "ical-generator Alarm attach() should throw error withour uri",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach({ mime: 'audio/basic' });\n}, /`attach.uri`/);",
                  "err": {},
                  "uuid": "439f422d-c4d6-423d-b39b-fde0ca56fc16",
                  "parentUUID": "50b3985d-11a6-4b70-a13c-57f88af80925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Alarm attach() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.attach(Infinity);\n}, /`attachment`/);",
                  "err": {},
                  "uuid": "1c6ad745-6f12-40d7-85ed-b1a6a4e62894",
                  "parentUUID": "50b3985d-11a6-4b70-a13c-57f88af80925",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm attach() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.audio,\n    trigger: 300\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:Basso') > -1);\na.attach('https://example.com/beep.aud');\nassert.ok(a.toString().indexOf('\\r\\nATTACH;VALUE=URI:https://example.com/beep.aud') > -1);\na.attach({\n    uri: 'https://example.com/beep.aud',\n    mime: 'audio/basic'\n});\nassert.ok(a.toString().indexOf('\\r\\nATTACH;FMTTYPE=audio/basic:https://example.com/beep.aud') > -1);",
                  "err": {},
                  "uuid": "81f3a4b7-e233-48bd-a391-7ebb7c0d052f",
                  "parentUUID": "50b3985d-11a6-4b70-a13c-57f88af80925",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ccfce24-b145-4c16-b5b7-95d07a882186",
                "8baa0965-88c3-4210-8493-666ea1835c36",
                "439f422d-c4d6-423d-b39b-fde0ca56fc16",
                "1c6ad745-6f12-40d7-85ed-b1a6a4e62894",
                "81f3a4b7-e233-48bd-a391-7ebb7c0d052f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "61d3dbb0-333e-4862-a22b-af103c5b9af8",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Alarm description() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.description(null));\nassert.deepStrictEqual(a, a.description('Hey Ho!'));",
                  "err": {},
                  "uuid": "4879c859-5e55-44f1-b7d0-0e53553c061f",
                  "parentUUID": "61d3dbb0-333e-4862-a22b-af103c5b9af8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Alarm description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.description(), null);\na.description('blablabla');\nassert.deepStrictEqual(a.description(), 'blablabla');\na.description(null);\nassert.deepStrictEqual(a.description(), null);",
                  "err": {},
                  "uuid": "666b01e4-2d2b-42c7-833e-cc430fcf5439",
                  "parentUUID": "61d3dbb0-333e-4862-a22b-af103c5b9af8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Alarm description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    description: 'Huibuh!'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Huibuh') > -1);",
                  "err": {},
                  "uuid": "f47e0fa1-41fd-459e-b2f6-ea06457e1d15",
                  "parentUUID": "61d3dbb0-333e-4862-a22b-af103c5b9af8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fallback to event summary",
                  "fullTitle": "ical-generator Alarm description() should fallback to event summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300\n}, new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('\\r\\nDESCRIPTION:Example Event') > -1);",
                  "err": {},
                  "uuid": "b0e5240a-60e9-46ab-84fb-9b4d4c264033",
                  "parentUUID": "61d3dbb0-333e-4862-a22b-af103c5b9af8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4879c859-5e55-44f1-b7d0-0e53553c061f",
                "666b01e4-2d2b-42c7-833e-cc430fcf5439",
                "f47e0fa1-41fd-459e-b2f6-ea06457e1d15",
                "b0e5240a-60e9-46ab-84fb-9b4d4c264033"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f51977ed-7dc1-481e-87dc-41ca3f1a15c2",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Alarm x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "6a2c48c6-210c-4d3a-aafc-ec2c5dc93653",
                  "parentUUID": "f51977ed-7dc1-481e-87dc-41ca3f1a15c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a2c48c6-210c-4d3a-aafc-ec2c5dc93653"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7a6bece5-be47-4929-ad3a-ab57e32d5cb4",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Alarm toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\na.type(ICalAlarmType.display);\na.trigger(120);\nassert.deepStrictEqual(a.toJSON(), {\n    attach: null,\n    description: null,\n    relatesTo: null,\n    interval: null,\n    repeat: null,\n    trigger: 120,\n    type: 'display',\n    x: []\n});",
                  "err": {},
                  "uuid": "2770dad4-dc1d-4d6f-a419-268262dd9af7",
                  "parentUUID": "7a6bece5-be47-4929-ad3a-ab57e32d5cb4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Alarm toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAlarm(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "f163e97f-2918-4c4d-8053-e585a03981fa",
                  "parentUUID": "7a6bece5-be47-4929-ad3a-ab57e32d5cb4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2770dad4-dc1d-4d6f-a419-268262dd9af7",
                "f163e97f-2918-4c4d-8053-e585a03981fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7ef2a1c-2256-4a9c-bb4a-5104087203c7",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/alarm.ts",
              "file": "/test/alarm.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without type",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ trigger: 300 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`type`/);",
                  "err": {},
                  "uuid": "8a376a0d-ff8c-4cdd-96df-f45a892fbc6f",
                  "parentUUID": "c7ef2a1c-2256-4a9c-bb4a-5104087203c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error without trigger",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error without trigger",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`trigger`/);",
                  "err": {},
                  "uuid": "e05c3aa4-f122-4ede-b7b1-6804e38ef2b6",
                  "parentUUID": "c7ef2a1c-2256-4a9c-bb4a-5104087203c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if repeat is set but interval isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if repeat is set but interval isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({ type: ICalAlarmType.display, trigger: 300, repeat: 4 }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `interval`/);",
                  "err": {},
                  "uuid": "e8d931f3-7869-4c7a-abf8-490680386da4",
                  "parentUUID": "c7ef2a1c-2256-4a9c-bb4a-5104087203c7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shoult throw an error if interval is set but repeat isn't",
                  "fullTitle": "ical-generator Alarm generate() shoult throw an error if interval is set but repeat isn't",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAlarm({\n    type: ICalAlarmType.display,\n    trigger: 300,\n    interval: 60\n}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /for `repeat`/);",
                  "err": {},
                  "uuid": "b479f76e-9858-4c64-bc7b-58347b04bd65",
                  "parentUUID": "c7ef2a1c-2256-4a9c-bb4a-5104087203c7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a376a0d-ff8c-4cdd-96df-f45a892fbc6f",
                "e05c3aa4-f122-4ede-b7b1-6804e38ef2b6",
                "e8d931f3-7869-4c7a-abf8-490680386da4",
                "b479f76e-9858-4c64-bc7b-58347b04bd65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "764d57da-3ec7-4f9a-8f15-7c12b58d72b8",
          "title": "ical-generator Attendee",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
          "file": "/test/attendee.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9aa8b816-1095-4211-8fcd-73f6719c9eea",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Attendee constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    name: 'John Doe',\n    email: 'john@example.org',\n    mailto: 'john+calendar@example.org',\n    sentBy: null,\n    status: ICalAttendeeStatus.ACCEPTED,\n    role: ICalAttendeeRole.REQ,\n    rsvp: false,\n    type: ICalAttendeeType.INDIVIDUAL,\n    delegatedTo: null,\n    delegatedFrom: null,\n    x: []\n};\nconst event = new ICalAttendee(data, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "5801faaa-b9dd-4b29-a4a7-a47ce2a08afb",
                  "parentUUID": "9aa8b816-1095-4211-8fcd-73f6719c9eea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without event reference",
                  "fullTitle": "ical-generator Attendee constructor() shouldn't work without event reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalAttendee({ email: 'foo@bar.com' });\n}, /`event`/);",
                  "err": {},
                  "uuid": "643d483e-ada8-4f46-aa9f-9f045f99e87f",
                  "parentUUID": "9aa8b816-1095-4211-8fcd-73f6719c9eea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5801faaa-b9dd-4b29-a4a7-a47ce2a08afb",
                "643d483e-ada8-4f46-aa9f-9f045f99e87f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9cb1b9ba-00d8-4b18-af8a-dc25aea7fb0c",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.name(), null);\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');",
                  "err": {},
                  "uuid": "aa778ea2-b9ce-4a39-b2ca-e4d9088feb9b",
                  "parentUUID": "9cb1b9ba-00d8-4b18-af8a-dc25aea7fb0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.name(null));\nassert.deepStrictEqual(a, a.name('Sebastian'));",
                  "err": {},
                  "uuid": "6c75f1de-3e42-466b-b571-815b9624647e",
                  "parentUUID": "9cb1b9ba-00d8-4b18-af8a-dc25aea7fb0c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should change something",
                  "fullTitle": "ical-generator Attendee name() setter should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Sebastian');\nassert.strictEqual(a.name(), 'Sebastian');\na.name(null);\nassert.strictEqual(a.name(), null);",
                  "err": {},
                  "uuid": "d26449d1-03d6-4b69-9a4f-a1de2ee2cae4",
                  "parentUUID": "9cb1b9ba-00d8-4b18-af8a-dc25aea7fb0c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa778ea2-b9ce-4a39-b2ca-e4d9088feb9b",
                "6c75f1de-3e42-466b-b571-815b9624647e",
                "d26449d1-03d6-4b69-9a4f-a1de2ee2cae4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b2072799-63c2-47d7-bef9-6cbbff1ac8e2",
              "title": "email()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee email() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).email('foo@example.com');\nassert.strictEqual(a.email(), 'foo@example.com');",
                  "err": {},
                  "uuid": "f98a2332-5fc4-4306-abba-96acee52aa00",
                  "parentUUID": "b2072799-63c2-47d7-bef9-6cbbff1ac8e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee email() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.email('foo@example.com'));",
                  "err": {},
                  "uuid": "8fdc9970-3c44-4cc0-ad45-61cea58aaed0",
                  "parentUUID": "b2072799-63c2-47d7-bef9-6cbbff1ac8e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee email() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('mail@example.com') > -1);",
                  "err": {},
                  "uuid": "4610b857-b29a-4cba-84a4-f72a42b21aba",
                  "parentUUID": "b2072799-63c2-47d7-bef9-6cbbff1ac8e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f98a2332-5fc4-4306-abba-96acee52aa00",
                "8fdc9970-3c44-4cc0-ad45-61cea58aaed0",
                "4610b857-b29a-4cba-84a4-f72a42b21aba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9a4fd4a-5dac-406c-a6a5-bed1ec2a79a3",
              "title": "mailto()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee mailto() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.mailto(), null);\na.mailto('foo@example.com');\nassert.strictEqual(a.mailto(), 'foo@example.com');",
                  "err": {},
                  "uuid": "bd587ec2-229b-4f12-9ace-9dcf83d923a4",
                  "parentUUID": "c9a4fd4a-5dac-406c-a6a5-bed1ec2a79a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee mailto() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.mailto(null));\nassert.deepStrictEqual(a, a.mailto('foo@example.com'));",
                  "err": {},
                  "uuid": "0b921f3f-29d5-4f0a-8824-9931533c66bd",
                  "parentUUID": "c9a4fd4a-5dac-406c-a6a5-bed1ec2a79a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change mailto and keep email if present",
                  "fullTitle": "ical-generator Attendee mailto() should change mailto and keep email if present",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com' }, new ICalEvent({}, new ICalCalendar()));\na.mailto('mail2@example2.com');\nassert.ok(a.toString().indexOf('EMAIL=mail@example.com') > -1 &&\n    a.toString().indexOf('MAILTO:mail2@example2.com') > -1);",
                  "err": {},
                  "uuid": "7fd42ca2-2df1-45a1-8c97-3e3885752237",
                  "parentUUID": "c9a4fd4a-5dac-406c-a6a5-bed1ec2a79a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd587ec2-229b-4f12-9ace-9dcf83d923a4",
                "0b921f3f-29d5-4f0a-8824-9931533c66bd",
                "7fd42ca2-2df1-45a1-8c97-3e3885752237"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb37b105-f9ac-4247-869c-fe1b7ee9d74f",
              "title": "sentBy()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee sentBy() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).sentBy('foo@example.com');\nassert.strictEqual(a.sentBy(), 'foo@example.com');",
                  "err": {},
                  "uuid": "f83c86bc-085b-4ffb-aaac-ce7249730e68",
                  "parentUUID": "fb37b105-f9ac-4247-869c-fe1b7ee9d74f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee sentBy() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.sentBy('foo@example.com'));",
                  "err": {},
                  "uuid": "f9a3d56e-2bb3-4707-884c-af758976ca5a",
                  "parentUUID": "fb37b105-f9ac-4247-869c-fe1b7ee9d74f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee sentBy() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.com', sentBy: 'bar@example.com' }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().includes('bar@example.com'));",
                  "err": {},
                  "uuid": "9a4b64bd-369d-4627-889b-c6cb99d16b08",
                  "parentUUID": "fb37b105-f9ac-4247-869c-fe1b7ee9d74f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f83c86bc-085b-4ffb-aaac-ce7249730e68",
                "f9a3d56e-2bb3-4707-884c-af758976ca5a",
                "9a4b64bd-369d-4627-889b-c6cb99d16b08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "172ce248-8145-49f5-b97c-ea2b73289f3f",
              "title": "role()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee role() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.role(ICalAttendeeRole.REQ));",
                  "err": {},
                  "uuid": "e3763797-f411-4b83-b418-a55f541d8584",
                  "parentUUID": "172ce248-8145-49f5-b97c-ea2b73289f3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee role() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar())).role(ICalAttendeeRole.REQ);\nassert.strictEqual(a.role(), 'REQ-PARTICIPANT');",
                  "err": {},
                  "uuid": "21bdd5dd-3ee0-433b-a2b8-f9c019846c5a",
                  "parentUUID": "172ce248-8145-49f5-b97c-ea2b73289f3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method empty",
                  "fullTitle": "ical-generator Attendee role() should throw error when method empty",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('');\n}, /Input must be one of the following: CHAIR, REQ-PARTICIPANT, OPT-PARTICIPANT, NON-PARTICIPANT/);",
                  "err": {},
                  "uuid": "ed550403-c7ad-4570-b338-8bda8e5d1634",
                  "parentUUID": "172ce248-8145-49f5-b97c-ea2b73289f3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee role() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.role('COOKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "d39f8852-83c5-492b-a2e5-34b67d262bd9",
                  "parentUUID": "172ce248-8145-49f5-b97c-ea2b73289f3f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee role() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    role: ICalAttendeeRole.NON\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NON-PARTICIPANT') > -1);",
                  "err": {},
                  "uuid": "66b73dbd-51bb-4f37-9916-c244e3e3c900",
                  "parentUUID": "172ce248-8145-49f5-b97c-ea2b73289f3f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e3763797-f411-4b83-b418-a55f541d8584",
                "21bdd5dd-3ee0-433b-a2b8-f9c019846c5a",
                "ed550403-c7ad-4570-b338-8bda8e5d1634",
                "d39f8852-83c5-492b-a2e5-34b67d262bd9",
                "66b73dbd-51bb-4f37-9916-c244e3e3c900"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02dda66f-25aa-49b8-9dd9-8c6bff8f773d",
              "title": "rsvp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee rsvp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.rsvp(null));\nassert.deepStrictEqual(a, a.rsvp(true));",
                  "err": {},
                  "uuid": "c749e720-e928-460d-a964-5548caf4c4dc",
                  "parentUUID": "02dda66f-25aa-49b8-9dd9-8c6bff8f773d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should also work with booleans",
                  "fullTitle": "ical-generator Attendee rsvp() setter should also work with booleans",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.rsvp(true);\nassert.strictEqual(a.rsvp(), true);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);",
                  "err": {},
                  "uuid": "9b0907c0-66ba-40ed-9004-2b07e83e0a8e",
                  "parentUUID": "02dda66f-25aa-49b8-9dd9-8c6bff8f773d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee rsvp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.rsvp(), null);\na.rsvp(false);\nassert.strictEqual(a.rsvp(), false);\na.rsvp(null);\nassert.strictEqual(a.rsvp(), null);",
                  "err": {},
                  "uuid": "ae0c5fe6-0ae1-49f6-9923-d46476819022",
                  "parentUUID": "02dda66f-25aa-49b8-9dd9-8c6bff8f773d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee rsvp() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    rsvp: true\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf(';RSVP=TRUE') > -1);",
                  "err": {},
                  "uuid": "4d9883a1-094b-411a-add4-69d441c333a3",
                  "parentUUID": "02dda66f-25aa-49b8-9dd9-8c6bff8f773d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c749e720-e928-460d-a964-5548caf4c4dc",
                "9b0907c0-66ba-40ed-9004-2b07e83e0a8e",
                "ae0c5fe6-0ae1-49f6-9923-d46476819022",
                "4d9883a1-094b-411a-add4-69d441c333a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.status(null));\nassert.deepStrictEqual(a, a.status(ICalAttendeeStatus.ACCEPTED));",
                  "err": {},
                  "uuid": "3736ee8e-ee61-4d93-bfae-93c1b23d4c83",
                  "parentUUID": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.status(), null);\na.status(ICalAttendeeStatus.ACCEPTED);\nassert.strictEqual(a.status(), 'ACCEPTED');\na.status(null);\nassert.strictEqual(a.status(), null);",
                  "err": {},
                  "uuid": "46891b55-4051-4548-beef-8d6090454547",
                  "parentUUID": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.status('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "430aef41-3e9b-4e9d-a989-5c9da64f4dc5",
                  "parentUUID": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee status() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.DECLINED }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('DECLINED') > -1);",
                  "err": {},
                  "uuid": "a9545592-e931-4e2d-908d-c1984562cc2e",
                  "parentUUID": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something too",
                  "fullTitle": "ical-generator Attendee status() should change something too",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'mail@example.com', status: ICalAttendeeStatus.NEEDSACTION }, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('NEEDS-ACTION') > -1);",
                  "err": {},
                  "uuid": "7cd088d3-4e5a-49f4-aff8-278abb98ce9c",
                  "parentUUID": "e86e9c7b-f541-40c4-a738-3cb16afc8a6e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3736ee8e-ee61-4d93-bfae-93c1b23d4c83",
                "46891b55-4051-4548-beef-8d6090454547",
                "430aef41-3e9b-4e9d-a989-5c9da64f4dc5",
                "a9545592-e931-4e2d-908d-c1984562cc2e",
                "7cd088d3-4e5a-49f4-aff8-278abb98ce9c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3efcaa82-e9f0-4e61-a323-5c98ef83cc53",
              "title": "type()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee type() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a.type(null), a);\nassert.deepStrictEqual(a.type(ICalAttendeeType.INDIVIDUAL), a);",
                  "err": {},
                  "uuid": "50abd166-2d5f-4cdb-bf52-14d9d38b7999",
                  "parentUUID": "3efcaa82-e9f0-4e61-a323-5c98ef83cc53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee type() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.type(), null);\na.type(ICalAttendeeType.ROOM);\nassert.strictEqual(a.type(), 'ROOM');\na.type(null);\nassert.strictEqual(a.type(), null);",
                  "err": {},
                  "uuid": "54abc124-a7b8-41ed-971e-0296367e129d",
                  "parentUUID": "3efcaa82-e9f0-4e61-a323-5c98ef83cc53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Attendee type() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    // @ts-ignore\n    a.type('DRINKING');\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "b1a65129-fe4c-4d6d-a94f-bf73a640015c",
                  "parentUUID": "3efcaa82-e9f0-4e61-a323-5c98ef83cc53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee type() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mailing-list@example.com',\n    type: ICalAttendeeType.GROUP\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('GROUP') > -1);",
                  "err": {},
                  "uuid": "570c2da7-6ae4-437e-a841-cf619776a1e1",
                  "parentUUID": "3efcaa82-e9f0-4e61-a323-5c98ef83cc53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "50abd166-2d5f-4cdb-bf52-14d9d38b7999",
                "54abc124-a7b8-41ed-971e-0296367e129d",
                "b1a65129-fe4c-4d6d-a94f-bf73a640015c",
                "570c2da7-6ae4-437e-a841-cf619776a1e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "35259052-6868-4c3e-906d-5bf4690134b1",
              "title": "delegatedTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedTo() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedTo(null));\nassert.deepStrictEqual(a, a.delegatedTo('foo@example.com'));",
                  "err": {},
                  "uuid": "863264dd-f701-4a03-a84d-2909962c91a8",
                  "parentUUID": "35259052-6868-4c3e-906d-5bf4690134b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedTo() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedTo(), null);\na.delegatedTo('foo@example.com');\nconst result = a.delegatedTo();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedTo(null);\nassert.strictEqual(a.delegatedTo(), null);",
                  "err": {},
                  "uuid": "9707d8bb-dbb5-4639-ad51-2e75fe19f8c2",
                  "parentUUID": "35259052-6868-4c3e-906d-5bf4690134b1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedTo() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedTo: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example') > -1);",
                  "err": {},
                  "uuid": "2614ee7a-9b7f-4e76-9269-538c516214a4",
                  "parentUUID": "35259052-6868-4c3e-906d-5bf4690134b1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "863264dd-f701-4a03-a84d-2909962c91a8",
                "9707d8bb-dbb5-4639-ad51-2e75fe19f8c2",
                "2614ee7a-9b7f-4e76-9269-538c516214a4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "308e751a-db80-4a80-ac63-72fcb9d5bf85",
              "title": "delegatedFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Attendee delegatedFrom() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.delegatedFrom(null));\nassert.deepStrictEqual(a, a.delegatedFrom('foo@example.com'));",
                  "err": {},
                  "uuid": "5528f701-3024-43cd-8bcc-6fc8ea22749d",
                  "parentUUID": "308e751a-db80-4a80-ac63-72fcb9d5bf85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Attendee delegatedFrom() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.strictEqual(a.delegatedFrom(), null);\na.delegatedFrom('foo@example.com');\nlet result = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.email(), 'foo@example.com');\na.delegatedFrom({\n    name: 'Max Mustermann',\n    email: 'max.mustermann@example.com'\n});\nresult = a.delegatedFrom();\nassert.ok(result);\nassert.strictEqual(result.name(), 'Max Mustermann');\nassert.strictEqual(result.email(), 'max.mustermann@example.com');\na.delegatedFrom(null);\nassert.strictEqual(a.delegatedFrom(), null);",
                  "err": {},
                  "uuid": "6f4fb133-6f67-422b-a2e8-32f92c58c840",
                  "parentUUID": "308e751a-db80-4a80-ac63-72fcb9d5bf85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Attendee delegatedFrom() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({\n    email: 'mail@example.com',\n    delegatedFrom: 'foo@example.com'\n}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.toString().indexOf('foo@example.com') > -1);",
                  "err": {},
                  "uuid": "84948fc1-5039-419e-88a6-5edf138dc54e",
                  "parentUUID": "308e751a-db80-4a80-ac63-72fcb9d5bf85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5528f701-3024-43cd-8bcc-6fc8ea22749d",
                "6f4fb133-6f67-422b-a2e8-32f92c58c840",
                "84948fc1-5039-419e-88a6-5edf138dc54e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ee43d4f-dca6-481f-bb45-a26fd37e59f5",
              "title": "delegatesTo()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesTo() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesTo({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "fce7efa1-2772-42a4-ae63-b0088e2c857c",
                  "parentUUID": "7ee43d4f-dca6-481f-bb45-a26fd37e59f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesTo() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesTo(attendee), attendee);",
                  "err": {},
                  "uuid": "eebf08cf-c2c5-4653-bd31-9d4bca3a2faf",
                  "parentUUID": "7ee43d4f-dca6-481f-bb45-a26fd37e59f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesTo() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const attendee = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar()))\n    .delegatesTo({ name: 'Cody' });\nassert.strictEqual(attendee.name(), 'Cody');",
                  "err": {},
                  "uuid": "c974fec9-5a9e-4530-b2af-b3bc27e19dc5",
                  "parentUUID": "7ee43d4f-dca6-481f-bb45-a26fd37e59f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fce7efa1-2772-42a4-ae63-b0088e2c857c",
                "eebf08cf-c2c5-4653-bd31-9d4bca3a2faf",
                "c974fec9-5a9e-4530-b2af-b3bc27e19dc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5235bac5-fc65-4a0c-8995-45ee2575950d",
              "title": "delegatesFrom()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a new ICalAttendee instance by default",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should return a new ICalAttendee instance by default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nassert.ok(a.delegatesFrom({}) instanceof ICalAttendee);",
                  "err": {},
                  "uuid": "87d9334b-ce01-4db8-b547-a148936d3c0e",
                  "parentUUID": "5235bac5-fc65-4a0c-8995-45ee2575950d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should reuse the same ICalAttendee instance if passed",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should reuse the same ICalAttendee instance if passed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({ name: 'Muh' }, event);\nassert.deepStrictEqual(new ICalAttendee({}, event).delegatesFrom(attendee), attendee);",
                  "err": {},
                  "uuid": "f750f4da-77d3-4cef-96d9-80e24d891e87",
                  "parentUUID": "5235bac5-fc65-4a0c-8995-45ee2575950d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Attendee delegatesFrom() should pass data to instance",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Zac' }, new ICalEvent({}, new ICalCalendar())).delegatesFrom({ name: 'Cody' });\nassert.strictEqual(a.name(), 'Cody');",
                  "err": {},
                  "uuid": "c55da3ad-e3e3-48c4-8fde-6264e085cc7c",
                  "parentUUID": "5235bac5-fc65-4a0c-8995-45ee2575950d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "87d9334b-ce01-4db8-b547-a148936d3c0e",
                "f750f4da-77d3-4cef-96d9-80e24d891e87",
                "c55da3ad-e3e3-48c4-8fde-6264e085cc7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fb43f713-5621-4a49-b189-51de91ec1a1c",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "works as expected",
                  "fullTitle": "ical-generator Attendee x() works as expected",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ email: 'foo@example.org' }, new ICalEvent({}, new ICalCalendar()));\nassert.deepStrictEqual(a, a.x('X-NUM-GUESTS', '5'));\nassert.ok(a.toString().includes('ATTENDEE;ROLE=REQ-PARTICIPANT;X-NUM-GUESTS=5:MAILTO:foo@example.org'));",
                  "err": {},
                  "uuid": "1991439b-a54a-4301-be95-b517e443568a",
                  "parentUUID": "fb43f713-5621-4a49-b189-51de91ec1a1c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1991439b-a54a-4301-be95-b517e443568a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "53afdf0d-cce8-4828-a630-88a79b1a0cf0",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Attendee toJSON() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\na.name('Max Mustermann');\na.delegatesTo('Moritz <moritz@example.com>');\nassert.deepStrictEqual(a.toJSON(), {\n    delegatedFrom: null,\n    delegatedTo: 'moritz@example.com',\n    email: null,\n    mailto: null,\n    sentBy: null,\n    name: 'Max Mustermann',\n    role: 'REQ-PARTICIPANT',\n    rsvp: null,\n    status: 'DELEGATED',\n    type: null,\n    x: []\n});",
                  "err": {},
                  "uuid": "6847f14d-7fc1-4a8f-ac22-f4c9f8f7b9ce",
                  "parentUUID": "53afdf0d-cce8-4828-a630-88a79b1a0cf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Attendee toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({}, new ICalEvent({}, new ICalCalendar()));\nnew ICalAttendee(a.toJSON(), new ICalEvent({}, new ICalCalendar()));",
                  "err": {},
                  "uuid": "2967c5b9-14fc-4d69-9536-5b1f05a5fc8a",
                  "parentUUID": "53afdf0d-cce8-4828-a630-88a79b1a0cf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6847f14d-7fc1-4a8f-ac22-f4c9f8f7b9ce",
                "2967c5b9-14fc-4d69-9536-5b1f05a5fc8a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b00f37ce-a59c-45ec-9cf5-1cd124a9cec3",
              "title": "generate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/attendee.ts",
              "file": "/test/attendee.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should throw an error without email",
                  "fullTitle": "ical-generator Attendee generate() should throw an error without email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalAttendee({ name: 'Testuser' }, new ICalEvent({}, new ICalCalendar()));\nassert.throws(function () {\n    a.toString();\n}, /`email`/);",
                  "err": {},
                  "uuid": "45c5e6fd-2f27-402b-8b05-a5bfc3d10c88",
                  "parentUUID": "b00f37ce-a59c-45ec-9cf5-1cd124a9cec3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "45c5e6fd-2f27-402b-8b05-a5bfc3d10c88"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8f904864-2669-40c2-b6eb-fa02f75fb37a",
          "title": "ical-generator Calendar",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
          "file": "/test/calendar.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "448cfc43-62a6-4a1d-87a9-fd45558a7909",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud load json export",
                  "fullTitle": "ical-generator Calendar constructor() shoud load json export",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    prodId: '//sebbo.net//ical-generator//EN',\n    method: ICalCalendarMethod.PUBLISH,\n    name: 'Test Calendar',\n    description: 'Hi, I am the description.',\n    timezone: null,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    source: 'http://example.com/my/original_source.ical',\n    scale: null,\n    ttl: null,\n    events: [],\n    x: []\n};\nconst cal = new ICalCalendar(data);\nassert.deepStrictEqual(cal.toJSON(), data);",
                  "err": {},
                  "uuid": "1013c70a-41aa-41ec-9b17-b88468ecf5b6",
                  "parentUUID": "448cfc43-62a6-4a1d-87a9-fd45558a7909",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1013c70a-41aa-41ec-9b17-b88468ecf5b6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
              "title": "prodId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar prodId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.prodId('//loremipsum.de//ical-tests//EN');\nassert.strictEqual(cal.prodId(), '//loremipsum.de//ical-tests//EN');",
                  "err": {},
                  "uuid": "015412f0-546f-4423-b487-91ac8ca78185",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar prodId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.prodId('//loremipsum.de//ical-tests//EN'));",
                  "err": {},
                  "uuid": "aca28a98-fa38-4991-96f6-e0847ba02daf",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformed",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when string misformed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    cal.prodId('enemenemuh!');\n}, /`prodId`/);",
                  "err": {},
                  "uuid": "5ec94403-7dbd-4e92-89a4-d650125fc335",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when not string/object",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when not string/object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId(256);\n}, /`prodid`/);",
                  "err": {},
                  "uuid": "211b8bc4-f0b3-495a-b564-2b43e217ab87",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no company given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no company given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        product: 'ical-tests'\n    });\n}, /`prodid\\.company`/);",
                  "err": {},
                  "uuid": "2a75d7e7-d204-4f9b-aa59-8ec4a32de26e",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when no product given",
                  "fullTitle": "ical-generator Calendar prodId() should throw error when no product given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    cal.prodId({\n        company: 'sebbo.net'\n    });\n}, /`prodid\\.product`/);",
                  "err": {},
                  "uuid": "6cffef43-a283-49c7-bb6e-6f153d1d4ed1",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #1",
                  "fullTitle": "ical-generator Calendar prodId() should change something #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//EN');",
                  "err": {},
                  "uuid": "45269351-29b4-4e7e-b857-4d827de8e364",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something #2",
                  "fullTitle": "ical-generator Calendar prodId() should change something #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().prodId({\n    company: 'loremipsum.com',\n    product: 'awesome-unit-tests',\n    language: 'DE'\n});\nassert.strictEqual(cal.prodId(), '//loremipsum.com//awesome-unit-tests//DE');",
                  "err": {},
                  "uuid": "693be63c-07a8-4834-8086-d4e964e0aeef",
                  "parentUUID": "bef5085c-fb50-4b89-9fcd-b7d3feb2d771",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "015412f0-546f-4423-b487-91ac8ca78185",
                "aca28a98-fa38-4991-96f6-e0847ba02daf",
                "5ec94403-7dbd-4e92-89a4-d650125fc335",
                "211b8bc4-f0b3-495a-b564-2b43e217ab87",
                "2a75d7e7-d204-4f9b-aa59-8ec4a32de26e",
                "6cffef43-a283-49c7-bb6e-6f153d1d4ed1",
                "45269351-29b4-4e7e-b857-4d827de8e364",
                "693be63c-07a8-4834-8086-d4e964e0aeef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4db643ed-ba12-4cd6-b2cb-a97deef5b28c",
              "title": "method()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar method() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.deepStrictEqual(c, c.method(null), 'method(null)');\nassert.deepStrictEqual(c, c.method(ICalCalendarMethod.PUBLISH), 'method(enum)');",
                  "err": {},
                  "uuid": "997a58ee-3f1d-4625-8fb4-80736d2e5c82",
                  "parentUUID": "4db643ed-ba12-4cd6-b2cb-a97deef5b28c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar method() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.strictEqual(c.method(), null);\nc.method(null);\nassert.strictEqual(c.method(), null);\nc.method(ICalCalendarMethod.PUBLISH);\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(null);\nassert.strictEqual(c.method(), null);",
                  "err": {},
                  "uuid": "7a4ddcab-b7c3-414e-a189-d2b859f3dc4c",
                  "parentUUID": "4db643ed-ba12-4cd6-b2cb-a97deef5b28c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Calendar method() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar();\nassert.throws(function () {\n    // @ts-ignore\n    c.method('KICK ASS');\n}, /Input must be one of the following: PUBLISH, REQUEST, REPLY, ADD, CANCEL, REFRESH, COUNTER, DECLINECOUNTER/);",
                  "err": {},
                  "uuid": "c8b202f5-345d-485b-a716-e4d4f521cf3a",
                  "parentUUID": "4db643ed-ba12-4cd6-b2cb-a97deef5b28c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar method() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCalendar({ method: ICalCalendarMethod.PUBLISH });\nassert.strictEqual(c.method(), 'PUBLISH');\nc.method(ICalCalendarMethod.ADD);\nassert.strictEqual(c.method(), 'ADD');",
                  "err": {},
                  "uuid": "6d14e5f9-0cde-458c-bf02-f1a073ea7ebc",
                  "parentUUID": "4db643ed-ba12-4cd6-b2cb-a97deef5b28c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "997a58ee-3f1d-4625-8fb4-80736d2e5c82",
                "7a4ddcab-b7c3-414e-a189-d2b859f3dc4c",
                "c8b202f5-345d-485b-a716-e4d4f521cf3a",
                "6d14e5f9-0cde-458c-bf02-f1a073ea7ebc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5503174-1be3-47d5-8c38-04ac448e600e",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.name(null));\nassert.deepStrictEqual(cal, cal.name('Testevents'));",
                  "err": {},
                  "uuid": "6dfc19d8-0b35-4fb9-937d-aebccc944087",
                  "parentUUID": "d5503174-1be3-47d5-8c38-04ac448e600e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.name(), null);\ncal.name('Testevents');\nassert.strictEqual(cal.name(), 'Testevents');\ncal.name(null);\nassert.strictEqual(cal.name(), null);",
                  "err": {},
                  "uuid": "1dcad01d-a50f-4593-b8c1-bda5a1952759",
                  "parentUUID": "d5503174-1be3-47d5-8c38-04ac448e600e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().name('Testevents');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.name(), 'Testevents');",
                  "err": {},
                  "uuid": "aed4d8e7-3b44-4d41-a60b-2f386ce1f5dd",
                  "parentUUID": "d5503174-1be3-47d5-8c38-04ac448e600e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6dfc19d8-0b35-4fb9-937d-aebccc944087",
                "1dcad01d-a50f-4593-b8c1-bda5a1952759",
                "aed4d8e7-3b44-4d41-a60b-2f386ce1f5dd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48a53370-673d-4c73-8921-3272153204e6",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.description(null));\nassert.deepStrictEqual(cal, cal.description('Testbeschreibung'));",
                  "err": {},
                  "uuid": "42691d73-efb3-43e5-add0-3f8ebb4f9254",
                  "parentUUID": "48a53370-673d-4c73-8921-3272153204e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.description(), null);\ncal.description('Testbeschreibung');\nassert.strictEqual(cal.description(), 'Testbeschreibung');\ncal.description(null);\nassert.strictEqual(cal.description(), null);",
                  "err": {},
                  "uuid": "504bc64f-60d1-45db-bd9a-c483131294b8",
                  "parentUUID": "48a53370-673d-4c73-8921-3272153204e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().description('Testbeschreibung');\ncal.createEvent({\n    start: new Date(),\n    summary: 'Example Event'\n});\nassert.ok(cal.description(), 'Testbeschreibung');",
                  "err": {},
                  "uuid": "d415cd6d-110f-47d3-bd0a-4739b1fc4aef",
                  "parentUUID": "48a53370-673d-4c73-8921-3272153204e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42691d73-efb3-43e5-add0-3f8ebb4f9254",
                "504bc64f-60d1-45db-bd9a-c483131294b8",
                "d415cd6d-110f-47d3-bd0a-4739b1fc4aef"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e342aea2-16be-4328-9692-e0190c079aa2",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.timezone('Europe/Berlin'));\nassert.deepStrictEqual(cal, cal.timezone(null));\nassert.deepStrictEqual(cal, cal.timezone({\n    name: 'Europe/Berlin',\n    generator: getVtimezoneComponent\n}));",
                  "err": {},
                  "uuid": "e975a1f7-a410-4936-8922-aa62de15da75",
                  "parentUUID": "e342aea2-16be-4328-9692-e0190c079aa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\ncal.timezone({ name: 'Europe/Berlin' });\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "4cb2e169-3af9-432f-8495-bb90cbf1b8a2",
                  "parentUUID": "e342aea2-16be-4328-9692-e0190c079aa2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Calendar timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/Berlin');\ncal.timezone('UTC');\nassert.strictEqual(cal.timezone(), null);",
                  "err": {},
                  "uuid": "fb8887e2-872e-4913-ba08-357d1a47d167",
                  "parentUUID": "e342aea2-16be-4328-9692-e0190c079aa2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e975a1f7-a410-4936-8922-aa62de15da75",
                "4cb2e169-3af9-432f-8495-bb90cbf1b8a2",
                "fb8887e2-872e-4913-ba08-357d1a47d167"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfb5998e-22e9-4700-92f9-dabe952f32e9",
              "title": "ttl()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar ttl() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal.ttl(60 * 60 * 24), cal);\nassert.deepStrictEqual(cal.ttl(moment.duration(2, 'days')), cal);\nassert.deepStrictEqual(cal.ttl(null), cal);",
                  "err": {},
                  "uuid": "31781ebc-c769-4ebe-a732-e4eea462eb81",
                  "parentUUID": "bfb5998e-22e9-4700-92f9-dabe952f32e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar ttl() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.ttl(), null);\ncal.ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "2ee48afa-efcc-41ae-ada1-218fa9562d55",
                  "parentUUID": "bfb5998e-22e9-4700-92f9-dabe952f32e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar ttl() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().ttl(86400);\nassert.strictEqual(cal.ttl(), 86400);",
                  "err": {},
                  "uuid": "35a20675-ca86-4b64-a602-17ae942a8afd",
                  "parentUUID": "bfb5998e-22e9-4700-92f9-dabe952f32e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "31781ebc-c769-4ebe-a732-e4eea462eb81",
                "2ee48afa-efcc-41ae-ada1-218fa9562d55",
                "35a20675-ca86-4b64-a602-17ae942a8afd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f3f1a5c5-017c-4c89-8887-79ae070289e8",
              "title": "source()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar source() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.source('http://example.com/my/original_source.ical'));",
                  "err": {},
                  "uuid": "9422ffab-0888-49d7-b519-31668801ade5",
                  "parentUUID": "f3f1a5c5-017c-4c89-8887-79ae070289e8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar source() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.source(), null);\ncal.source('http://example.com/my/original_source.ical');\nassert.strictEqual(cal.source(), 'http://example.com/my/original_source.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "f953c008-15df-4fe1-8066-63fe62ccfc4f",
                  "parentUUID": "f3f1a5c5-017c-4c89-8887-79ae070289e8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9422ffab-0888-49d7-b519-31668801ade5",
                "f953c008-15df-4fe1-8066-63fe62ccfc4f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2b2f57a8-9d68-4afd-811a-5bc231425eab",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.url('https://example.com/calendar.ical'));",
                  "err": {},
                  "uuid": "dabfbd9c-d834-45ba-8f65-b1bd33349a86",
                  "parentUUID": "2b2f57a8-9d68-4afd-811a-5bc231425eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.url(), null);\ncal.url('https://example.com/calendar.ical');\nassert.strictEqual(cal.url(), 'https://example.com/calendar.ical');\ncal.url(null);\nassert.strictEqual(cal.url(), null);",
                  "err": {},
                  "uuid": "87c840aa-c53d-45ee-b301-1bbec8b33b4b",
                  "parentUUID": "2b2f57a8-9d68-4afd-811a-5bc231425eab",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar url() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().url('https://example.com/calendar.ical');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.url(), 'https://example.com/calendar.ical');",
                  "err": {},
                  "uuid": "75e6b49d-2805-4967-9891-e6f80faf6715",
                  "parentUUID": "2b2f57a8-9d68-4afd-811a-5bc231425eab",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dabfbd9c-d834-45ba-8f65-b1bd33349a86",
                "87c840aa-c53d-45ee-b301-1bbec8b33b4b",
                "75e6b49d-2805-4967-9891-e6f80faf6715"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b06fe2be-6471-43e0-ba4f-9b4f6eace693",
              "title": "scale()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar scale() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.scale('gregorian'));",
                  "err": {},
                  "uuid": "2720a276-4797-412d-9f74-e97eccee772e",
                  "parentUUID": "b06fe2be-6471-43e0-ba4f-9b4f6eace693",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar scale() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.scale(), null);\ncal.scale('GREGORIAN');\nassert.strictEqual(cal.scale(), 'GREGORIAN');\ncal.scale(null);\nassert.strictEqual(cal.scale(), null);",
                  "err": {},
                  "uuid": "360acadb-d71c-43b5-98ad-b08af54101be",
                  "parentUUID": "b06fe2be-6471-43e0-ba4f-9b4f6eace693",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar scale() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().scale('gregorian');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.scale(), 'GREGORIAN');",
                  "err": {},
                  "uuid": "2114a348-ad40-44cd-8490-bf29119d771c",
                  "parentUUID": "b06fe2be-6471-43e0-ba4f-9b4f6eace693",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2720a276-4797-412d-9f74-e97eccee772e",
                "360acadb-d71c-43b5-98ad-b08af54101be",
                "2114a348-ad40-44cd-8490-bf29119d771c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0d2ff3ce-85ae-42b5-8786-90beec301af0",
              "title": "createEvent()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalEvent instance",
                  "fullTitle": "ical-generator Calendar createEvent() should return a ICalEvent instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.ok(cal.createEvent({}) instanceof ICalEvent);",
                  "err": {},
                  "uuid": "f1b3b8ff-4be2-4b6a-9d0f-2a661eb615bb",
                  "parentUUID": "0d2ff3ce-85ae-42b5-8786-90beec301af0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Calendar createEvent() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = cal.createEvent({ summary: 'Patch-Day' });\nassert.strictEqual(event.summary(), 'Patch-Day');",
                  "err": {},
                  "uuid": "8b09af13-adce-463b-b916-561e3ab67a0d",
                  "parentUUID": "0d2ff3ce-85ae-42b5-8786-90beec301af0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not require optional parameters",
                  "fullTitle": "ical-generator Calendar createEvent() should not require optional parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.doesNotThrow(function () {\n    new ICalCalendar().createEvent({\n        start: new Date(),\n        summary: 'Patch-Day'\n    });\n}, Error);",
                  "err": {},
                  "uuid": "bc7d0e8a-64c5-49d0-b77e-60dd539c59f0",
                  "parentUUID": "0d2ff3ce-85ae-42b5-8786-90beec301af0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f1b3b8ff-4be2-4b6a-9d0f-2a661eb615bb",
                "8b09af13-adce-463b-b916-561e3ab67a0d",
                "bc7d0e8a-64c5-49d0-b77e-60dd539c59f0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7df0bfc0-a552-4b9b-8f37-962e96801f98",
              "title": "events()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of events…",
                  "fullTitle": "ical-generator Calendar events() getter should return an array of events…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.events().length, 0);\nconst event = cal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.events()[0], event);",
                  "err": {},
                  "uuid": "5f385464-bda1-4005-891c-e30a8544a7d4",
                  "parentUUID": "7df0bfc0-a552-4b9b-8f37-962e96801f98",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add events and return this",
                  "fullTitle": "ical-generator Calendar events() setter should add events and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\nconst cal2 = cal.events([{ summary: 'Event A' }, { summary: 'Event B' }]);\nassert.strictEqual(cal.length(), 2);\nassert.deepStrictEqual(cal2, cal);",
                  "err": {},
                  "uuid": "82b32b76-ff22-4ec6-a227-448993f4f05f",
                  "parentUUID": "7df0bfc0-a552-4b9b-8f37-962e96801f98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f385464-bda1-4005-891c-e30a8544a7d4",
                "82b32b76-ff22-4ec6-a227-448993f4f05f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5daccc77-633d-4de9-85ab-c457deef28d4",
              "title": "clear()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should do the job",
                  "fullTitle": "ical-generator Calendar clear() should do the job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({});\nassert.strictEqual(cal.events().length, 1);\nassert.deepStrictEqual(cal.clear(), cal);\nassert.strictEqual(cal.events().length, 0);",
                  "err": {},
                  "uuid": "63d40e2b-db21-478e-8e9b-f7ab3039e0d5",
                  "parentUUID": "5daccc77-633d-4de9-85ab-c457deef28d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "63d40e2b-db21-478e-8e9b-f7ab3039e0d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8a9b119b-7034-48ae-9e6e-a862bd8d8d35",
              "title": "save()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return all public methods and save it",
                  "fullTitle": "ical-generator Calendar save() should return all public methods and save it",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.save(file, function () {\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n    assert.deepStrictEqual(cal, cal.save(file, function () {\n        assert.ok(existsSync(file));\n        unlinkSync(file);\n        done();\n    }));\n}));",
                  "err": {},
                  "uuid": "236fd3a2-603b-4696-bf58-b1b602d0f788",
                  "parentUUID": "8a9b119b-7034-48ae-9e6e-a862bd8d8d35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be usable with promises",
                  "fullTitle": "ical-generator Calendar save() should be usable with promises",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const file = join(tmpdir(), 'save.ical');\n    const cal = new ICalCalendar();\n    yield cal.save(file);\n    assert.ok(existsSync(file));\n    unlinkSync(file);\n});",
                  "err": {},
                  "uuid": "fa9fff36-0b82-4196-b8be-1c54675dea99",
                  "parentUUID": "8a9b119b-7034-48ae-9e6e-a862bd8d8d35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar save() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.save(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "939462d5-c63c-4b9c-b985-4c3e88e3649d",
                  "parentUUID": "8a9b119b-7034-48ae-9e6e-a862bd8d8d35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "236fd3a2-603b-4696-bf58-b1b602d0f788",
                "fa9fff36-0b82-4196-b8be-1c54675dea99",
                "939462d5-c63c-4b9c-b985-4c3e88e3649d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "511a07d2-be25-43a4-89b1-790e197a34c9",
              "title": "saveSync()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should save it",
                  "fullTitle": "ical-generator Calendar saveSync() should save it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);\ncal.saveSync(file);\nassert.ok(existsSync(file));\nunlinkSync(file);",
                  "err": {},
                  "uuid": "0aa85b32-f581-4cc3-9589-6869d93f8e57",
                  "parentUUID": "511a07d2-be25-43a4-89b1-790e197a34c9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when event invalid",
                  "fullTitle": "ical-generator Calendar saveSync() should throw error when event invalid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const file = join(tmpdir(), 'save_sync.ical');\nconst cal = new ICalCalendar();\ncal.createEvent({});\nassert.throws(function () {\n    cal.saveSync(file);\n}, /`start`/);",
                  "err": {},
                  "uuid": "24ca4ded-ba51-4e1a-9a85-1423a4240959",
                  "parentUUID": "511a07d2-be25-43a4-89b1-790e197a34c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0aa85b32-f581-4cc3-9589-6869d93f8e57",
                "24ca4ded-ba51-4e1a-9a85-1423a4240959"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a2f3805-a672-4dcb-a110-0b7bf20a8a0b",
              "title": "serve()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar serve() should work",
                  "timedOut": false,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar();\n    cal.createEvent({\n        start: new Date(),\n        end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n        summary: 'HTTP Calendar Event'\n    });\n    const port = yield getPortPromise();\n    return new Promise(done => {\n        const server = http.createServer((req, res) => {\n            cal.serve(res);\n        }).listen(port, function () {\n            function request(cb) {\n                // make request\n                const req = http.request({ port }, function (res) {\n                    let file = '';\n                    assert.strictEqual(res.headers['content-type'], 'text/calendar; charset=utf-8', 'Header: text/calendar; charset=utf-8');\n                    assert.strictEqual(res.headers['content-disposition'], 'attachment; filename=\"calendar.ics\"', 'Content-Disposition');\n                    res.setEncoding('utf8');\n                    res.on('data', function (chunk) {\n                        file += chunk;\n                    });\n                    res.on('end', function () {\n                        assert.strictEqual(file, cal.toString());\n                        cb();\n                    });\n                });\n                req.on('error', function (err) {\n                    assert.fail(err);\n                });\n                req.end();\n            }\n            request(() => {\n                request(() => {\n                    server.close(() => done());\n                });\n            });\n        });\n    });\n});",
                  "err": {},
                  "uuid": "a6b395b0-9c61-4d0a-9f94-546649667fdd",
                  "parentUUID": "0a2f3805-a672-4dcb-a110-0b7bf20a8a0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a6b395b0-9c61-4d0a-9f94-546649667fdd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b72189f5-d2f6-4531-a1d9-b75468eeca39",
              "title": "toBlob()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toBlob() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Blob Calendar Event'\n            }\n        ]\n    });\n    const blob = cal.toBlob();\n    assert.ok(blob instanceof Blob, 'instanceof Blob');\n    assert.ok(blob.size > 0, 'blob is filled');\n    assert.strictEqual(blob.type, 'text/calendar');\n});",
                  "err": {},
                  "uuid": "1c107dd4-449e-4daa-ae07-1a56dac25319",
                  "parentUUID": "b72189f5-d2f6-4531-a1d9-b75468eeca39",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c107dd4-449e-4daa-ae07-1a56dac25319"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d2471c4-d9d4-4979-89de-dbc374452e88",
              "title": "toURL()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toURL() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = new ICalCalendar({\n        events: [\n            {\n                start: new Date(),\n                end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n                summary: 'Calendar URL Event'\n            }\n        ]\n    });\n    const url = cal.toURL();\n    console.log(url);\n    assert.strictEqual(typeof url, 'string');\n    assert.ok(url.length > 0, 'url is not empty');\n});",
                  "err": {},
                  "uuid": "44289568-679f-466e-abdb-7aacc50e624f",
                  "parentUUID": "1d2471c4-d9d4-4979-89de-dbc374452e88",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "44289568-679f-466e-abdb-7aacc50e624f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c8d29336-7efc-4c48-b297-017ca1a7900b",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Calendar x() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "af2a3304-2a93-4338-9dba-4a5c915d0842",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value strings",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x('X-FOO', 'bar'));\nassert.deepEqual(cal.x(), [{\n        key: 'X-FOO',\n        value: 'bar'\n    }]);\nassert.deepStrictEqual(cal, cal.x('X-LOREM', 'ipsum'));\nassert.deepEqual(cal.x(), [\n    { key: 'X-FOO', value: 'bar' },\n    { key: 'X-LOREM', value: 'ipsum' }\n]);\nassert.throws(() => {\n    cal.x('LOREM', 'ipsum');\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x('X-LOREM', 1337);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x(5, 'ipsum');\n});",
                  "err": {},
                  "uuid": "a70abc84-aec7-4178-901e-6f29b6935029",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value array",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-FOO', value: 'bar' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x([{ key: 'X-LOREM', value: 'ipsum' }]));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x([{ key: 'LOREM', value: 'ipsum' }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 'X-LOREM', value: 1337 }]);\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x([{ key: 5, value: 'ipsum' }]);\n});",
                  "err": {},
                  "uuid": "cee83f6c-57ad-468f-ab2c-e8c63780f6c9",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with key and value object",
                  "fullTitle": "ical-generator Calendar x() setter should work with key and value object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepStrictEqual(cal, cal.x({ 'X-FOO': 'bar' }));\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'bar' }]);\nassert.deepStrictEqual(cal, cal.x({ 'X-LOREM': 'ipsum' }));\nassert.deepEqual(cal.x(), [{ key: 'X-LOREM', value: 'ipsum' }]);\nassert.throws(() => {\n    cal.x({ 'LOREM': 'ipsum' });\n});\nassert.throws(() => {\n    // @ts-ignore\n    cal.x({ 'X-LOREM': 1337 });\n});\nassert.throws(() => {\n    cal.x({ 5: 'ipsum' });\n});",
                  "err": {},
                  "uuid": "866f0fbf-aeb9-4310-b3cd-1de2fd47501d",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Calendar x() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.deepEqual(cal.x(), []);\ncal.x('X-FOO', 'BAR');\nassert.deepEqual(cal.x(), [{ key: 'X-FOO', value: 'BAR' }]);\ncal.x({});\nassert.deepEqual(cal.x().length, 0);",
                  "err": {},
                  "uuid": "f5f90689-f969-4868-a1c4-10510d02eb73",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Calendar x() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar().x('X-FOO', 'BAR');\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.ok(cal.toString().includes('X-FOO'));",
                  "err": {},
                  "uuid": "a9608036-16d3-4716-8cd6-bc2e27a5b4bb",
                  "parentUUID": "c8d29336-7efc-4c48-b297-017ca1a7900b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "af2a3304-2a93-4338-9dba-4a5c915d0842",
                "a70abc84-aec7-4178-901e-6f29b6935029",
                "cee83f6c-57ad-468f-ab2c-e8c63780f6c9",
                "866f0fbf-aeb9-4310-b3cd-1de2fd47501d",
                "f5f90689-f969-4868-a1c4-10510d02eb73",
                "a9608036-16d3-4716-8cd6-bc2e27a5b4bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fe26774e-6197-4d63-9806-7eb969a927f5",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar toJSON() should work",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst cal = new ICalCalendar();\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nassert.strictEqual((_a = cal.toJSON().events) === null || _a === void 0 ? void 0 : _a.length, 0);",
                  "err": {},
                  "uuid": "3e63076d-d6a0-495d-8fcf-3f40e837da1f",
                  "parentUUID": "fe26774e-6197-4d63-9806-7eb969a927f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with params",
                  "fullTitle": "ical-generator Calendar toJSON() should work with params",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + (1000 * 60 * 60)),\n    summary: 'HTTP Calendar Event',\n    x: [\n        { key: 'X-FOO', value: 'bar' },\n        { key: 'X-LOREM', value: 'ipsum' }\n    ]\n});\nconst prodId = cal.toJSON().prodId;\nassert.strictEqual(typeof prodId, 'string');\nassert.ok(prodId.length > 0);\nconst events = cal.toJSON().events;\nassert.strictEqual(events === null || events === void 0 ? void 0 : events.length, 1);\nassert.deepEqual(events[0].x, [\n    { 'key': 'X-FOO', 'value': 'bar' },\n    { 'key': 'X-LOREM', 'value': 'ipsum' }\n]);",
                  "err": {},
                  "uuid": "050a3fb7-9875-4e29-b55d-fdf93e72af13",
                  "parentUUID": "fe26774e-6197-4d63-9806-7eb969a927f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Calendar toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCalendar();\nnew ICalCalendar(a.toJSON());",
                  "err": {},
                  "uuid": "ce0fb435-2814-44f7-9401-07eb39d14771",
                  "parentUUID": "fe26774e-6197-4d63-9806-7eb969a927f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e63076d-d6a0-495d-8fcf-3f40e837da1f",
                "050a3fb7-9875-4e29-b55d-fdf93e72af13",
                "ce0fb435-2814-44f7-9401-07eb39d14771"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "92f0ab8d-8084-4f07-9474-e512c7f956ae",
              "title": "length()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work",
                  "fullTitle": "ical-generator Calendar length() should work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nassert.strictEqual(cal.length(), 0);\ncal.createEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n});\nassert.strictEqual(cal.length(), 1);",
                  "err": {},
                  "uuid": "6ecc44c5-c5dc-4044-b250-af6b2c22abff",
                  "parentUUID": "92f0ab8d-8084-4f07-9474-e512c7f956ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6ecc44c5-c5dc-4044-b250-af6b2c22abff"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/calendar.ts",
              "file": "/test/calendar.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should include the URL",
                  "fullTitle": "ical-generator Calendar toString() should include the URL",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.url('https://sebbo.net/foo');\nassert.ok(cal.toString().indexOf('URL:https://sebbo.net/foo') > -1);",
                  "err": {},
                  "uuid": "c5733d3a-3650-41ff-b16d-d708e7066674",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the method",
                  "fullTitle": "ical-generator Calendar toString() should include the method",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.method(ICalCalendarMethod.REFRESH);\nassert.ok(cal.toString().indexOf('METHOD:REFRESH') > -1);",
                  "err": {},
                  "uuid": "05beb201-ad1a-497e-b382-32fdc0c56413",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the name",
                  "fullTitle": "ical-generator Calendar toString() should include the name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.name('TEST');\nassert.ok(cal.toString().indexOf('NAME:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-CALNAME:TEST') > -1);",
                  "err": {},
                  "uuid": "95235650-bf8b-46dc-a0fa-16d5d76888b3",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the description",
                  "fullTitle": "ical-generator Calendar toString() should include the description",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.description('TEST');\nassert.ok(cal.toString().indexOf('X-WR-CALDESC:TEST') > -1);",
                  "err": {},
                  "uuid": "a0326a9a-79ba-413f-a8d0-d92e2740ebff",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the timezone",
                  "fullTitle": "ical-generator Calendar toString() should include the timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone('TEST');\nassert.ok(cal.toString().indexOf('TIMEZONE-ID:TEST') > -1);\nassert.ok(cal.toString().indexOf('X-WR-TIMEZONE:TEST') > -1);",
                  "err": {},
                  "uuid": "9ab111fb-1dfd-4100-8bb9-4857e636c4b9",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the source",
                  "fullTitle": "ical-generator Calendar toString() should include the source",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.source('http://foo.bar.example.com/ical.cal');\nassert.ok(cal.toString().includes('http://foo.bar.example.com/ical.cal'));",
                  "err": {},
                  "uuid": "8e33f267-ff01-40c5-be3a-124af5fe3b0b",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include VTimezone objects if generator was supplied",
                  "fullTitle": "ical-generator Calendar toString() should include VTimezone objects if generator was supplied",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'Europe/Berlin', generator: getVtimezoneComponent });\ncal.createEvent({\n    start: new Date(),\n    timezone: 'Europe/London'\n});\nassert.ok(cal.toString().includes('BEGIN:VTIMEZONE\\r\\n'), 'BEGIN:VTIMEZONE');\nassert.ok(cal.toString().includes('TZID:Europe/Berlin\\r\\n'), 'TZID:Europe/Berlin');\nassert.ok(cal.toString().includes('TZID:Europe/London\\r\\n'), 'TZID:Europe/London');",
                  "err": {},
                  "uuid": "8a359584-f8d0-4608-a6e7-c4b0264d75be",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should also work if VTimezone was not found",
                  "fullTitle": "ical-generator Calendar toString() should also work if VTimezone was not found",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: 'FOO', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:Foo\\r\\n'));",
                  "err": {},
                  "uuid": "30bd92b4-e0de-4b8e-a7ca-5843120e9111",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should ignore global timezone ids",
                  "fullTitle": "ical-generator Calendar toString() should ignore global timezone ids",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.timezone({ name: '/Europe/Berlin', generator: getVtimezoneComponent });\nassert.ok(!cal.toString().includes('TZID:/Europe/Berlin\\r\\n'));",
                  "err": {},
                  "uuid": "49bae2dd-1709-4bb4-b90c-bef9d9754a7a",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include the ttl",
                  "fullTitle": "ical-generator Calendar toString() should include the ttl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\ncal.ttl(moment.duration(3, 'days'));\nassert.ok(cal.toString().indexOf('REFRESH-INTERVAL;VALUE=DURATION:P3D') > -1);\nassert.ok(cal.toString().indexOf('X-PUBLISHED-TTL:P3D') > -1);",
                  "err": {},
                  "uuid": "9b3723f5-ad73-4baa-b764-87f6c8e9cbfb",
                  "parentUUID": "9bd894ce-c97b-45ab-83c7-6a284aa8f89f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c5733d3a-3650-41ff-b16d-d708e7066674",
                "05beb201-ad1a-497e-b382-32fdc0c56413",
                "95235650-bf8b-46dc-a0fa-16d5d76888b3",
                "a0326a9a-79ba-413f-a8d0-d92e2740ebff",
                "9ab111fb-1dfd-4100-8bb9-4857e636c4b9",
                "8e33f267-ff01-40c5-be3a-124af5fe3b0b",
                "8a359584-f8d0-4608-a6e7-c4b0264d75be",
                "30bd92b4-e0de-4b8e-a7ca-5843120e9111",
                "49bae2dd-1709-4bb4-b90c-bef9d9754a7a",
                "9b3723f5-ad73-4baa-b764-87f6c8e9cbfb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5a205a25-6a70-422a-9ae3-f73e23b427df",
          "title": "ical-generator Cases",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/cases.ts",
          "file": "/test/cases.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "case #1",
              "fullTitle": "ical-generator Cases case #1",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_01.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "389f87c2-9312-4b4d-a43b-fa49ce4d6c6a",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #2",
              "fullTitle": "ical-generator Cases case #2",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: 'localhost',\n        transparency: ICalEventTransparency.OPAQUE,\n        description: {\n            plain: 'Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop',\n            html: '<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua.\\nbeep boop</p>'\n        }\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_02.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "023685a1-a964-4dd7-8f2b-d31b68c31411",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #3",
              "fullTitle": "ical-generator Cases case #3",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({\n        method: ICalCalendarMethod.ADD,\n        prodId: '//sebbo.net//ical-generator.tests//EN'\n    });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        location: {\n            title: 'Apple Store Kurfürstendamm',\n            address: 'Kurfürstendamm 26, 10719 Berlin, Deutschland',\n            radius: 141.1751386318387,\n            geo: { lat: 52.503630, lon: 13.328650 }\n        },\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        status: ICalEventStatus.CONFIRMED,\n        categories: [{ name: 'WORK' }],\n        url: 'http://sebbo.net/',\n        attachments: [\n            'https://files.sebbo.net/calendar/attachments/foo'\n        ]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_03.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "7a9e6e29-f2c2-4e3a-bab8-89328942d033",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #4 (repeating)",
              "fullTitle": "ical-generator Cases case #4 (repeating)",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.timezone({ name: null, generator: getVtimezoneComponent });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                exclude: new Date('Fr Oct 06 2013 23:15:00 UTC')\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30'),\n            end: new Date('Fr Oct 06 2013 23:15:00'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            timezone: 'Europe/Berlin',\n            summary: 'repeating by day, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by 3 weeks, until 2014',\n            repeating: {\n                freq: ICalEventRepeatingFreq.WEEKLY,\n                interval: 3,\n                until: new Date('We Jan 01 2014 00:00:00 UTC')\n            }\n        }\n    ]);\n    assert.strictEqual(cal.toString(), yield fs.readFile(resultDir + '/generate_04.ics', 'utf8'), 'first check');\n    // Wount be same, as reference to VTimezone generator is not exported\n    // assert.strictEqual(ical(cal.toJSON()).toString(), string);\n    cal.timezone(null);\n    assert.strictEqual(ical(cal.toJSON()).toString(), cal.toString(), 'second check');\n});",
              "err": {},
              "uuid": "d3887313-be82-426e-96a7-aaa3583874f0",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #5 (floating)",
              "fullTitle": "ical-generator Cases case #5 (floating)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '1',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'floating',\n        floating: true\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_05.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "eb23ab6e-8c77-494c-ae17-8a20868a81eb",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #6 (attendee with simple delegation and alarm)",
              "fullTitle": "ical-generator Cases case #6 (attendee with simple delegation and alarm)",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN', method: ICalCalendarMethod.PUBLISH });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        allDay: true,\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: 'Sebastian Pekarek <mail@sebbo.net>',\n        attendees: [\n            {\n                name: 'Smith, Matt; (\"Sales\")',\n                email: 'matt@example.com',\n                delegatesTo: {\n                    name: 'John',\n                    email: 'john@example.com',\n                    status: ICalAttendeeStatus.ACCEPTED\n                }\n            }\n        ],\n        alarms: [\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 10,\n                repeat: 2,\n                interval: 60\n            },\n            {\n                type: ICalAlarmType.display,\n                trigger: 60 * 60,\n                description: 'I\\'m a reminder :)'\n            }\n        ],\n        status: ICalEventStatus.CONFIRMED,\n        url: 'http://sebbo.net/'\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_06.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "c18a6927-990b-409e-89c7-3206d3a9759a",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #7 (repeating: byDay, byMonth, byMonthDay)",
              "fullTitle": "ical-generator Cases case #7 (repeating: byDay, byMonth, byMonthDay)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.events([\n        {\n            id: '1',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating by month',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                byMonth: [1, 4, 7, 10]\n            }\n        },\n        {\n            id: '2',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on Mo/We/Fr, twice',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                count: 2,\n                byDay: [ICalWeekday.MO, ICalWeekday.WE, ICalWeekday.FR]\n            }\n        },\n        {\n            id: '3',\n            start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n            end: new Date('Fr Oct 06 2013 23:15:00 UTC'),\n            stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n            summary: 'repeating on 1st and 15th',\n            repeating: {\n                freq: ICalEventRepeatingFreq.DAILY,\n                interval: 1,\n                byMonthDay: [1, 15]\n            }\n        }\n    ]);\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_07.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "cf3ad4b0-a497-4a39-9e29-6ad10fce3b9e",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #8",
              "fullTitle": "ical-generator Cases case #8",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        created: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        lastModified: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Simple Event',\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_08.ics', 'utf8'));\n    assert.strictEqual(ical(cal.toJSON()).toString(), string);\n});",
              "err": {},
              "uuid": "36aa7d54-2833-4995-a798-7b2ea115ae02",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "case #9 (organizer with mailto)",
              "fullTitle": "ical-generator Cases case #9 (organizer with mailto)",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "return __awaiter(this, void 0, void 0, function* () {\n    const cal = ical({ method: ICalCalendarMethod.REQUEST, prodId: '//sebbo.net//ical-generator.tests//EN' });\n    cal.createEvent({\n        id: '123',\n        start: new Date('Fr Oct 04 2013 22:39:30 UTC'),\n        end: new Date('Fr Oct 04 2013 23:15:00 UTC'),\n        stamp: new Date('Fr Oct 04 2013 23:34:53 UTC'),\n        summary: 'Sample Event',\n        organizer: {\n            name: 'Sebastian Pekarek',\n            email: 'mail@sebbo.net',\n            mailto: 'mail2@example2.com'\n        },\n        attendees: [{\n                type: ICalAttendeeType.INDIVIDUAL,\n                role: ICalAttendeeRole.REQ,\n                status: ICalAttendeeStatus.NEEDSACTION,\n                email: 'mail@example.com',\n                rsvp: true\n            }]\n    });\n    const string = cal.toString();\n    assert.strictEqual(string, yield fs.readFile(resultDir + '/generate_09.ics', 'utf8'), 'toString');\n    assert.strictEqual(ical(cal.toJSON()).toString(), string, 'toJSON / toString()');\n});",
              "err": {},
              "uuid": "2ed54c2e-6927-4f8b-9d68-6a394958b833",
              "parentUUID": "5a205a25-6a70-422a-9ae3-f73e23b427df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "389f87c2-9312-4b4d-a43b-fa49ce4d6c6a",
            "023685a1-a964-4dd7-8f2b-d31b68c31411",
            "7a9e6e29-f2c2-4e3a-bab8-89328942d033",
            "d3887313-be82-426e-96a7-aaa3583874f0",
            "eb23ab6e-8c77-494c-ae17-8a20868a81eb",
            "c18a6927-990b-409e-89c7-3206d3a9759a",
            "cf3ad4b0-a497-4a39-9e29-6ad10fce3b9e",
            "36aa7d54-2833-4995-a798-7b2ea115ae02",
            "2ed54c2e-6927-4f8b-9d68-6a394958b833"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3d96aa12-58e5-4114-8c1f-1c22bbc2b599",
          "title": "ical-generator Category",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
          "file": "/test/category.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f1f66e48-36fd-46f8-b1fd-2157da24101e",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should ignore unknown data attributes",
                  "fullTitle": "ical-generator Category constructor() should ignore unknown data attributes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalCategory({\n    // @ts-ignore\n    unknown: true,\n    name: 'FOO'\n});\nassert.strictEqual(a.name(), 'FOO');",
                  "err": {},
                  "uuid": "f114cf89-9b41-4cd9-933d-dcf5630d8f82",
                  "parentUUID": "f1f66e48-36fd-46f8-b1fd-2157da24101e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f114cf89-9b41-4cd9-933d-dcf5630d8f82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3f45e9de-a72d-48ed-a822-788b75ac9f1b",
              "title": "name()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Category name() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.deepStrictEqual(c, c.name('FOO'));\nassert.deepStrictEqual(c, c.name(null));",
                  "err": {},
                  "uuid": "f2b56a83-c34c-421c-9129-217bb69dbe60",
                  "parentUUID": "3f45e9de-a72d-48ed-a822-788b75ac9f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Category name() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.strictEqual(c.name(), null);\nc.name('HELLO-WORLD');\nassert.strictEqual(c.name(), 'HELLO-WORLD');",
                  "err": {},
                  "uuid": "49816538-4bcb-4913-8bbf-f98bcf09393b",
                  "parentUUID": "3f45e9de-a72d-48ed-a822-788b75ac9f1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Category name() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'BANANA' });\nassert.ok(c.toString().indexOf('BANANA') > -1);",
                  "err": {},
                  "uuid": "e59d8afb-5ab8-492b-9c81-29218f638a16",
                  "parentUUID": "3f45e9de-a72d-48ed-a822-788b75ac9f1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f2b56a83-c34c-421c-9129-217bb69dbe60",
                "49816538-4bcb-4913-8bbf-f98bcf09393b",
                "e59d8afb-5ab8-492b-9c81-29218f638a16"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aba3ae79-4df9-471f-a973-e90abbeebd98",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should contain valued previously set",
                  "fullTitle": "ical-generator Category toJSON() should contain valued previously set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({ name: 'FOOBAR' });\nassert.deepStrictEqual(c.toJSON(), { name: 'FOOBAR' });",
                  "err": {},
                  "uuid": "3e1ae449-dc9f-4a0f-aa44-b8f6d5289614",
                  "parentUUID": "aba3ae79-4df9-471f-a973-e90abbeebd98",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e1ae449-dc9f-4a0f-aa44-b8f6d5289614"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9b6d838-6e41-4a0b-996c-0cc397d0da29",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/category.ts",
              "file": "/test/category.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without name",
                  "fullTitle": "ical-generator Category toString() shoult throw an error without name",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const c = new ICalCategory({});\nassert.throws(function () {\n    c.toString();\n}, /`name`/);",
                  "err": {},
                  "uuid": "abb01044-a472-4295-b796-d18eba0bec08",
                  "parentUUID": "a9b6d838-6e41-4a0b-996c-0cc397d0da29",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "abb01044-a472-4295-b796-d18eba0bec08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "076f5a11-0c6c-4857-90cc-9072465ad168",
          "title": "ical-generator Event",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
          "file": "/test/event.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3639fa4c-c3ae-405a-9b25-61687e83b20a",
              "title": "constructor()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoud set data from constructor",
                  "fullTitle": "ical-generator Event constructor() shoud set data from constructor",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n    id: 'FOO',\n    sequence: 1,\n    start: new Date().toJSON(),\n    end: new Date().toJSON(),\n    recurrenceId: new Date().toJSON(),\n    timezone: 'Europe/Berlin',\n    stamp: new Date().toJSON(),\n    allDay: true,\n    floating: false,\n    repeating: null,\n    summary: 'Hello.',\n    location: null,\n    description: null,\n    organizer: null,\n    attendees: [],\n    alarms: [],\n    categories: [],\n    status: null,\n    busystatus: ICalEventBusyStatus.BUSY,\n    priority: 5,\n    url: 'https://github.com/sebbo2002/ical-generator',\n    attachments: [\n        'https://files.sebbo.net/calendar/attachments/foo'\n    ],\n    transparency: ICalEventTransparency.TRANSPARENT,\n    created: new Date().toJSON(),\n    lastModified: new Date().toJSON(),\n    class: null,\n    x: []\n};\nconst event = new ICalEvent(data, new ICalCalendar());\nassert.deepStrictEqual(event.toJSON(), data);",
                  "err": {},
                  "uuid": "61e580c2-2b0d-4b07-9509-ec3ac0c25836",
                  "parentUUID": "3639fa4c-c3ae-405a-9b25-61687e83b20a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "shouldn't work without calendar reference",
                  "fullTitle": "ical-generator Event constructor() shouldn't work without calendar reference",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    // @ts-ignore\n    new ICalEvent({ summary: 'Testevent' }, null);\n}, /`calendar`/);",
                  "err": {},
                  "uuid": "f5296f85-da35-4df3-be0e-98fbdcf575a5",
                  "parentUUID": "3639fa4c-c3ae-405a-9b25-61687e83b20a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "61e580c2-2b0d-4b07-9509-ec3ac0c25836",
                "f5296f85-da35-4df3-be0e-98fbdcf575a5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5302eba-ff4c-4b6b-9f57-4cfbc170e517",
              "title": "id()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event id() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.id(1048));",
                  "err": {},
                  "uuid": "cc0f1542-a107-4b82-87a7-ce513add8c43",
                  "parentUUID": "d5302eba-ff4c-4b6b-9f57-4cfbc170e517",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event id() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).id(512);\nassert.strictEqual(event.id(), '512');\nevent.id('xyz');\nassert.strictEqual(event.id(), 'xyz');",
                  "err": {},
                  "uuid": "08c6ebf2-f1f7-4a97-8bba-ae248f2b3f54",
                  "parentUUID": "d5302eba-ff4c-4b6b-9f57-4cfbc170e517",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cc0f1542-a107-4b82-87a7-ce513add8c43",
                "08c6ebf2-f1f7-4a97-8bba-ae248f2b3f54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cd2d3ac7-5ee7-4f40-b169-8ce1f806a0a4",
              "title": "uid()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event uid() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.uid(1048));",
                  "err": {},
                  "uuid": "02658ebd-27a0-41d4-af22-eaf68bd2a7d1",
                  "parentUUID": "cd2d3ac7-5ee7-4f40-b169-8ce1f806a0a4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event uid() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).uid(512);\nassert.strictEqual(event.uid(), '512');\nevent.id('xyz');\nassert.strictEqual(event.uid(), 'xyz');",
                  "err": {},
                  "uuid": "1ebe4e27-106c-4da8-bb60-a8d3a000870e",
                  "parentUUID": "cd2d3ac7-5ee7-4f40-b169-8ce1f806a0a4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "02658ebd-27a0-41d4-af22-eaf68bd2a7d1",
                "1ebe4e27-106c-4da8-bb60-a8d3a000870e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e43cd50-05c1-4a5f-bd5b-24613a30e6b5",
              "title": "sequence()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event sequence() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.sequence(1));",
                  "err": {},
                  "uuid": "571c7de7-d495-4b9c-93b0-7d8e563bbcf4",
                  "parentUUID": "9e43cd50-05c1-4a5f-bd5b-24613a30e6b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event sequence() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(1048);\nassert.strictEqual(event.sequence(), 1048);",
                  "err": {},
                  "uuid": "4dff0b75-323a-4174-8ba9-ffe8f0f1bc2c",
                  "parentUUID": "9e43cd50-05c1-4a5f-bd5b-24613a30e6b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when sequence is not valid",
                  "fullTitle": "ical-generator Event sequence() setter should throw error when sequence is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.sequence('hello');\n}, /`sequence`/);",
                  "err": {},
                  "uuid": "598bd6f2-3ddb-4d8f-80c4-a891cf9990da",
                  "parentUUID": "9e43cd50-05c1-4a5f-bd5b-24613a30e6b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with 0",
                  "fullTitle": "ical-generator Event sequence() setter should work with 0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar()).sequence(12);\nassert.strictEqual(event.sequence(), 12);\nevent.sequence(0);\nassert.strictEqual(event.sequence(), 0);",
                  "err": {},
                  "uuid": "c4b2200d-9122-4bc5-aa0c-83b4e7581c06",
                  "parentUUID": "9e43cd50-05c1-4a5f-bd5b-24613a30e6b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "571c7de7-d495-4b9c-93b0-7d8e563bbcf4",
                "4dff0b75-323a-4174-8ba9-ffe8f0f1bc2c",
                "598bd6f2-3ddb-4d8f-80c4-a891cf9990da",
                "c4b2200d-9122-4bc5-aa0c-83b4e7581c06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c2f7015-c0bb-461e-9e24-a3b392653705",
              "title": "start()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event start() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.start(now);\nassert.strictEqual(event.start(), now);",
                  "err": {},
                  "uuid": "1a0aa9d6-fe51-494f-9420-9756918e3547",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event start() setter should parse string if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "d33513ac-9875-45b5-80e9-bca9dcb24115",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event start() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.start(date));\nassert.deepStrictEqual(event.start(), date);",
                  "err": {},
                  "uuid": "3503aedd-00e5-479c-ae3c-72f9bcf3e3dd",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when start time is not a Date",
                  "fullTitle": "ical-generator Event start() setter should throw error when start time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.start(3);\n}, /`start`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(null);\n}, /`start`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.start(NaN);\n}, /`start`/, 'NaN');\nassert.throws(function () {\n    event.start(new Date('hallo'));\n}, /`start`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "0068fa8e-06e2-4c14-9194-103fb29df3af",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event start() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .end(end)\n    .start(start);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "daa13c37-af36-4213-b82e-a4fb94bd343e",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event start() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.start(moment()));\nassert.deepStrictEqual(event, event.start(new Date()));",
                  "err": {},
                  "uuid": "8c6c9747-5629-4b6d-a14e-4e9b0df46732",
                  "parentUUID": "3c2f7015-c0bb-461e-9e24-a3b392653705",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a0aa9d6-fe51-494f-9420-9756918e3547",
                "d33513ac-9875-45b5-80e9-bca9dcb24115",
                "3503aedd-00e5-479c-ae3c-72f9bcf3e3dd",
                "0068fa8e-06e2-4c14-9194-103fb29df3af",
                "daa13c37-af36-4213-b82e-a4fb94bd343e",
                "8c6c9747-5629-4b6d-a14e-4e9b0df46732"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
              "title": "end()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event end() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.end(now);\nassert.deepStrictEqual(event.end(), now);",
                  "err": {},
                  "uuid": "7aae1b83-6841-4ac7-a7b4-690f0f59c99c",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event end() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "50a592e9-423d-476a-abe5-72a141229c1e",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event end() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.end(date));\nassert.deepStrictEqual(event.end(), date);",
                  "err": {},
                  "uuid": "878f87d0-2d34-4d81-8cde-ef532234b06f",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event end() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.end(3);\n}, /`end`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.end(NaN);\n}, /`end`/, 'NaN');\nassert.throws(function () {\n    event.end(new Date('hallo'));\n}, /`end`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "14c29a5c-297e-4f5c-a561-c37161e3f444",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should flip start and end if necessary",
                  "fullTitle": "ical-generator Event end() setter should flip start and end if necessary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = moment().add(5, 'minutes');\nconst end = moment();\nconst event = new ICalEvent({}, new ICalCalendar())\n    .start(start)\n    .end(end);\nassert.deepStrictEqual(event.start(), end);\nassert.deepStrictEqual(event.end(), start);",
                  "err": {},
                  "uuid": "c0916333-3d35-4b0f-a349-0bdce4b0e568",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event end() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.end(moment()));\nassert.deepStrictEqual(event, event.end(new Date()));",
                  "err": {},
                  "uuid": "111f65b8-3e59-4672-ac90-9820fa6861b8",
                  "parentUUID": "81a6c397-14b4-4ef0-9ba8-54e2bb50d283",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7aae1b83-6841-4ac7-a7b4-690f0f59c99c",
                "50a592e9-423d-476a-abe5-72a141229c1e",
                "878f87d0-2d34-4d81-8cde-ef532234b06f",
                "14c29a5c-297e-4f5c-a561-c37161e3f444",
                "c0916333-3d35-4b0f-a349-0bdce4b0e568",
                "111f65b8-3e59-4672-ac90-9820fa6861b8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "627546ed-ed70-478a-8695-572b1c7cb5be",
              "title": "recurrenceId()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event recurrenceId() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment();\nconst event = new ICalEvent({}, new ICalCalendar());\nevent.recurrenceId(now);\nassert.deepStrictEqual(event.recurrenceId(), now);",
                  "err": {},
                  "uuid": "145774ad-ef42-4cdf-9429-cfc39af06bdd",
                  "parentUUID": "627546ed-ed70-478a-8695-572b1c7cb5be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "dcdc7b25-becc-4934-94c9-4dd6f128c1bd",
                  "parentUUID": "627546ed-ed70-478a-8695-572b1c7cb5be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event recurrenceId() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.recurrenceId(date));\nassert.deepStrictEqual(event.recurrenceId(), date);",
                  "err": {},
                  "uuid": "cdd34fec-fb9f-40de-a04e-d792632d5e53",
                  "parentUUID": "627546ed-ed70-478a-8695-572b1c7cb5be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event recurrenceId() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(3);\n}, /`recurrenceId`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.recurrenceId(NaN);\n}, /`recurrenceId`/, 'NaN');\nassert.throws(function () {\n    event.recurrenceId(new Date('hallo'));\n}, /`recurrenceId`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "74be17f5-72b0-4a8c-a08d-822bba81400d",
                  "parentUUID": "627546ed-ed70-478a-8695-572b1c7cb5be",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event recurrenceId() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event, event.recurrenceId(moment()));\nassert.deepStrictEqual(event, event.recurrenceId(new Date()));",
                  "err": {},
                  "uuid": "f95f29a9-2726-48df-87fe-07df6df59331",
                  "parentUUID": "627546ed-ed70-478a-8695-572b1c7cb5be",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "145774ad-ef42-4cdf-9429-cfc39af06bdd",
                "dcdc7b25-becc-4934-94c9-4dd6f128c1bd",
                "cdd34fec-fb9f-40de-a04e-d792632d5e53",
                "74be17f5-72b0-4a8c-a08d-822bba81400d",
                "f95f29a9-2726-48df-87fe-07df6df59331"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
              "title": "timezone()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timezone() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).timezone('Europe/Berlin');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');",
                  "err": {},
                  "uuid": "6a155fad-734f-4399-9623-05d1befb3534",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should inherit from calendar",
                  "fullTitle": "ical-generator Event timezone() getter should inherit from calendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, cal);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);\ncal.timezone('Europe/London');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');\ne.timezone('Europe/Berlin');\nassert.strictEqual(cal.timezone(), 'Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ncal.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone(null);\nassert.strictEqual(cal.timezone(), null);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "721c9b4f-a9da-4002-ace0-71eb81f307de",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timezone() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timezone('Europe/Berlin'));",
                  "err": {},
                  "uuid": "9c36076c-c7f0-429b-aa61-7dfb5bf3be67",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update timezone",
                  "fullTitle": "ical-generator Event timezone() should update timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "657cec7e-5372-4f3c-a654-5b9e652cc580",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should disable floating when truthy",
                  "fullTitle": "ical-generator Event timezone() should disable floating when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone('Europe/London');\nassert.strictEqual(e.floating(), false);",
                  "err": {},
                  "uuid": "d8abd5c5-c78a-4761-858e-82baa5ae2706",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not disable floating when falsy",
                  "fullTitle": "ical-generator Event timezone() should not disable floating when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.floating(true);\ne.timezone(null);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "9a47484f-4999-4f0c-bb9c-da917b855871",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setting UTC should reset timezone as UTC is the default",
                  "fullTitle": "ical-generator Event timezone() setting UTC should reset timezone as UTC is the default",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    timezone: 'Europe/Berlin',\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.strictEqual(e.timezone(), 'Europe/Berlin');\ne.timezone('UTC');\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "739e55fe-198d-44bd-a7d5-aef98aa2b330",
                  "parentUUID": "e8009067-c4d3-4ccd-8885-23a6b42da58d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a155fad-734f-4399-9623-05d1befb3534",
                "721c9b4f-a9da-4002-ace0-71eb81f307de",
                "9c36076c-c7f0-429b-aa61-7dfb5bf3be67",
                "657cec7e-5372-4f3c-a654-5b9e652cc580",
                "d8abd5c5-c78a-4761-858e-82baa5ae2706",
                "9a47484f-4999-4f0c-bb9c-da917b855871",
                "739e55fe-198d-44bd-a7d5-aef98aa2b330"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
              "title": "stamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event stamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).stamp(now);\nassert.deepStrictEqual(e.stamp(), now);",
                  "err": {},
                  "uuid": "bcce40b5-37f2-4100-883c-1acc3bd8185d",
                  "parentUUID": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event stamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "f988e66d-9578-43fe-9d68-420c4d67f0e2",
                  "parentUUID": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event stamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.stamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "19cb0450-24d5-4b3f-93ce-145a6dc9d3f2",
                  "parentUUID": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event stamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.stamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.stamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "536220dd-d739-4b06-9331-21b2848f5969",
                  "parentUUID": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event stamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.stamp(new Date()));",
                  "err": {},
                  "uuid": "27ecb7cb-3c2d-4142-83a6-7cb205703a5e",
                  "parentUUID": "80d5ab76-fc20-43ff-88b6-ec73862452d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bcce40b5-37f2-4100-883c-1acc3bd8185d",
                "f988e66d-9578-43fe-9d68-420c4d67f0e2",
                "19cb0450-24d5-4b3f-93ce-145a6dc9d3f2",
                "536220dd-d739-4b06-9331-21b2848f5969",
                "27ecb7cb-3c2d-4142-83a6-7cb205703a5e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "68b596a1-f944-4615-9e64-fd3d7bf50922",
              "title": "timestamp()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event timestamp() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const now = moment().add(1, 'day');\nconst e = new ICalEvent({}, new ICalCalendar()).timestamp(now);\nassert.deepStrictEqual(e.timestamp(), now);",
                  "err": {},
                  "uuid": "4840ea0d-d998-4659-a012-a54e9b378efb",
                  "parentUUID": "68b596a1-f944-4615-9e64-fd3d7bf50922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse string if required",
                  "fullTitle": "ical-generator Event timestamp() setter should parse string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "b5917c98-9050-441d-8a1a-f790c3bb1f57",
                  "parentUUID": "68b596a1-f944-4615-9e64-fd3d7bf50922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle Dates if required",
                  "fullTitle": "ical-generator Event timestamp() setter should handle Dates if required",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nassert.deepStrictEqual(event, event.timestamp(date));\nassert.deepStrictEqual(event.stamp(), date);",
                  "err": {},
                  "uuid": "97da60b8-b6d7-482e-b33f-01495b54030a",
                  "parentUUID": "68b596a1-f944-4615-9e64-fd3d7bf50922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when time is not a Date",
                  "fullTitle": "ical-generator Event timestamp() setter should throw error when time is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(3);\n}, /`stamp`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(null);\n}, /`stamp`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.timestamp(NaN);\n}, /`stamp`/, 'NaN');\nassert.throws(function () {\n    event.timestamp(new Date('hallo'));\n}, /`stamp`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "f3fdd537-88d3-4921-94d2-41bc82865784",
                  "parentUUID": "68b596a1-f944-4615-9e64-fd3d7bf50922",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event timestamp() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.timestamp(new Date()));",
                  "err": {},
                  "uuid": "6dbe96d6-4f83-4ca0-a5e4-5a90dbc7d894",
                  "parentUUID": "68b596a1-f944-4615-9e64-fd3d7bf50922",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4840ea0d-d998-4659-a012-a54e9b378efb",
                "b5917c98-9050-441d-8a1a-f790c3bb1f57",
                "97da60b8-b6d7-482e-b33f-01495b54030a",
                "f3fdd537-88d3-4921-94d2-41bc82865784",
                "6dbe96d6-4f83-4ca0-a5e4-5a90dbc7d894"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fd2126ed-4c45-458f-a7f7-7f33c8b94ab6",
              "title": "allDay()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event allDay() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.allDay(true);\nassert.strictEqual(e.allDay(), true);",
                  "err": {},
                  "uuid": "d7ff7d15-bd8f-4c66-a336-1e327f23d8a1",
                  "parentUUID": "fd2126ed-4c45-458f-a7f7-7f33c8b94ab6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event allDay() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.allDay(true));",
                  "err": {},
                  "uuid": "54cf68ad-c54d-477c-a4b2-64f554f0af22",
                  "parentUUID": "fd2126ed-4c45-458f-a7f7-7f33c8b94ab6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event allDay() should change something",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.allDay(true);\nassert.strictEqual(event.allDay(), true);",
                  "err": {},
                  "uuid": "a5f4da7a-9ca3-4582-b6e6-c5a0e3fb8fa0",
                  "parentUUID": "fd2126ed-4c45-458f-a7f7-7f33c8b94ab6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7ff7d15-bd8f-4c66-a336-1e327f23d8a1",
                "54cf68ad-c54d-477c-a4b2-64f554f0af22",
                "a5f4da7a-9ca3-4582-b6e6-c5a0e3fb8fa0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
              "title": "floating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event floating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar()).floating(true);\nassert.strictEqual(e.floating(), true);",
                  "err": {},
                  "uuid": "f0e763f4-e4ab-4d89-a623-2e8bc614e91f",
                  "parentUUID": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event floating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.floating(false));\nassert.deepStrictEqual(e, e.floating(true));",
                  "err": {},
                  "uuid": "20060d3e-f133-4a03-8517-3135585040fa",
                  "parentUUID": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update floating",
                  "fullTitle": "ical-generator Event floating() should update floating",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.floating(true);\nassert.strictEqual(event.floating(), true);",
                  "err": {},
                  "uuid": "7dc0f8ee-565a-4dce-91b5-006c79177521",
                  "parentUUID": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should remove timezone when truthy",
                  "fullTitle": "ical-generator Event floating() should remove timezone when truthy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(true);\nassert.strictEqual(e.timezone(), null);",
                  "err": {},
                  "uuid": "9d6fb418-f584-4f00-bd40-240abf31bd0c",
                  "parentUUID": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not remove timezone when falsy",
                  "fullTitle": "ical-generator Event floating() should not remove timezone when falsy",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\ne.timezone('Europe/London');\ne.floating(false);\nassert.strictEqual(e.timezone(), 'Europe/London');",
                  "err": {},
                  "uuid": "d7449b77-2774-4098-88c9-7d4cfd7c9c77",
                  "parentUUID": "29d73c21-6d47-4c0f-94b3-f8ef3971052c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0e763f4-e4ab-4d89-a623-2e8bc614e91f",
                "20060d3e-f133-4a03-8517-3135585040fa",
                "7dc0f8ee-565a-4dce-91b5-006c79177521",
                "9d6fb418-f584-4f00-bd40-240abf31bd0c",
                "d7449b77-2774-4098-88c9-7d4cfd7c9c77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
              "title": "repeating()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event repeating() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const options = {\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    count: 5,\n    interval: 2,\n    until: moment(),\n    exclude: [moment()]\n};\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e.repeating(), null);\ne.repeating(options);\nassert.strictEqual(JSON.stringify(e.repeating(), null, '  '), JSON.stringify(options, null, '  '));\ne.repeating(null);\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "8621ad4b-4100-45b7-b9c0-5f340f18505e",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle null",
                  "fullTitle": "ical-generator Event repeating() setter should handle null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null));\nassert.deepStrictEqual(e.repeating(), null);",
                  "err": {},
                  "uuid": "2e0cdc66-f0cb-415a-b54b-825c2b8682b4",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event repeating() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.repeating(null), 'repeating(null)');\nassert.deepStrictEqual(e, e.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY\n}), 'repeating({freq: \\'MONTHLY\\'})');",
                  "err": {},
                  "uuid": "50ab3e28-4de2-4398-83a9-d556f89b01b3",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating without freq",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating without freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        // @ts-ignore\n        repeating: {}\n    }, new ICalCalendar());\n}, /Input must be one of the following: SECONDLY, MINUTELY, HOURLY, DAILY, WEEKLY, MONTHLY, YEARLY/);",
                  "err": {},
                  "uuid": "675034b1-c3e7-4328-a30f-4ed5e05224e5",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating when freq is not allowed",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating when freq is not allowed",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            // @ts-ignore\n            freq: 'hello'\n        }\n    }, new ICalCalendar());\n}, /must be one of the following/);",
                  "err": {},
                  "uuid": "eaf977f3-2510-4ea2-abe8-f43e7338f372",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update freq",
                  "fullTitle": "ical-generator Event repeating() setter should update freq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.freq, 'MONTHLY');",
                  "err": {},
                  "uuid": "45cfb49c-98f9-4748-9ce7-d354625930ae",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.count is not a number",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.count is not a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            count: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.count` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            count: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.count` must be a finite number!/);",
                  "err": {},
                  "uuid": "248d4b62-8ef6-438c-b0ba-d44a14077254",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update count",
                  "fullTitle": "ical-generator Event repeating() setter should update count",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, count: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.count, 5);",
                  "err": {},
                  "uuid": "08900f73-33c9-4632-84b8-823954bb789f",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.interval is not a number",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.interval is not a number",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: Infinity\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            interval: 'abc'\n        }\n    }, new ICalCalendar());\n}, /`repeating.interval` must be a finite number!/);",
                  "err": {},
                  "uuid": "db07f56b-c830-45d9-aeb1-b16df84318e8",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update interval",
                  "fullTitle": "ical-generator Event repeating() setter should update interval",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, interval: 5 });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual(result.interval, 5);",
                  "err": {},
                  "uuid": "26b88993-ddc8-4620-ade5-cb4c9a0eac9f",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.until is not a date",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.until is not a date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            // @ts-ignore\n            until: null\n        }\n    }, new ICalCalendar());\n}, /Error: `repeating\\.until` has to be a valid date!/);",
                  "err": {},
                  "uuid": "6bb1f86a-8c82-4794-8d12-06c95e74d2fb",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should parse repeating.until string if required",
                  "fullTitle": "ical-generator Event repeating() setter should parse repeating.until string if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toJSON();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "4b4988fa-0554-4d4d-83dc-97e6aeef1063",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until Dates if required",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until Dates if required",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week').toDate();\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "e496e06a-c03d-4b17-a17a-a7db292b9a45",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should handle repeating.until moments",
                  "fullTitle": "ical-generator Event repeating() setter should handle repeating.until moments",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\nevent.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: date });\nconst result = event.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.until, date);",
                  "err": {},
                  "uuid": "0fbf0f78-6fff-4cf7-b9a4-4d12487a0e71",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should throw error when repeating.until is not a Date",
                  "fullTitle": "ical-generator Event repeating() setter should throw error when repeating.until is not a Date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: 3 });\n}, /`repeating.until`/, 'Number');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: null });\n}, /`repeating.until`/, 'null');\nassert.throws(function () {\n    // @ts-ignore\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: NaN });\n}, /`repeating.until`/, 'NaN');\nassert.throws(function () {\n    event.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, until: new Date('foo') });\n}, /`repeating.until`/, 'Invalid Date');",
                  "err": {},
                  "uuid": "f48574aa-b287-410d-8f4a-5fe1ece42650",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', 'BAR', 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byDay: ['SU', Infinity, 'th']\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "914b94e2-8e05-4c13-93d7-6e6ec2e61d03",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU, ICalWeekday.WE, ICalWeekday.TH]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byDay, ['SU', 'WE', 'TH']);",
                  "err": {},
                  "uuid": "42660046-0fa2-4922-af2d-32b30e740242",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonth is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonth is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonth: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonth: [1, 14, 7]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonth` contains invalid value `14`/);",
                  "err": {},
                  "uuid": "df7b2de9-de2d-41f7-bc62-8cd9bc91ddac",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonth",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonth",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonth: [1, 12, 7] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonth, [1, 12, 7]);",
                  "err": {},
                  "uuid": "99e4ae2d-4d09-4aaa-8fa8-b7d3bcdfe99c",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byMonthDay is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byMonthDay is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            byMonthDay: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `FOO`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 32, -15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [-1, -32, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `-32`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byMonthDay: [1, 0, 15]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.byMonthDay` contains invalid value `0`/);",
                  "err": {},
                  "uuid": "18b58c46-46c9-43e2-8773-f3c303c8cc45",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.byMonthDay",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.byMonthDay",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({ freq: ICalEventRepeatingFreq.MONTHLY, byMonthDay: [1, 15] });\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.byMonthDay, [1, 15]);",
                  "err": {},
                  "uuid": "523dc231-e4b0-4ae2-8fe4-298f9cff697a",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.bySetPos is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.bySetPos is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [-367]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `-367`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            bySetPos: [0]\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `0`/);\nassert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            bySetPos: ['FOO']\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` contains invalid value `FOO`/);",
                  "err": {},
                  "uuid": "3e754fe6-26ad-484a-b0d7-72ac82122c38",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.byDay is not present with repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.MONTHLY,\n            interval: 2,\n            bySetPos: 6\n        }\n    }, new ICalCalendar());\n}, /`repeating\\.bySetPos` must be used along with `repeating\\.byDay`/);",
                  "err": {},
                  "uuid": "bf37ea14-f96b-4df0-bfb6-1d16882f6ec1",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.bySetPos",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.bySetPos",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    byDay: [ICalWeekday.SU],\n    bySetPos: [2]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.strictEqual((_a = result.byDay) === null || _a === void 0 ? void 0 : _a.length, 1);\nassert.strictEqual((_b = result.bySetPos) === null || _b === void 0 ? void 0 : _b.length, 1);",
                  "err": {},
                  "uuid": "a7796725-fbd7-43d0-9d22-fd7f094f4eec",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: new Date('FOO')\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "89ac1f44-f476-428b-b0ea-c860b212c4df",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not valid (should throw on first err value",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not valid (should throw on first err value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            exclude: [moment(), new Date('BAR'), 'FOO']\n        }\n    }, new ICalCalendar());\n}, /has to be a valid date/);",
                  "err": {},
                  "uuid": "c96105b5-f83a-429a-b598-ec8bc0449849",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.exclude is not a valid type",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.exclude is not a valid type",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        end: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            byDay: [ICalWeekday.SU],\n            // @ts-ignore\n            exclude: 42\n        }\n    }, new ICalCalendar());\n}, /`repeating.exclude\\[0\\]` has to be a valid date!/);",
                  "err": {},
                  "uuid": "2d297059-fc4f-4191-895b-52a2d425f88b",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.exclude",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.exclude",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().add(1, 'week');\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    exclude: [\n        date.toJSON(),\n        date.toDate(),\n        date\n    ]\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.ok(Array.isArray(result.exclude));\nassert.strictEqual(result.exclude.length, 3);\nassert.deepStrictEqual(result.exclude[0], date.toJSON(), 'String');\nassert.deepStrictEqual(result.exclude[1], date.toDate(), 'Date');\nassert.deepStrictEqual(result.exclude[2], date, 'Moment');",
                  "err": {},
                  "uuid": "9b143148-53ac-4d21-b016-f0ea6072e799",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when repeating.startOfWeek is not valid",
                  "fullTitle": "ical-generator Event repeating() should throw error when repeating.startOfWeek is not valid",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(function () {\n    new ICalEvent({\n        start: moment(),\n        summary: 'test',\n        repeating: {\n            freq: ICalEventRepeatingFreq.DAILY,\n            interval: 2,\n            // @ts-ignore\n            startOfWeek: 'FOO'\n        }\n    }, new ICalCalendar());\n}, /Input must be one of the following: SU, MO, TU, WE, TH, FR, SA/);",
                  "err": {},
                  "uuid": "c2b8ae9c-46d7-4882-9920-a0c86e653f27",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should update repeating.wkst",
                  "fullTitle": "ical-generator Event repeating() setter should update repeating.wkst",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.repeating({\n    freq: ICalEventRepeatingFreq.MONTHLY,\n    startOfWeek: ICalWeekday.SU\n});\nconst result = e.repeating();\nassert.ok(result && !isRRule(result) && typeof result !== 'string');\nassert.deepStrictEqual(result.startOfWeek, 'SU');",
                  "err": {},
                  "uuid": "163394cd-22e7-40a4-b109-d976962b7fa4",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support RRules",
                  "fullTitle": "ical-generator Event repeating() should support RRules",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const start = new Date(Date.UTC(2012, 1, 1, 10, 30));\nconst e = new ICalEvent({ start }, new ICalCalendar());\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: start,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\ne.repeating(rule);\nconst result = e.repeating();\nassert.ok(isRRule(result));\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "40e79dc3-fa63-4568-968b-e4b2fac5a986",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support strings",
                  "fullTitle": "ical-generator Event repeating() should support strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "30fa73c9-9462-4585-896b-c8b3bba9adcd",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add RRULE: prefix for single line string if not already there",
                  "fullTitle": "ical-generator Event repeating() should add RRULE: prefix for single line string if not already there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({ start: new Date() }, new ICalCalendar());\nconst rule = 'FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z';\ne.repeating(rule);\nconst result = e.repeating();\nassert.deepStrictEqual(result, rule);\nassert.ok(e.toString().includes('RRULE:FREQ=WEEKLY;INTERVAL=5;BYDAY=MO,FR;UNTIL=20130131T000000Z'));",
                  "err": {},
                  "uuid": "3d009ca3-036e-4f87-8101-8e06e35acb08",
                  "parentUUID": "2af56e11-e6c9-4f3d-9776-b63a73194e4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8621ad4b-4100-45b7-b9c0-5f340f18505e",
                "2e0cdc66-f0cb-415a-b54b-825c2b8682b4",
                "50ab3e28-4de2-4398-83a9-d556f89b01b3",
                "675034b1-c3e7-4328-a30f-4ed5e05224e5",
                "eaf977f3-2510-4ea2-abe8-f43e7338f372",
                "45cfb49c-98f9-4748-9ce7-d354625930ae",
                "248d4b62-8ef6-438c-b0ba-d44a14077254",
                "08900f73-33c9-4632-84b8-823954bb789f",
                "db07f56b-c830-45d9-aeb1-b16df84318e8",
                "26b88993-ddc8-4620-ade5-cb4c9a0eac9f",
                "6bb1f86a-8c82-4794-8d12-06c95e74d2fb",
                "4b4988fa-0554-4d4d-83dc-97e6aeef1063",
                "e496e06a-c03d-4b17-a17a-a7db292b9a45",
                "0fbf0f78-6fff-4cf7-b9a4-4d12487a0e71",
                "f48574aa-b287-410d-8f4a-5fe1ece42650",
                "914b94e2-8e05-4c13-93d7-6e6ec2e61d03",
                "42660046-0fa2-4922-af2d-32b30e740242",
                "df7b2de9-de2d-41f7-bc62-8cd9bc91ddac",
                "99e4ae2d-4d09-4aaa-8fa8-b7d3bcdfe99c",
                "18b58c46-46c9-43e2-8773-f3c303c8cc45",
                "523dc231-e4b0-4ae2-8fe4-298f9cff697a",
                "3e754fe6-26ad-484a-b0d7-72ac82122c38",
                "bf37ea14-f96b-4df0-bfb6-1d16882f6ec1",
                "a7796725-fbd7-43d0-9d22-fd7f094f4eec",
                "89ac1f44-f476-428b-b0ea-c860b212c4df",
                "c96105b5-f83a-429a-b598-ec8bc0449849",
                "2d297059-fc4f-4191-895b-52a2d425f88b",
                "9b143148-53ac-4d21-b016-f0ea6072e799",
                "c2b8ae9c-46d7-4882-9920-a0c86e653f27",
                "163394cd-22e7-40a4-b109-d976962b7fa4",
                "40e79dc3-fa63-4568-968b-e4b2fac5a986",
                "30fa73c9-9462-4585-896b-c8b3bba9adcd",
                "3d009ca3-036e-4f87-8101-8e06e35acb08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5ae4c329-14b5-4174-90e2-5fbda0f59e40",
              "title": "summary()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event summary() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.summary(), '');\ne.summary('Testevent');\nassert.strictEqual(e.summary(), 'Testevent');",
                  "err": {},
                  "uuid": "a068ae0f-01a2-4883-acd1-bc036e640834",
                  "parentUUID": "5ae4c329-14b5-4174-90e2-5fbda0f59e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event summary() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.summary(''));\nassert.deepStrictEqual(e, e.summary('Testevent'));",
                  "err": {},
                  "uuid": "33a37606-0747-4a1d-b6dc-4096ebff0325",
                  "parentUUID": "5ae4c329-14b5-4174-90e2-5fbda0f59e40",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update summary",
                  "fullTitle": "ical-generator Event summary() should update summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.summary('Example Event II');\nassert.strictEqual(event.summary(), 'Example Event II');\nevent.summary('');\nassert.strictEqual(event.summary(), '');",
                  "err": {},
                  "uuid": "19bfe3c7-1d42-4321-b656-2fe279c0e1bd",
                  "parentUUID": "5ae4c329-14b5-4174-90e2-5fbda0f59e40",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a068ae0f-01a2-4883-acd1-bc036e640834",
                "33a37606-0747-4a1d-b6dc-4096ebff0325",
                "19bfe3c7-1d42-4321-b656-2fe279c0e1bd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
              "title": "location()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value (string)",
                  "fullTitle": "ical-generator Event location() getter should return value (string)",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location('Test Location');\nassert.deepStrictEqual(e.location(), { title: 'Test Location' });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "fc6c19a1-2465-41cf-8246-e37ed2cfe710",
                  "parentUUID": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value (obj)",
                  "fullTitle": "ical-generator Event location() getter should return value (obj)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.location(), null);\ne.location({\n    title: 'Foo',\n    geo: { lat: 44.5, lon: -3.4 }\n});\nassert.deepStrictEqual((_a = e.location()) === null || _a === void 0 ? void 0 : _a.title, 'Foo');\nassert.deepStrictEqual((_b = e.location()) === null || _b === void 0 ? void 0 : _b.geo, { lat: 44.5, lon: -3.4 });\ne.location(null);\nassert.strictEqual(e.location(), null);",
                  "err": {},
                  "uuid": "44da61ae-db75-4f87-b06b-8b07693c330d",
                  "parentUUID": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event location() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.location(null));\nassert.deepStrictEqual(e, e.location('Test Location'));",
                  "err": {},
                  "uuid": "6b7f08c7-9880-4b8d-81dc-8f8364512881",
                  "parentUUID": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update location",
                  "fullTitle": "ical-generator Event location() should update location",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.location('Europa-Park');\nassert.strictEqual((_a = event.location()) === null || _a === void 0 ? void 0 : _a.title, 'Europa-Park');",
                  "err": {},
                  "uuid": "a4f22f8e-56fe-4475-b27e-f71b66341a6f",
                  "parentUUID": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when location is not valid",
                  "fullTitle": "ical-generator Event location() should throw error when location is not valid",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\n// @ts-ignore\nassert.throws(() => event.location({ geo: 3 }), /`location` isn't formatted correctly/i);\n// @ts-ignore\nassert.throws(() => event.location({}), /`location` isn't formatted correctly/i);",
                  "err": {},
                  "uuid": "ed7cbde4-9e99-47db-ab42-70aef5bc1f2a",
                  "parentUUID": "7fda9aff-03c6-4373-9afd-fa54ec55fdc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fc6c19a1-2465-41cf-8246-e37ed2cfe710",
                "44da61ae-db75-4f87-b06b-8b07693c330d",
                "6b7f08c7-9880-4b8d-81dc-8f8364512881",
                "a4f22f8e-56fe-4475-b27e-f71b66341a6f",
                "ed7cbde4-9e99-47db-ab42-70aef5bc1f2a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf0f44e1-4ee7-41d4-b783-8dd6ae8f7b61",
              "title": "description()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event description() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.description(), null);\ne.description('I don\\'t need a description. I\\'m far to awesome for descriptions…');\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…'\n});\ne.description({\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\nassert.deepStrictEqual(e.description(), {\n    plain: 'I don\\'t need a description. I\\'m far to awesome for descriptions…',\n    html: 'I don\\'t need a description.<br />I\\'m far to awesome for descriptions…'\n});\ne.description(null);\nassert.strictEqual(e.description(), null);",
                  "err": {},
                  "uuid": "b82213c0-dfd6-47dc-a13b-171d1f7fac4e",
                  "parentUUID": "cf0f44e1-4ee7-41d4-b783-8dd6ae8f7b61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event description() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.description(null));\nassert.deepStrictEqual(e, e.description('I don\\'t need a description. I\\'m far to awesome for descriptions…'));",
                  "err": {},
                  "uuid": "7f853ebd-e83c-4945-8962-74991c161f99",
                  "parentUUID": "cf0f44e1-4ee7-41d4-b783-8dd6ae8f7b61",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should change something",
                  "fullTitle": "ical-generator Event description() should change something",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.description('Well. But other people need descriptions… :/');\nassert.deepStrictEqual(event.description(), {\n    plain: 'Well. But other people need descriptions… :/'\n});\nevent.description({\n    plain: 'I am uncool text.',\n    html: '<marquee>I\\'m the best HTML tag in this universe!</marquee>'\n});\nassert.ok(event.toString().includes('<marquee>I\\'m the best HTML tag in this universe!</marquee>'));",
                  "err": {},
                  "uuid": "fbdcbcea-c6ec-4737-a1d2-5b2920732c34",
                  "parentUUID": "cf0f44e1-4ee7-41d4-b783-8dd6ae8f7b61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b82213c0-dfd6-47dc-a13b-171d1f7fac4e",
                "7f853ebd-e83c-4945-8962-74991c161f99",
                "fbdcbcea-c6ec-4737-a1d2-5b2920732c34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e89283b5-1ad5-4878-9bc5-b329882632ae",
              "title": "organizer()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event organizer() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a, _b, _c, _d, _e;\nconst e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.organizer(), null);\ne.organizer(null);\nassert.strictEqual(e.organizer(), null);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.strictEqual('Sebastian Pekarek', (_a = e.organizer()) === null || _a === void 0 ? void 0 : _a.name);\nassert.strictEqual('mail@example.com', (_b = e.organizer()) === null || _b === void 0 ? void 0 : _b.email);\ne.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.strictEqual('Sebastian Pekarek', (_c = e.organizer()) === null || _c === void 0 ? void 0 : _c.name);\nassert.strictEqual('mail@example.com', (_d = e.organizer()) === null || _d === void 0 ? void 0 : _d.email);\nassert.strictEqual('mail2@example2.com', (_e = e.organizer()) === null || _e === void 0 ? void 0 : _e.mailto);",
                  "err": {},
                  "uuid": "730bc9fa-6fd7-436b-974d-26f86e7a2d7d",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event organizer() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.organizer(null));\nassert.deepStrictEqual(e, e.organizer('Sebastian Pekarek <mail@example.com>'));",
                  "err": {},
                  "uuid": "a28591d7-e3a0-4309-b694-b148a89871b4",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with objects",
                  "fullTitle": "ical-generator Event organizer() should work with objects",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: undefined\n});\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', mailto: 'mail2@example2.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: 'mail2@example2.com',\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "b08e2f1d-66a1-4120-a994-4f6748d1dc4b",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should support sent by when using object",
                  "fullTitle": "ical-generator Event organizer() should support sent by when using object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek', email: 'mail@example.com', sentBy: 'bot@example.com' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: 'mail@example.com',\n    mailto: undefined,\n    sentBy: 'bot@example.com'\n});",
                  "err": {},
                  "uuid": "b3b377f8-7438-465b-8d27-69351ea12591",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with valid strings",
                  "fullTitle": "ical-generator Event organizer() should work with valid strings",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer('Sebastian Pekarek <mail@example.com>');\nassert.deepStrictEqual(event.organizer(), { name: 'Sebastian Pekarek', email: 'mail@example.com' });",
                  "err": {},
                  "uuid": "584774e9-3ec6-4acc-a55b-07110f0b8ad7",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event organizer() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.organizer('foo bar');\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "1215d0dd-abd9-41c5-a1ce-98c88d31de77",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when object misses data",
                  "fullTitle": "ical-generator Event organizer() should throw error when object misses data",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer({ email: 'foo' });\n}, /`organizer\\.name`/);",
                  "err": {},
                  "uuid": "1b7f25a8-db09-4489-aa74-5c228a1d4a0d",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when unknown format",
                  "fullTitle": "ical-generator Event organizer() should throw error when unknown format",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(Infinity);\n}, /`organizer`/);\nassert.throws(function () {\n    // @ts-ignore\n    e.organizer(NaN);\n}, /`organizer`/);",
                  "err": {},
                  "uuid": "bb8c3923-ef86-4c94-8993-15cccdfb0fa0",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without an email",
                  "fullTitle": "ical-generator Event organizer() should work without an email",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.organizer({ name: 'Sebastian Pekarek' });\nassert.deepStrictEqual(event.organizer(), {\n    name: 'Sebastian Pekarek',\n    email: undefined,\n    mailto: undefined,\n    sentBy: undefined\n});",
                  "err": {},
                  "uuid": "918196f3-6e97-4d13-ada0-bbe0024a8366",
                  "parentUUID": "e89283b5-1ad5-4878-9bc5-b329882632ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "730bc9fa-6fd7-436b-974d-26f86e7a2d7d",
                "a28591d7-e3a0-4309-b694-b148a89871b4",
                "b08e2f1d-66a1-4120-a994-4f6748d1dc4b",
                "b3b377f8-7438-465b-8d27-69351ea12591",
                "584774e9-3ec6-4acc-a55b-07110f0b8ad7",
                "1215d0dd-abd9-41c5-a1ce-98c88d31de77",
                "1b7f25a8-db09-4489-aa74-5c228a1d4a0d",
                "bb8c3923-ef86-4c94-8993-15cccdfb0fa0",
                "918196f3-6e97-4d13-ada0-bbe0024a8366"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "33df84a1-8eb2-43f3-a001-0d53323114ee",
              "title": "createAttendee()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "if Attendee passed, it should add and return it",
                  "fullTitle": "ical-generator Event createAttendee() if Attendee passed, it should add and return it",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = new ICalAttendee({}, event);\nassert.strictEqual(event.createAttendee(attendee), attendee, 'createAttendee returns attendee');\nassert.deepStrictEqual(event.attendees()[0], attendee, 'attendee pushed');",
                  "err": {},
                  "uuid": "7bba89c6-b132-4255-85c5-0af8e85ded42",
                  "parentUUID": "33df84a1-8eb2-43f3-a001-0d53323114ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalAttendee instance",
                  "fullTitle": "ical-generator Event createAttendee() should return a ICalAttendee instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAttendee({}) instanceof ICalAttendee);\nassert.strictEqual(event.attendees.length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "6c0378ee-6be8-435e-a6ba-e6128fc37b5a",
                  "parentUUID": "33df84a1-8eb2-43f3-a001-0d53323114ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept string",
                  "fullTitle": "ical-generator Event createAttendee() should accept string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee('Zac <zac@example.com>');\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "1d7e63a8-8933-43f0-bed9-2f3be826618a",
                  "parentUUID": "33df84a1-8eb2-43f3-a001-0d53323114ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when string misformated",
                  "fullTitle": "ical-generator Event createAttendee() should throw error when string misformated",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.createAttendee('foo bar');\n}, /isn't formated correctly/);",
                  "err": {},
                  "uuid": "91f7bf4f-5bc8-4154-be0a-7e3272b8786e",
                  "parentUUID": "33df84a1-8eb2-43f3-a001-0d53323114ee",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should accept object",
                  "fullTitle": "ical-generator Event createAttendee() should accept object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst attendee = event.createAttendee({ name: 'Zac', email: 'zac@example.com' });\nassert.strictEqual(attendee.name(), 'Zac');\nassert.strictEqual(attendee.email(), 'zac@example.com');\nassert.strictEqual(event.attendees().length, 1, 'attendee pushed');",
                  "err": {},
                  "uuid": "b373bc76-cf21-4ddf-8bb0-86aa09139d82",
                  "parentUUID": "33df84a1-8eb2-43f3-a001-0d53323114ee",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7bba89c6-b132-4255-85c5-0af8e85ded42",
                "6c0378ee-6be8-435e-a6ba-e6128fc37b5a",
                "1d7e63a8-8933-43f0-bed9-2f3be826618a",
                "91f7bf4f-5bc8-4154-be0a-7e3272b8786e",
                "b373bc76-cf21-4ddf-8bb0-86aa09139d82"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0e18f3ca-8042-4624-9fa5-3e66bd5fafeb",
              "title": "attendees()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of attendees…",
                  "fullTitle": "ical-generator Event attendees() getter should return an array of attendees…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attendees().length, 0);\nconst attendee = event.createAttendee();\nassert.strictEqual(event.attendees().length, 1);\nassert.deepStrictEqual(event.attendees()[0], attendee);",
                  "err": {},
                  "uuid": "c6e50cf6-b778-40e3-b0b9-a497403ad0dd",
                  "parentUUID": "0e18f3ca-8042-4624-9fa5-3e66bd5fafeb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add attendees and return this",
                  "fullTitle": "ical-generator Event attendees() setter should add attendees and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attendees([{ name: 'Person A' }, { name: 'Person B' }]);\nassert.strictEqual(event.attendees().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "9188e073-b9b2-4ec1-b486-7f3beba59415",
                  "parentUUID": "0e18f3ca-8042-4624-9fa5-3e66bd5fafeb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6e50cf6-b778-40e3-b0b9-a497403ad0dd",
                "9188e073-b9b2-4ec1-b486-7f3beba59415"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc53c7a2-e1a3-47a5-a6d6-1ecbee528de0",
              "title": "createAlarm()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalAlarm instance",
                  "fullTitle": "ical-generator Event createAlarm() should return a ICalAlarm instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createAlarm() instanceof ICalAlarm);",
                  "err": {},
                  "uuid": "53b8c79c-88b1-49b8-bc4f-4db0ae1718d5",
                  "parentUUID": "dc53c7a2-e1a3-47a5-a6d6-1ecbee528de0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createAlarm() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst alarm = event.createAlarm({ type: ICalAlarmType.audio });\nassert.strictEqual(alarm.type(), 'audio');",
                  "err": {},
                  "uuid": "6e6f5943-634d-42b8-a359-0014d214c7c9",
                  "parentUUID": "dc53c7a2-e1a3-47a5-a6d6-1ecbee528de0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53b8c79c-88b1-49b8-bc4f-4db0ae1718d5",
                "6e6f5943-634d-42b8-a359-0014d214c7c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7c7e0d1a-2982-41ba-867a-a71624ff482f",
              "title": "alarms()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of alarms…",
                  "fullTitle": "ical-generator Event alarms() getter should return an array of alarms…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.alarms().length, 0);\nconst alarm = event.createAlarm();\nassert.strictEqual(event.alarms().length, 1);\nassert.deepStrictEqual(event.alarms()[0], alarm);",
                  "err": {},
                  "uuid": "faf69921-18e9-4d1d-be6d-961be43ed506",
                  "parentUUID": "7c7e0d1a-2982-41ba-867a-a71624ff482f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add alarms and return this",
                  "fullTitle": "ical-generator Event alarms() setter should add alarms and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.alarms([\n    { type: ICalAlarmType.audio },\n    { type: ICalAlarmType.display }\n]);\nassert.strictEqual(event.alarms().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "8072d188-9978-4730-a4bc-5d83d4570b35",
                  "parentUUID": "7c7e0d1a-2982-41ba-867a-a71624ff482f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "faf69921-18e9-4d1d-be6d-961be43ed506",
                "8072d188-9978-4730-a4bc-5d83d4570b35"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec0b63c6-689e-4f17-84ea-2c8dfccb293b",
              "title": "createCategory()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return a ICalCategory instance",
                  "fullTitle": "ical-generator Event createCategory() should return a ICalCategory instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.ok(event.createCategory() instanceof ICalCategory);",
                  "err": {},
                  "uuid": "179c99c0-4397-4d16-b2a1-c7241ab649a9",
                  "parentUUID": "ec0b63c6-689e-4f17-84ea-2c8dfccb293b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should pass data to instance",
                  "fullTitle": "ical-generator Event createCategory() should pass data to instance",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst category = event.createCategory({ name: 'foo' });\nassert.strictEqual(category.name(), 'foo');",
                  "err": {},
                  "uuid": "d61ae5c8-3df1-4b52-8742-401a7a2ba61f",
                  "parentUUID": "ec0b63c6-689e-4f17-84ea-2c8dfccb293b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "179c99c0-4397-4d16-b2a1-c7241ab649a9",
                "d61ae5c8-3df1-4b52-8742-401a7a2ba61f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "39663bc5-c77d-4530-8c7c-64dca1741aed",
              "title": "categories()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of categories…",
                  "fullTitle": "ical-generator Event categories() getter should return an array of categories…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.categories().length, 0);\nconst category = event.createCategory();\nassert.strictEqual(event.categories().length, 1);\nassert.deepStrictEqual(event.categories()[0], category);",
                  "err": {},
                  "uuid": "bac7d834-f484-4b7e-ae65-d2771353f815",
                  "parentUUID": "39663bc5-c77d-4530-8c7c-64dca1741aed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add category and return this",
                  "fullTitle": "ical-generator Event categories() setter should add category and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.categories([\n    { name: 'foo' },\n    { name: 'bar' }\n]);\nassert.strictEqual(event.categories().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "2d0085c4-b91c-46b2-9301-fa67f6f733ec",
                  "parentUUID": "39663bc5-c77d-4530-8c7c-64dca1741aed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bac7d834-f484-4b7e-ae65-d2771353f815",
                "2d0085c4-b91c-46b2-9301-fa67f6f733ec"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
              "title": "status()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event status() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.status(), null);\nevent.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(event.status(), 'CONFIRMED');\nevent.status(null);\nassert.strictEqual(event.status(), null);",
                  "err": {},
                  "uuid": "53b933ec-cbd4-4911-8295-f34d9f8de896",
                  "parentUUID": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event status() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.status(null));\nassert.deepStrictEqual(e, e.status(ICalEventStatus.CONFIRMED));",
                  "err": {},
                  "uuid": "d773179f-5d89-450f-b436-b4111a998c6d",
                  "parentUUID": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event status() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\ne.status(null);\nassert.strictEqual(e.status(), null);",
                  "err": {},
                  "uuid": "28b1a291-b727-4411-a893-07d53d8f039f",
                  "parentUUID": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event status() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.status(ICalEventStatus.CONFIRMED);\nassert.strictEqual(e.status(), 'CONFIRMED');\nassert.strictEqual(e.status(), ICalEventStatus.CONFIRMED);",
                  "err": {},
                  "uuid": "335d3f54-80a2-4fa4-9703-3309ebd13fac",
                  "parentUUID": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event status() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.status('COOKING');\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(Infinity);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(NaN);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);\nassert.throws(function () {\n    // @ts-ignore\n    e.status(-1);\n}, /Input must be one of the following: CONFIRMED, TENTATIVE, CANCELLED/);",
                  "err": {},
                  "uuid": "00976ec0-8cb2-4cdd-95ca-09ecccb691b0",
                  "parentUUID": "484bd3f5-3a10-49f2-a537-79f0cbd69266",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53b933ec-cbd4-4911-8295-f34d9f8de896",
                "d773179f-5d89-450f-b436-b4111a998c6d",
                "28b1a291-b727-4411-a893-07d53d8f039f",
                "335d3f54-80a2-4fa4-9703-3309ebd13fac",
                "00976ec0-8cb2-4cdd-95ca-09ecccb691b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3860f64-3723-499d-bdb6-e0a270d9359f",
              "title": "busystatus()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event busystatus() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.busystatus(), null);\nevent.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(event.busystatus(), 'BUSY');\nevent.busystatus(null);\nassert.strictEqual(event.busystatus(), null);",
                  "err": {},
                  "uuid": "b1ef7f69-6e71-4858-bc44-813f154dfb3c",
                  "parentUUID": "d3860f64-3723-499d-bdb6-e0a270d9359f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event busystatus() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.busystatus(null));\nassert.deepStrictEqual(e, e.busystatus(ICalEventBusyStatus.BUSY));",
                  "err": {},
                  "uuid": "7be1e51f-1da6-48d0-8a34-dee1d16dab30",
                  "parentUUID": "d3860f64-3723-499d-bdb6-e0a270d9359f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\ne.busystatus(null);\nassert.strictEqual(e.busystatus(), null);",
                  "err": {},
                  "uuid": "d4450b54-669a-4e4d-aad7-b11c2cd4648b",
                  "parentUUID": "d3860f64-3723-499d-bdb6-e0a270d9359f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event busystatus() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.busystatus(ICalEventBusyStatus.BUSY);\nassert.strictEqual(e.busystatus(), 'BUSY');",
                  "err": {},
                  "uuid": "3ed61624-d241-4692-ab49-b4c8eedae835",
                  "parentUUID": "d3860f64-3723-499d-bdb6-e0a270d9359f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event busystatus() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus('COOKING');\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(Infinity);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(NaN);\n}, /FREE, TENTATIVE, BUSY, OOF/);\nassert.throws(function () {\n    // @ts-ignore\n    e.busystatus(-1);\n}, /FREE, TENTATIVE, BUSY, OOF/);",
                  "err": {},
                  "uuid": "54f73ffe-01c9-40e3-bce5-c7946d62b3e0",
                  "parentUUID": "d3860f64-3723-499d-bdb6-e0a270d9359f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b1ef7f69-6e71-4858-bc44-813f154dfb3c",
                "7be1e51f-1da6-48d0-8a34-dee1d16dab30",
                "d4450b54-669a-4e4d-aad7-b11c2cd4648b",
                "3ed61624-d241-4692-ab49-b4c8eedae835",
                "54f73ffe-01c9-40e3-bce5-c7946d62b3e0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1d2b6519-9fde-4950-acad-1579332772a3",
              "title": "priority()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event priority() getter should return value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.priority(), null);\ne.priority(5);\nassert.strictEqual(e.priority(), 5);",
                  "err": {},
                  "uuid": "113565a3-b3ce-4c8e-a8e3-703234fffbea",
                  "parentUUID": "1d2b6519-9fde-4950-acad-1579332772a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event priority() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.priority(null));\nassert.deepStrictEqual(e, e.priority(5));",
                  "err": {},
                  "uuid": "9b73a6f3-ff53-40dc-b66e-7b56c1f94564",
                  "parentUUID": "1d2b6519-9fde-4950-acad-1579332772a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event priority() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.priority(5);\nassert.strictEqual(event.priority(), 5);\nassert.ok(event.toString().includes('PRIORITY:5'));",
                  "err": {},
                  "uuid": "bd44603a-60e9-4bb3-9cf2-c2c35b462f50",
                  "parentUUID": "1d2b6519-9fde-4950-acad-1579332772a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "113565a3-b3ce-4c8e-a8e3-703234fffbea",
                "9b73a6f3-ff53-40dc-b66e-7b56c1f94564",
                "bd44603a-60e9-4bb3-9cf2-c2c35b462f50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c467642a-c47d-48d3-8efa-f526176e630e",
              "title": "url()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event url() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(e.url(), null);\ne.url('http://sebbo.net/');\nassert.strictEqual(e.url(), 'http://sebbo.net/');",
                  "err": {},
                  "uuid": "5566a6c9-8f22-4c48-b2f7-919e19260c11",
                  "parentUUID": "c467642a-c47d-48d3-8efa-f526176e630e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event url() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.url(null));\nassert.deepStrictEqual(e, e.url('http://sebbo.net/'));",
                  "err": {},
                  "uuid": "32633b56-ddb2-4696-b382-7b44e12e71d6",
                  "parentUUID": "c467642a-c47d-48d3-8efa-f526176e630e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should update value",
                  "fullTitle": "ical-generator Event url() should update value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({\n    start: moment(),\n    summary: 'Example Event'\n}, new ICalCalendar());\nevent.url('http://github.com/sebbo2002/ical-generator');\nassert.strictEqual(event.url(), 'http://github.com/sebbo2002/ical-generator');",
                  "err": {},
                  "uuid": "216718c6-6b4c-4ce2-964d-10dca79442b2",
                  "parentUUID": "c467642a-c47d-48d3-8efa-f526176e630e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5566a6c9-8f22-4c48-b2f7-919e19260c11",
                "32633b56-ddb2-4696-b382-7b44e12e71d6",
                "216718c6-6b4c-4ce2-964d-10dca79442b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "dc6a2ef8-fd44-42aa-8708-c41f021081d2",
              "title": "createAttachment()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return this",
                  "fullTitle": "ical-generator Event createAttachment() should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(event.createAttachment('https://files.sebbo.net/calendar/attachments/foo'), event);",
                  "err": {},
                  "uuid": "ee73e5b0-2b2f-4c48-a616-f582e1d76b3c",
                  "parentUUID": "dc6a2ef8-fd44-42aa-8708-c41f021081d2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ee73e5b0-2b2f-4c48-a616-f582e1d76b3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ff2e56ef-dd5c-4889-89bc-7f7db66f16ea",
              "title": "attachments()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return an array of strings…",
                  "fullTitle": "ical-generator Event attachments() getter should return an array of strings…",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.attachments().length, 0);\nevent.createAttachment('https://files.sebbo.net/calendar/attachments/foo');\nassert.strictEqual(event.attachments().length, 1);\nassert.deepStrictEqual(typeof event.attachments()[0], 'string');",
                  "err": {},
                  "uuid": "4fbbdcd9-eb6a-4099-8df2-8688e0e180fb",
                  "parentUUID": "ff2e56ef-dd5c-4889-89bc-7f7db66f16ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should add url and return this",
                  "fullTitle": "ical-generator Event attachments() setter should add url and return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nconst foo = event.attachments([\n    'https://files.sebbo.net/calendar/attachments/foo',\n    'https://files.sebbo.net/calendar/attachments/bar'\n]);\nassert.strictEqual(event.attachments().length, 2);\nassert.deepStrictEqual(foo, event);",
                  "err": {},
                  "uuid": "a461b135-fdcd-4d0f-baaa-637558c9e644",
                  "parentUUID": "ff2e56ef-dd5c-4889-89bc-7f7db66f16ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4fbbdcd9-eb6a-4099-8df2-8688e0e180fb",
                "a461b135-fdcd-4d0f-baaa-637558c9e644"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57a23389-03f4-42a0-b2da-fc202ae8c853",
              "title": "created()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event created() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.created(new Date()));",
                  "err": {},
                  "uuid": "ecb47155-2f1a-4386-ac20-ccfb281b4f12",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event created() setter should work with moment",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment());\nassert.ok(moment.isMoment(e.created()));",
                  "err": {},
                  "uuid": "e9f9e9c0-b8f4-4f42-bf77-2f7c66f7dd3b",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event created() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "3fc6313b-6359-48d4-882f-b4b7c79c0756",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event created() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(moment().toJSON());\nassert.strictEqual(typeof e.created(), 'string');",
                  "err": {},
                  "uuid": "ee382a87-e0be-4788-9f66-836491656a65",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event created() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.created(new Date());\nassert.ok(e.created() instanceof Date);",
                  "err": {},
                  "uuid": "5cbfaf98-3f39-4fd5-9d02-9b700f06788c",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event created() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).created(now);\nassert.deepStrictEqual((_a = e.created()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "97b43ca0-b331-4bb6-99ee-ef2ab5d566a8",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when created is not a Date",
                  "fullTitle": "ical-generator Event created() should throw error when created is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.created('hallo'); // this will produce a \"Deprecation warning\", sorry 😇\n}, /`created`/);",
                  "err": {},
                  "uuid": "5866c9d4-7c3b-486a-9244-87ecbfc293bc",
                  "parentUUID": "57a23389-03f4-42a0-b2da-fc202ae8c853",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ecb47155-2f1a-4386-ac20-ccfb281b4f12",
                "e9f9e9c0-b8f4-4f42-bf77-2f7c66f7dd3b",
                "3fc6313b-6359-48d4-882f-b4b7c79c0756",
                "ee382a87-e0be-4788-9f66-836491656a65",
                "5cbfaf98-3f39-4fd5-9d02-9b700f06788c",
                "97b43ca0-b331-4bb6-99ee-ef2ab5d566a8",
                "5866c9d4-7c3b-486a-9244-87ecbfc293bc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
              "title": "lastModified()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event lastModified() setter should return this",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.lastModified(new Date()));",
                  "err": {},
                  "uuid": "62dae08a-b7e2-4b79-bcdd-10998cdcf6c6",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with moment",
                  "fullTitle": "ical-generator Event lastModified() setter should work with moment",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(moment());\nassert.ok(moment.isMoment(e.lastModified()));",
                  "err": {},
                  "uuid": "5434121f-db37-40ea-a889-3134686d19c5",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Date",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "e9893deb-bdb5-4e52-9391-236d6dcf349f",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with String",
                  "fullTitle": "ical-generator Event lastModified() setter should work with String",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nconst date = moment().toJSON();\ne.lastModified(date);\nassert.strictEqual(e.lastModified(), date);",
                  "err": {},
                  "uuid": "83dade45-0639-4aa5-94af-bd84fc85366b",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should work with Number",
                  "fullTitle": "ical-generator Event lastModified() setter should work with Number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.lastModified(new Date());\nassert.ok(e.lastModified() instanceof Date);",
                  "err": {},
                  "uuid": "4306a29d-ee9e-47b1-8ac2-8f87e3e33654",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event lastModified() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var _a;\nconst now = new Date();\nconst e = new ICalEvent({}, new ICalCalendar()).lastModified(now);\nassert.deepStrictEqual((_a = e.lastModified()) === null || _a === void 0 ? void 0 : _a.valueOf(), now.getTime());",
                  "err": {},
                  "uuid": "6856ce05-6673-4fee-be58-5b7a01723d0d",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when lastModified is not a Date",
                  "fullTitle": "ical-generator Event lastModified() should throw error when lastModified is not a Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    e.lastModified('hallo');\n}, /`lastModified`/);",
                  "err": {},
                  "uuid": "9328ccaa-7966-4468-aed8-7fc202c4d12c",
                  "parentUUID": "b6ae3ae4-5671-4068-947f-9ef916c92a4b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "62dae08a-b7e2-4b79-bcdd-10998cdcf6c6",
                "5434121f-db37-40ea-a889-3134686d19c5",
                "e9893deb-bdb5-4e52-9391-236d6dcf349f",
                "83dade45-0639-4aa5-94af-bd84fc85366b",
                "4306a29d-ee9e-47b1-8ac2-8f87e3e33654",
                "6856ce05-6673-4fee-be58-5b7a01723d0d",
                "9328ccaa-7966-4468-aed8-7fc202c4d12c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
              "title": "class()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event class() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.class(), null);\nevent.class(ICalEventClass.PRIVATE);\nassert.strictEqual(event.class(), 'PRIVATE');\nevent.class(null);\nassert.strictEqual(event.class(), null);",
                  "err": {},
                  "uuid": "735c1ffb-d0e0-43a6-8f3d-7dc43cd6ca6a",
                  "parentUUID": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event class() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.class(null));\nassert.deepStrictEqual(e, e.class(ICalEventClass.PRIVATE));",
                  "err": {},
                  "uuid": "08aa1ec8-b0f2-4a89-90ec-438865b1f64b",
                  "parentUUID": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event class() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\ne.class(null);\nassert.strictEqual(e.class(), null);",
                  "err": {},
                  "uuid": "d9d62091-c869-4a45-9f58-07cfbbca8914",
                  "parentUUID": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event class() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.class(ICalEventClass.PRIVATE);\nassert.strictEqual(e.class(), 'PRIVATE');\nassert.strictEqual(e.class(), ICalEventClass.PRIVATE);",
                  "err": {},
                  "uuid": "b3632096-ee5d-4d5b-bf68-f4efd51b9499",
                  "parentUUID": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event class() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.class('COOKING');\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(Infinity);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(NaN);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);\nassert.throws(function () {\n    // @ts-ignore\n    e.class(-1);\n}, /Input must be one of the following: PUBLIC, PRIVATE, CONFIDENTIAL/);",
                  "err": {},
                  "uuid": "32e2dda3-de59-42ab-9d6d-dd5ea8eda44c",
                  "parentUUID": "17b9fe86-d760-4bf5-ab23-5845d978b15d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "735c1ffb-d0e0-43a6-8f3d-7dc43cd6ca6a",
                "08aa1ec8-b0f2-4a89-90ec-438865b1f64b",
                "d9d62091-c869-4a45-9f58-07cfbbca8914",
                "b3632096-ee5d-4d5b-bf68-f4efd51b9499",
                "32e2dda3-de59-42ab-9d6d-dd5ea8eda44c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "629c2d18-4049-46f7-8fd5-0997dad7f588",
              "title": "x()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "is there",
                  "fullTitle": "ical-generator Event x() is there",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.x('X-FOO', 'bar'));",
                  "err": {},
                  "uuid": "cbb2cbeb-d908-4591-a9f9-49153b3fda1e",
                  "parentUUID": "629c2d18-4049-46f7-8fd5-0997dad7f588",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cbb2cbeb-d908-4591-a9f9-49153b3fda1e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "338dff9d-f3a6-4d45-aade-93d065101f94",
              "title": "toJSON()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should maybe work",
                  "fullTitle": "ical-generator Event toJSON() should maybe work",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = moment().add(1, 'month');\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date);\nassert.strictEqual(event.toJSON().summary, 'foo', 'summary is okay');\nassert.deepStrictEqual(event.toJSON().start, date.toJSON(), 'start is okay');\nassert.strictEqual(typeof event.toJSON().start, 'string', 'start is string');",
                  "err": {},
                  "uuid": "1684e12d-69ab-4039-b785-a0e2c63c7166",
                  "parentUUID": "338dff9d-f3a6-4d45-aade-93d065101f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should stringify RRule objects",
                  "fullTitle": "ical-generator Event toJSON() should stringify RRule objects",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nconst rule = new rrule.RRule({\n    freq: rrule.RRule.WEEKLY,\n    interval: 5,\n    byweekday: [rrule.RRule.MO, rrule.RRule.FR],\n    dtstart: date,\n    until: new Date(Date.UTC(2012, 12, 31))\n});\nconst event = new ICalEvent({}, new ICalCalendar()).summary('foo').start(date).repeating(rule);\nconst json = event.toJSON();\nconst before = event.toString();\nassert.ok(typeof json.repeating === 'string');\nconst event2 = new ICalEvent(event.toJSON(), new ICalCalendar());\nconst after = event2.toString();\nassert.strictEqual(after, before);",
                  "err": {},
                  "uuid": "17a029b9-4ec9-4540-9bc6-5de3eb93bbc3",
                  "parentUUID": "338dff9d-f3a6-4d45-aade-93d065101f94",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should be compatible with constructor (type check)",
                  "fullTitle": "ical-generator Event toJSON() should be compatible with constructor (type check)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const a = new ICalEvent({}, new ICalCalendar());\nnew ICalEvent(a.toJSON(), new ICalCalendar());",
                  "err": {},
                  "uuid": "2ebd95f4-8773-479f-8f62-5b6b5663d914",
                  "parentUUID": "338dff9d-f3a6-4d45-aade-93d065101f94",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1684e12d-69ab-4039-b785-a0e2c63c7166",
                "17a029b9-4ec9-4540-9bc6-5de3eb93bbc3",
                "2ebd95f4-8773-479f-8f62-5b6b5663d914"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
              "title": "transparency()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "getter should return value",
                  "fullTitle": "ical-generator Event transparency() getter should return value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const event = new ICalEvent({}, new ICalCalendar());\nassert.strictEqual(event.transparency(), null);\nevent.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(event.transparency(), 'OPAQUE');\nevent.transparency(null);\nassert.strictEqual(event.transparency(), null);",
                  "err": {},
                  "uuid": "3d0537f6-5861-40a7-831e-14f6c01a9d44",
                  "parentUUID": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should return this",
                  "fullTitle": "ical-generator Event transparency() setter should return this",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.deepStrictEqual(e, e.transparency(null));\nassert.deepStrictEqual(e, e.transparency(ICalEventTransparency.TRANSPARENT));",
                  "err": {},
                  "uuid": "f908ca0c-6c1d-464c-99f6-ff98789c5de1",
                  "parentUUID": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting null",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting null",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\ne.transparency(null);\nassert.strictEqual(e.transparency(), null);",
                  "err": {},
                  "uuid": "1fd51287-f915-4d32-a839-d3a411ee7c80",
                  "parentUUID": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "setter should allow setting valid value",
                  "fullTitle": "ical-generator Event transparency() setter should allow setting valid value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\ne.transparency(ICalEventTransparency.OPAQUE);\nassert.strictEqual(e.transparency(), 'OPAQUE');",
                  "err": {},
                  "uuid": "4ac14930-aa2b-4674-8658-da70999e9fe8",
                  "parentUUID": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw error when method not allowed",
                  "fullTitle": "ical-generator Event transparency() should throw error when method not allowed",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({}, new ICalCalendar());\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency('COOKING');\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(Infinity);\n}, /TRANSPARENT, OPAQUE/);\nassert.throws(function () {\n    // @ts-ignore\n    e.transparency(-1);\n}, /TRANSPARENT, OPAQUE/);",
                  "err": {},
                  "uuid": "ec5d40c0-3241-4c5d-808c-e342f1d8c4d0",
                  "parentUUID": "d2a7c560-f4e8-4dc6-928e-f1ac4a095937",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d0537f6-5861-40a7-831e-14f6c01a9d44",
                "f908ca0c-6c1d-464c-99f6-ff98789c5de1",
                "1fd51287-f915-4d32-a839-d3a411ee7c80",
                "4ac14930-aa2b-4674-8658-da70999e9fe8",
                "ec5d40c0-3241-4c5d-808c-e342f1d8c4d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5b25b4b5-36f5-40a9-868f-3c4b51c730ff",
              "title": "toString()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/event.ts",
              "file": "/test/event.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "shoult throw an error without start",
                  "fullTitle": "ical-generator Event toString() shoult throw an error without start",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    summary: 'Example Event'\n}, new ICalCalendar());\nassert.throws(function () {\n    e.toString();\n}, /`start`/);",
                  "err": {},
                  "uuid": "0f3b826e-b846-4b68-9610-f4b90435facf",
                  "parentUUID": "5b25b4b5-36f5-40a9-868f-3c4b51c730ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should make use of escaping",
                  "fullTitle": "ical-generator Event toString() should make use of escaping",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const e = new ICalEvent({\n    start: new Date(),\n    end: new Date(new Date().getTime() + 3600000),\n    summary: 'Hel\\\\\\\\lo\\nW;orl,d'\n}, new ICalCalendar());\nassert.ok(e.toString().indexOf('Hel\\\\\\\\\\\\\\\\lo\\\\nW\\\\;orl\\\\,d') > -1);",
                  "err": {},
                  "uuid": "dc234737-82a2-4136-a513-9dfce3f1c86b",
                  "parentUUID": "5b25b4b5-36f5-40a9-868f-3c4b51c730ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should render correct UIDs",
                  "fullTitle": "ical-generator Event toString() should render correct UIDs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nconst event = new ICalEvent({\n    id: 42,\n    start: moment(),\n    summary: ':)'\n}, cal);\nassert.ok(event.toString().indexOf('UID:42\\r') > -1);",
                  "err": {},
                  "uuid": "8b782036-c695-4942-8f14-8fee7e5eea48",
                  "parentUUID": "5b25b4b5-36f5-40a9-868f-3c4b51c730ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should include wkst only if provided",
                  "fullTitle": "ical-generator Event toString() should include wkst only if provided",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const cal = new ICalCalendar();\nlet event = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY\n    }\n}, cal);\nassert.ok(!event.toString().includes('WKST'), 'without WKST');\nevent = new ICalEvent({\n    start: moment(),\n    end: moment(),\n    repeating: {\n        freq: ICalEventRepeatingFreq.WEEKLY,\n        startOfWeek: ICalWeekday.SU\n    }\n}, cal);\nassert.ok(event.toString().includes('WKST'), 'with WKST');",
                  "err": {},
                  "uuid": "2978a06c-3ff9-4d3b-9e59-dd497830044e",
                  "parentUUID": "5b25b4b5-36f5-40a9-868f-3c4b51c730ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0f3b826e-b846-4b68-9610-f4b90435facf",
                "dc234737-82a2-4136-a513-9dfce3f1c86b",
                "8b782036-c695-4942-8f14-8fee7e5eea48",
                "2978a06c-3ff9-4d3b-9e59-dd497830044e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8e953773-0091-4d57-8606-361ef751906c",
          "title": "ical-generator Index",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
          "file": "/test/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6db0b58b-0c00-46d4-acc8-e767b0510008",
              "title": "default",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should be a function",
                  "fullTitle": "ical-generator Index default should be a function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(typeof ical, 'function');",
                  "err": {},
                  "uuid": "54cd904a-3133-471e-961d-eb662dac0aa5",
                  "parentUUID": "6db0b58b-0c00-46d4-acc8-e767b0510008",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return a ICalCalendar",
                  "fullTitle": "ical-generator Index default should return a ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ical() instanceof ICalCalendar);",
                  "err": {},
                  "uuid": "0060632c-d403-493a-967f-3b1bde920dc7",
                  "parentUUID": "6db0b58b-0c00-46d4-acc8-e767b0510008",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54cd904a-3133-471e-961d-eb662dac0aa5",
                "0060632c-d403-493a-967f-3b1bde920dc7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a1fbbf6-41fe-4a44-b3d4-ca07f54a358c",
              "title": "Alarm",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAlarm",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarm",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarm);",
                  "err": {},
                  "uuid": "41631d31-f576-4926-87f0-7a65ccd17d06",
                  "parentUUID": "4a1fbbf6-41fe-4a44-b3d4-ca07f54a358c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAlarmType",
                  "fullTitle": "ical-generator Index Alarm should export ICalAlarmType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAlarmType);",
                  "err": {},
                  "uuid": "b5a4bed7-74c4-494a-bbcd-fda540545442",
                  "parentUUID": "4a1fbbf6-41fe-4a44-b3d4-ca07f54a358c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "41631d31-f576-4926-87f0-7a65ccd17d06",
                "b5a4bed7-74c4-494a-bbcd-fda540545442"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c23332c1-3393-4d2a-b1dd-f9bf106acde2",
              "title": "Attendee",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalAttendee",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendee",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendee);",
                  "err": {},
                  "uuid": "b4c27b5e-b78e-41c5-9e49-587b8f1d75f8",
                  "parentUUID": "c23332c1-3393-4d2a-b1dd-f9bf106acde2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeType",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeType",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeType);",
                  "err": {},
                  "uuid": "c22878b0-7cff-4da0-8fa5-6e4dd0a094f9",
                  "parentUUID": "c23332c1-3393-4d2a-b1dd-f9bf106acde2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeRole",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeRole",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeRole);",
                  "err": {},
                  "uuid": "7169b378-956f-4cc9-aeaa-6b364cc9053a",
                  "parentUUID": "c23332c1-3393-4d2a-b1dd-f9bf106acde2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalAttendeeStatus",
                  "fullTitle": "ical-generator Index Attendee should export ICalAttendeeStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalAttendeeStatus);",
                  "err": {},
                  "uuid": "f551d07c-bac0-4da2-a681-a9c06dd5a283",
                  "parentUUID": "c23332c1-3393-4d2a-b1dd-f9bf106acde2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b4c27b5e-b78e-41c5-9e49-587b8f1d75f8",
                "c22878b0-7cff-4da0-8fa5-6e4dd0a094f9",
                "7169b378-956f-4cc9-aeaa-6b364cc9053a",
                "f551d07c-bac0-4da2-a681-a9c06dd5a283"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8736c192-43cf-45e4-a3ba-4295ef871b6b",
              "title": "Calendar",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCalendar",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendar",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendar);",
                  "err": {},
                  "uuid": "f754076c-d4ad-487b-bb0d-0df70bfa026f",
                  "parentUUID": "8736c192-43cf-45e4-a3ba-4295ef871b6b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalCalendarMethod",
                  "fullTitle": "ical-generator Index Calendar should export ICalCalendarMethod",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCalendarMethod);",
                  "err": {},
                  "uuid": "44f0c74a-f4e8-4295-b4fc-0aa2ac23926c",
                  "parentUUID": "8736c192-43cf-45e4-a3ba-4295ef871b6b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f754076c-d4ad-487b-bb0d-0df70bfa026f",
                "44f0c74a-f4e8-4295-b4fc-0aa2ac23926c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ef464d3-a40e-461c-85bb-7528fa90419a",
              "title": "Category",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalCategory",
                  "fullTitle": "ical-generator Index Category should export ICalCategory",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalCategory);",
                  "err": {},
                  "uuid": "b44c2bf4-3ac2-451b-bd76-fc1cc3efd4fa",
                  "parentUUID": "8ef464d3-a40e-461c-85bb-7528fa90419a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b44c2bf4-3ac2-451b-bd76-fc1cc3efd4fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2ad50cd4-2551-4762-9396-bc458a1444e2",
              "title": "Event",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEvent",
                  "fullTitle": "ical-generator Index Event should export ICalEvent",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEvent);",
                  "err": {},
                  "uuid": "909b4c22-53af-438f-83d1-c189ea64c741",
                  "parentUUID": "2ad50cd4-2551-4762-9396-bc458a1444e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventStatus);",
                  "err": {},
                  "uuid": "79d7611c-792a-46b7-91bd-1359245957c5",
                  "parentUUID": "2ad50cd4-2551-4762-9396-bc458a1444e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventBusyStatus",
                  "fullTitle": "ical-generator Index Event should export ICalEventBusyStatus",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventBusyStatus);",
                  "err": {},
                  "uuid": "feaa2c1c-74e3-45b4-a689-3ae358ba352f",
                  "parentUUID": "2ad50cd4-2551-4762-9396-bc458a1444e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalEventTransparency",
                  "fullTitle": "ical-generator Index Event should export ICalEventTransparency",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventTransparency);",
                  "err": {},
                  "uuid": "499361e9-39c6-4572-a83c-c044bd4bdfad",
                  "parentUUID": "2ad50cd4-2551-4762-9396-bc458a1444e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "909b4c22-53af-438f-83d1-c189ea64c741",
                "79d7611c-792a-46b7-91bd-1359245957c5",
                "feaa2c1c-74e3-45b4-a689-3ae358ba352f",
                "499361e9-39c6-4572-a83c-c044bd4bdfad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3d27057d-0b1f-4bf9-b2bc-3eeaf409b7f5",
              "title": "Type",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export ICalEventRepeatingFreq",
                  "fullTitle": "ical-generator Index Type should export ICalEventRepeatingFreq",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalEventRepeatingFreq);",
                  "err": {},
                  "uuid": "43091ca6-5287-4db0-b303-7138c7590dfd",
                  "parentUUID": "3d27057d-0b1f-4bf9-b2bc-3eeaf409b7f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export ICalWeekday",
                  "fullTitle": "ical-generator Index Type should export ICalWeekday",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(ICalWeekday);",
                  "err": {},
                  "uuid": "9efeefa7-68c7-4dfe-a79a-bc35bc8935a9",
                  "parentUUID": "3d27057d-0b1f-4bf9-b2bc-3eeaf409b7f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43091ca6-5287-4db0-b303-7138c7590dfd",
                "9efeefa7-68c7-4dfe-a79a-bc35bc8935a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f7989df8-fbdd-4a7a-99ee-f22824801f0e",
              "title": "Tools",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/index.ts",
              "file": "/test/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should export formatDate",
                  "fullTitle": "ical-generator Index Tools should export formatDate",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDate === 'function');",
                  "err": {},
                  "uuid": "05752a7f-3abd-4b97-85a7-ee302750f660",
                  "parentUUID": "f7989df8-fbdd-4a7a-99ee-f22824801f0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export formatDateTZ",
                  "fullTitle": "ical-generator Index Tools should export formatDateTZ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof formatDateTZ === 'function');",
                  "err": {},
                  "uuid": "545c84f8-7e17-4131-8152-9400606cc1b9",
                  "parentUUID": "f7989df8-fbdd-4a7a-99ee-f22824801f0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export escape",
                  "fullTitle": "ical-generator Index Tools should export escape",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof escape === 'function');",
                  "err": {},
                  "uuid": "bdd62fd9-50d9-43b9-ac52-6bad4a95bc79",
                  "parentUUID": "f7989df8-fbdd-4a7a-99ee-f22824801f0e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should export foldLines",
                  "fullTitle": "ical-generator Index Tools should export foldLines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.ok(typeof foldLines === 'function');",
                  "err": {},
                  "uuid": "030f1ce5-06a2-49c2-a5ec-4f1061b80adc",
                  "parentUUID": "f7989df8-fbdd-4a7a-99ee-f22824801f0e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05752a7f-3abd-4b97-85a7-ee302750f660",
                "545c84f8-7e17-4131-8152-9400606cc1b9",
                "bdd62fd9-50d9-43b9-ac52-6bad4a95bc79",
                "030f1ce5-06a2-49c2-a5ec-4f1061b80adc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6f616ce3-7e4b-4c50-8061-a3a1929b4224",
          "title": "Issues",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
          "file": "/test/issues.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "59d0689d-4e34-4c9f-8afa-3fe85d3330e2",
              "title": "Issue #38",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with Europe/Berlin",
                  "fullTitle": "Issues Issue #38 should work with Europe/Berlin",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "86333cb5-0da7-4220-a4b4-a7b1a17d1223",
                  "parentUUID": "59d0689d-4e34-4c9f-8afa-3fe85d3330e2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Brazil/East",
                  "fullTitle": "Issues Issue #38 should work with Brazil/East",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Brazil/East',\n    events: [{\n            start: moment('2016-05-01T03:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('DTSTART;VALUE=DATE:20160501') > -1);",
                  "err": {},
                  "uuid": "3a9f3a61-704b-4bb1-a629-e82357ea3f77",
                  "parentUUID": "59d0689d-4e34-4c9f-8afa-3fe85d3330e2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86333cb5-0da7-4220-a4b4-a7b1a17d1223",
                "3a9f3a61-704b-4bb1-a629-e82357ea3f77"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f1fec63e-e68e-451a-887a-63065df31023",
              "title": "Issue #123",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with repeating bySetPos",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.SU],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=SU;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "d46c3744-bce2-424a-a8d2-25d552e0a2c0",
                  "parentUUID": "f1fec63e-e68e-451a-887a-63065df31023",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with repeating bySetPos by taking all elements of the byDay array",
                  "fullTitle": "Issues Issue #123 should work with repeating bySetPos by taking all elements of the byDay array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    events: [{\n            start: moment('2016-04-30T22:00:00.000Z'),\n            end: moment('2016-05-01T00:00:00.000Z'),\n            summary: 'Example Event',\n            allDay: true,\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 3,\n                interval: 1,\n                byDay: [ICalWeekday.MO, ICalWeekday.FR],\n                bySetPos: 3\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1;BYDAY=MO,FR;BYSETPOS=3') > -1);",
                  "err": {},
                  "uuid": "9f608da8-0584-4ced-ab37-65fe793a2b62",
                  "parentUUID": "f1fec63e-e68e-451a-887a-63065df31023",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d46c3744-bce2-424a-a8d2-25d552e0a2c0",
                "9f608da8-0584-4ced-ab37-65fe793a2b62"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b5efe51e-c992-4e70-a5e6-e0d05804253b",
              "title": "Issue #154",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "it should correctly set DTSTART when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTSTART when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "51d3533b-3527-4b57-8517-e001ddaee938",
                  "parentUUID": "b5efe51e-c992-4e70-a5e6-e0d05804253b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set DTEND when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set DTEND when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "c8b717ee-6b16-4f3a-877f-c2bf7640e9a5",
                  "parentUUID": "b5efe51e-c992-4e70-a5e6-e0d05804253b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "fullTitle": "Issues Issue #154 it should correctly set RECURRENCE-ID when using different timezone in calendar and event",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    timezone: 'America/Buenos_Aires',\n    events: [\n        {\n            start: moment(1553219772000),\n            end: moment(1553219772000),\n            recurrenceId: moment(1553219772000),\n            timezone: 'America/La_Paz'\n        }\n    ]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf(`${prop};TZID=America/La_Paz:20190321T215612`) > -1, str);",
                  "err": {},
                  "uuid": "f59792d6-2a44-4bf1-82cd-018b765792aa",
                  "parentUUID": "b5efe51e-c992-4e70-a5e6-e0d05804253b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "51d3533b-3527-4b57-8517-e001ddaee938",
                "c8b717ee-6b16-4f3a-877f-c2bf7640e9a5",
                "f59792d6-2a44-4bf1-82cd-018b765792aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8e4e47a9-03a4-4838-9a7c-b408fdff0a0b",
              "title": "Issue #210",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should repeat/exclude with Europe/Berlin",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with Europe/Berlin",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'Europe/Berlin',\n    events: [{\n            start: moment('2020-08-13T00:00:00+01:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00+01:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=Europe/Berlin:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "77a33ffa-ea35-4cd1-a1ee-b3f3d6cc8136",
                  "parentUUID": "8e4e47a9-03a4-4838-9a7c-b408fdff0a0b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should repeat/exclude with America/New_York",
                  "fullTitle": "Issues Issue #210 should repeat/exclude with America/New_York",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    prodId: '//superman-industries.com//ical-generator//EN',\n    timezone: 'America/New_York',\n    events: [{\n            start: moment('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: {\n                freq: ICalEventRepeatingFreq.MONTHLY,\n                count: 12,\n                exclude: moment('2020-12-13T00:00:00-05:00')\n            }\n        }]\n});\nconst str = calendar.toString();\nassert.ok(str.indexOf('EXDATE;TZID=America/New_York:20201213T000000') > -1);",
                  "err": {},
                  "uuid": "2f9d06e3-6674-408d-bf34-d4890ec3236b",
                  "parentUUID": "8e4e47a9-03a4-4838-9a7c-b408fdff0a0b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "77a33ffa-ea35-4cd1-a1ee-b3f3d6cc8136",
                "2f9d06e3-6674-408d-bf34-d4890ec3236b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5fb3db1f-cd0b-4f68-9969-a3530a9cc6c9",
              "title": "Issue #236",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should look like in the example",
                  "fullTitle": "Issues Issue #236 should look like in the example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            location: {\n                title: 'Los Angeles, California, United States',\n                geo: {\n                    lon: -118.24368,\n                    lat: 34.05223,\n                },\n                radius: 400\n            }\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:Example Event',\n    'LOCATION:Los Angeles\\\\, California\\\\, United States',\n    'X-APPLE-STRUCTURED-LOCATION;VALUE=URI;X-APPLE-RADIUS=400;X-TITLE=Los Angel',\n    ' es\\\\, California\\\\, United States:geo:34.05223,-118.24368',\n    'GEO:34.05223;-118.24368',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "887bf056-1880-44f8-9a88-71da798e074a",
                  "parentUUID": "5fb3db1f-cd0b-4f68-9969-a3530a9cc6c9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "887bf056-1880-44f8-9a88-71da798e074a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4ee9a81d-e634-444c-b7b9-2db4600cbfe5",
              "title": "Issue #377",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not escape quotes in summary",
                  "fullTitle": "Issues Issue #377 should not escape quotes in summary",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [\n        {\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'My \"quoted\" string'\n        }\n    ]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'SUMMARY:My \"quoted\" string',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "b198ae33-81c5-4d0d-8e27-d5602303b4a1",
                  "parentUUID": "4ee9a81d-e634-444c-b7b9-2db4600cbfe5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b198ae33-81c5-4d0d-8e27-d5602303b4a1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d08c69ed-4a01-40f7-884a-3016a313caa7",
              "title": "Issue #442",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should generate floating repeat until value if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat until value if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "90f51c82-4f7f-4bca-a647-ea8fce571c32",
                  "parentUUID": "d08c69ed-4a01-40f7-884a-3016a313caa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should generate floating repeat exclusion dates if event is a floating event",
                  "fullTitle": "Issues Issue #442 should generate floating repeat exclusion dates if event is a floating event",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "aa7b76b9-11cc-46af-bfc9-1dcdb0f29e1c",
                  "parentUUID": "d08c69ed-4a01-40f7-884a-3016a313caa7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [],
              "pending": [
                "90f51c82-4f7f-4bca-a647-ea8fce571c32",
                "aa7b76b9-11cc-46af-bfc9-1dcdb0f29e1c"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "598f1474-2afa-4592-9e14-6cb15db43bc8",
              "title": "Issue #459",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/issues.ts",
              "file": "/test/issues.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "event.repeating should work with `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work with `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "7e251d7b-d119-4948-b7af-5bef1c019d6b",
                  "parentUUID": "598f1474-2afa-4592-9e14-6cb15db43bc8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "event.repeating should work without `RRULE:` prefix",
                  "fullTitle": "Issues Issue #459 event.repeating should work without `RRULE:` prefix",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const calendar = ical({\n    events: [{\n            id: 'foo',\n            start: new Date('2020-08-13T00:00:00-05:00'),\n            stamp: new Date('2020-08-13T00:00:00-05:00'),\n            summary: 'Example Event',\n            repeating: 'FREQ=MONTHLY;COUNT=3;INTERVAL=1'\n        }]\n});\nassert.strictEqual(calendar.toString(), [\n    'BEGIN:VCALENDAR',\n    'VERSION:2.0',\n    'PRODID:-//sebbo.net//ical-generator//EN',\n    'BEGIN:VEVENT',\n    'UID:foo',\n    'SEQUENCE:0',\n    'DTSTAMP:20200813T050000Z',\n    'DTSTART:20200813T050000Z',\n    'RRULE:FREQ=MONTHLY;COUNT=3;INTERVAL=1',\n    'SUMMARY:Example Event',\n    'END:VEVENT',\n    'END:VCALENDAR'\n].join('\\r\\n'));",
                  "err": {},
                  "uuid": "e62092c4-b216-431f-8754-80d9611c9d07",
                  "parentUUID": "598f1474-2afa-4592-9e14-6cb15db43bc8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e251d7b-d119-4948-b7af-5bef1c019d6b",
                "e62092c4-b216-431f-8754-80d9611c9d07"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "eb6b3585-d4b5-4bb6-83bb-99185696d7e4",
          "title": "ICalTools",
          "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
          "file": "/test/tools.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d60f71ea-5368-4930-927c-1e7d3c1701e0",
              "title": "formatDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                  "title": "Date / String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "timezone=0 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "4a944f21-985f-4e7b-bdd5-808ca98248cc",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "8cc520eb-e4a8-41f4-8aa6-0362410c7bb6",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, false), '20180705');",
                      "err": {},
                      "uuid": "c5458725-35d7-446c-abf3-fdc78df33574",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=0 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=0 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, '2018-07-05T18:24:00.052Z', true, true), '20180705');",
                      "err": {},
                      "uuid": "552bd4b2-16b9-41f1-ae12-2ec63b726b7b",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, false), '20180705T182400');",
                      "err": {},
                      "uuid": "c1b51057-f47d-4524-bbd1-38feb481596c",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=0 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=0 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "24924700-4fa7-4609-8804-622be566744e",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=0",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=0",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, false), '20180705');",
                      "err": {},
                      "uuid": "9cd8bf4d-8683-4a82-a4c7-03b3ca6e6ddb",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "timezone=1 dateonly=1 floating=1",
                      "fullTitle": "ICalTools formatDate() Date / String timezone=1 dateonly=1 floating=1",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Europe/Berlin', '2018-07-05T18:24:00.052', true, true), '20180705');",
                      "err": {},
                      "uuid": "ca8b8159-6c42-4088-a925-60df142c8e19",
                      "parentUUID": "807812d3-e2d0-4c1b-9718-61cdf9809040",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "4a944f21-985f-4e7b-bdd5-808ca98248cc",
                    "8cc520eb-e4a8-41f4-8aa6-0362410c7bb6",
                    "c5458725-35d7-446c-abf3-fdc78df33574",
                    "552bd4b2-16b9-41f1-ae12-2ec63b726b7b",
                    "c1b51057-f47d-4524-bbd1-38feb481596c",
                    "24924700-4fa7-4609-8804-622be566744e",
                    "9cd8bf4d-8683-4a82-a4c7-03b3ca6e6ddb",
                    "ca8b8159-6c42-4088-a925-60df142c8e19"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "24b4ff8a-89de-403b-bff8-7914053b83b2",
                  "title": "moment.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "694c0c78-b9d1-4cf8-86f5-ce424dc78695",
                      "parentUUID": "24b4ff8a-89de-403b-bff8-7914053b83b2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', moment('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "a6b9fc06-dde4-4cd9-8418-8d9da05eff6b",
                      "parentUUID": "24b4ff8a-89de-403b-bff8-7914053b83b2",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, moment('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "1657cc58-d2e2-45b2-9da4-15171cd3103b",
                      "parentUUID": "24b4ff8a-89de-403b-bff8-7914053b83b2",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "694c0c78-b9d1-4cf8-86f5-ce424dc78695",
                    "a6b9fc06-dde4-4cd9-8418-8d9da05eff6b",
                    "1657cc58-d2e2-45b2-9da4-15171cd3103b"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "42429e00-9641-4f3d-8cfd-91b4fe3ba86d",
                  "title": "moment-timezone.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "e81f0421-ea02-4dd4-b22f-6d1cb776449e",
                      "parentUUID": "42429e00-9641-4f3d-8cfd-91b4fe3ba86d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', momentTz('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "bdc03dfe-670c-461e-8afd-1108b50cb9c4",
                      "parentUUID": "42429e00-9641-4f3d-8cfd-91b4fe3ba86d",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() moment-timezone.js should work with floating flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, momentTz('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "34b4aa2a-ea65-4c12-ac77-5052da32776c",
                      "parentUUID": "42429e00-9641-4f3d-8cfd-91b4fe3ba86d",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e81f0421-ea02-4dd4-b22f-6d1cb776449e",
                    "bdc03dfe-670c-461e-8afd-1108b50cb9c4",
                    "34b4aa2a-ea65-4c12-ac77-5052da32776c"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4f71c3e5-c1c4-47b7-99ea-5aa640f89f6f",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Luxon should work without setting a timezone",
                      "timedOut": false,
                      "duration": 20,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "e826f276-5cf7-4166-88f9-80cf50df70d5",
                      "parentUUID": "4f71c3e5-c1c4-47b7-99ea-5aa640f89f6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Luxon should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', DateTime.fromISO('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "f3c75acb-421b-4cfd-9791-66a646d052df",
                      "parentUUID": "4f71c3e5-c1c4-47b7-99ea-5aa640f89f6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "14921db3-050b-4b59-b177-254fee21ab36",
                      "parentUUID": "4f71c3e5-c1c4-47b7-99ea-5aa640f89f6f",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Luxon should work with dateonly flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, DateTime.fromISO('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "eba6b6f7-0522-45bd-b6e6-4085befffcbf",
                      "parentUUID": "4f71c3e5-c1c4-47b7-99ea-5aa640f89f6f",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "e826f276-5cf7-4166-88f9-80cf50df70d5",
                    "f3c75acb-421b-4cfd-9791-66a646d052df",
                    "14921db3-050b-4b59-b177-254fee21ab36",
                    "eba6b6f7-0522-45bd-b6e6-4085befffcbf"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 23,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "4027850f-dccb-4ba9-89ff-08ba133a4904",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work without setting a timezone",
                      "fullTitle": "ICalTools formatDate() Day.js should work without setting a timezone",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T182400Z');",
                      "err": {},
                      "uuid": "3375ebb7-31f5-481f-b62f-72ea43740144",
                      "parentUUID": "4027850f-dccb-4ba9-89ff-08ba133a4904",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with timezone in event / calendar (with moment-timezone)",
                      "fullTitle": "ICalTools formatDate() Day.js should work with timezone in event / calendar (with moment-timezone)",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate('Canada/Saskatchewan', dayjs('2018-07-05T18:24:00.052Z'), false, false), '20180705T122400');",
                      "err": {},
                      "uuid": "c4a58ed9-5f86-4115-a499-9b4d571e3e26",
                      "parentUUID": "4027850f-dccb-4ba9-89ff-08ba133a4904",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with floating flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with floating flag",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), false, true), '20180705T182400');",
                      "err": {},
                      "uuid": "0eba75ba-fa67-4399-aab8-4a6e471b8948",
                      "parentUUID": "4027850f-dccb-4ba9-89ff-08ba133a4904",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should work with dateonly flag",
                      "fullTitle": "ICalTools formatDate() Day.js should work with dateonly flag",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "assert.strictEqual(formatDate(null, dayjs('2018-07-05T18:24:00.052'), true, false), '20180705');",
                      "err": {},
                      "uuid": "1e14b839-dff1-4900-86a1-ce41510bc128",
                      "parentUUID": "4027850f-dccb-4ba9-89ff-08ba133a4904",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3375ebb7-31f5-481f-b62f-72ea43740144",
                    "c4a58ed9-5f86-4115-a499-9b4d571e3e26",
                    "0eba75ba-fa67-4399-aab8-4a6e471b8948",
                    "1e14b839-dff1-4900-86a1-ce41510bc128"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 5,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "afb9c71d-d3c5-4082-b62b-edf91bc57820",
              "title": "formatDateTZ()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work with timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const ed = { timezone: 'Europe/Berlin' };\nassert.strictEqual(formatDateTZ('Europe/Berlin', 'DSTART', moment('2018-07-02T15:48:05.000Z'), ed), 'DSTART;TZID=Europe/Berlin:20180702T174805');",
                  "err": {},
                  "uuid": "0ade1cea-2436-458d-afea-98d326a4bb2f",
                  "parentUUID": "afb9c71d-d3c5-4082-b62b-edf91bc57820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without timezone",
                  "fullTitle": "ICalTools formatDateTZ() should work without timezone",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z', {}), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "426cf73b-604c-4d58-bd7a-d48b07ef0d5c",
                  "parentUUID": "afb9c71d-d3c5-4082-b62b-edf91bc57820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work without eventdata parameter",
                  "fullTitle": "ICalTools formatDateTZ() should work without eventdata parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(formatDateTZ(null, 'DSTART', '2018-07-02T15:48:05.000Z'), 'DSTART:20180702T154805Z');",
                  "err": {},
                  "uuid": "a0fe9331-e834-446d-8e30-9809ea35001e",
                  "parentUUID": "afb9c71d-d3c5-4082-b62b-edf91bc57820",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ade1cea-2436-458d-afea-98d326a4bb2f",
                "426cf73b-604c-4d58-bd7a-d48b07ef0d5c",
                "a0fe9331-e834-446d-8e30-9809ea35001e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
              "title": "escape()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should escape \\",
                  "fullTitle": "ICalTools escape() should escape \\",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\\\ipsum', false), 'Lorem \\\\\\\\ipsum');",
                  "err": {},
                  "uuid": "022b3ad2-037a-43ec-86ee-a33d127333ba",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ;",
                  "fullTitle": "ICalTools escape() should escape ;",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem ;ipsum', false), 'Lorem \\\\;ipsum');",
                  "err": {},
                  "uuid": "c22dc2ed-3a64-4471-9034-1230a04956e3",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape ,",
                  "fullTitle": "ICalTools escape() should escape ,",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem, ipsum', false), 'Lorem\\\\, ipsum');",
                  "err": {},
                  "uuid": "75926b11-a565-4544-950e-0133e7a8ae39",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r",
                  "fullTitle": "ICalTools escape() should escape \\r",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\ripsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "e04a27cb-3de1-41e3-bfae-9e770ee503aa",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\n",
                  "fullTitle": "ICalTools escape() should escape \\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "0ae31297-86d1-47ac-81a3-c5a99b408779",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \\r\\n",
                  "fullTitle": "ICalTools escape() should escape \\r\\n",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \\r\\nipsum', false), 'Lorem \\\\nipsum');",
                  "err": {},
                  "uuid": "193ec019-a9d4-4273-a56e-10dfed5041e5",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should escape \" in text when inQuotes = true",
                  "fullTitle": "ICalTools escape() should escape \" in text when inQuotes = true",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', true), 'Lorem \\\\\"ipsum');",
                  "err": {},
                  "uuid": "8821bb26-b8fc-4d6e-8df9-c4ceb1e04a85",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not escape \" in text when inQuotes = false",
                  "fullTitle": "ICalTools escape() should not escape \" in text when inQuotes = false",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(escape('Lorem \"ipsum', false), 'Lorem \"ipsum');",
                  "err": {},
                  "uuid": "30a41609-1a74-4d31-8b20-f692db35b847",
                  "parentUUID": "48ef3bca-67af-49ae-9b6c-ffcd798d0484",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "022b3ad2-037a-43ec-86ee-a33d127333ba",
                "c22dc2ed-3a64-4471-9034-1230a04956e3",
                "75926b11-a565-4544-950e-0133e7a8ae39",
                "e04a27cb-3de1-41e3-bfae-9e770ee503aa",
                "0ae31297-86d1-47ac-81a3-c5a99b408779",
                "193ec019-a9d4-4273-a56e-10dfed5041e5",
                "8821bb26-b8fc-4d6e-8df9-c4ceb1e04a85",
                "30a41609-1a74-4d31-8b20-f692db35b847"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ab6a6bb0-83d5-4b1a-91d2-8efdaa8c5e03",
              "title": "foldLines()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should basically work correctly",
                  "fullTitle": "ICalTools foldLines() should basically work correctly",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujzvguhbghbbqwxowidoi21e8981'), '12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujz\\r\\n vguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "e4b753de-dee8-478a-864b-389d2e167b2c",
                  "parentUUID": "ab6a6bb0-83d5-4b1a-91d2-8efdaa8c5e03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not split surrogate pairs",
                  "fullTitle": "ICalTools foldLines() should not split surrogate pairs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(foldLines('👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcbiweciujvguhbghbbqwxowidoi21e8981'), '👋🏼12345678ikjhgztrde546rf7g8hjiomkjnhgqfcdxerdftgzuinjhgcfvtzvzvuwcb\\r\\n iweciujvguhbghbbqwxowidoi21e8981');",
                  "err": {},
                  "uuid": "d0fa019a-d918-47bf-a0f4-556f2cc4f527",
                  "parentUUID": "ab6a6bb0-83d5-4b1a-91d2-8efdaa8c5e03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e4b753de-dee8-478a-864b-389d2e167b2c",
                "d0fa019a-d918-47bf-a0f4-556f2cc4f527"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f53e222e-1858-4981-8296-88056d92f2ed",
              "title": "checkDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [],
              "suites": [
                {
                  "uuid": "f0edac85-2eeb-4bdf-a27f-4affa5fc86e5",
                  "title": "Date",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Date",
                      "fullTitle": "ICalTools checkDate() Date should work with valid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "2bf5c328-6b62-4f85-8e19-3104e5c586fc",
                      "parentUUID": "f0edac85-2eeb-4bdf-a27f-4affa5fc86e5",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Date",
                      "fullTitle": "ICalTools checkDate() Date should throw error for invalid Date",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = new Date('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "b4085d23-fd94-4ec4-bbf7-6bd17dc86d1e",
                      "parentUUID": "f0edac85-2eeb-4bdf-a27f-4affa5fc86e5",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "2bf5c328-6b62-4f85-8e19-3104e5c586fc",
                    "b4085d23-fd94-4ec4-bbf7-6bd17dc86d1e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "6964eae5-7bf7-411e-99f4-f135e9aff89c",
                  "title": "String",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid String",
                      "fullTitle": "ICalTools checkDate() String should work with valid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = '2021-03-28T13:15:23.587Z';\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "3c0c88f5-d49e-43de-8dc0-bce86d7108ad",
                      "parentUUID": "6964eae5-7bf7-411e-99f4-f135e9aff89c",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid String",
                      "fullTitle": "ICalTools checkDate() String should throw error for invalid String",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = 'foo';\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "2b446e69-9190-4a66-9e5a-c17d668189d8",
                      "parentUUID": "6964eae5-7bf7-411e-99f4-f135e9aff89c",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "3c0c88f5-d49e-43de-8dc0-bce86d7108ad",
                    "2b446e69-9190-4a66-9e5a-c17d668189d8"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 0,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e3a36372-4147-46da-a101-01d064e34914",
                  "title": "Luxon",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should work with valid Luxon",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.now();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "7d0b652e-614d-4218-a6ae-b96b00297004",
                      "parentUUID": "e3a36372-4147-46da-a101-01d064e34914",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Luxon",
                      "fullTitle": "ICalTools checkDate() Luxon should throw error for invalid Luxon",
                      "timedOut": false,
                      "duration": 1,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = DateTime.fromISO('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "4ee37638-6900-49b8-8319-e52050baa8f7",
                      "parentUUID": "e3a36372-4147-46da-a101-01d064e34914",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "7d0b652e-614d-4218-a6ae-b96b00297004",
                    "4ee37638-6900-49b8-8319-e52050baa8f7"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 1,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "0e137565-254f-497b-ab43-b0c26eafb97e",
                  "title": "Moment",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should work with valid Moment",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "0a70de9b-e17f-4244-a42f-7dd1f842b05c",
                      "parentUUID": "0e137565-254f-497b-ab43-b0c26eafb97e",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Moment",
                      "fullTitle": "ICalTools checkDate() Moment should throw error for invalid Moment",
                      "timedOut": false,
                      "duration": 10,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = moment('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "1046748f-4d56-4a27-8a49-7390da941242",
                      "parentUUID": "0e137565-254f-497b-ab43-b0c26eafb97e",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "0a70de9b-e17f-4244-a42f-7dd1f842b05c",
                    "1046748f-4d56-4a27-8a49-7390da941242"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 10,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                },
                {
                  "uuid": "e7d2ae0b-229f-4cf0-bc0e-449113fe44e8",
                  "title": "Day.js",
                  "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
                  "file": "/test/tools.ts",
                  "beforeHooks": [],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "should work with valid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should work with valid Day.js",
                      "timedOut": false,
                      "duration": 2,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs();\nassert.equal(checkDate(date, 'foo'), date);",
                      "err": {},
                      "uuid": "39028bae-af02-4d70-a414-cf05cd224fc0",
                      "parentUUID": "e7d2ae0b-229f-4cf0-bc0e-449113fe44e8",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "should throw error for invalid Day.js",
                      "fullTitle": "ICalTools checkDate() Day.js should throw error for invalid Day.js",
                      "timedOut": false,
                      "duration": 0,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "const date = dayjs('foo');\nassert.throws(() => {\n    checkDate(date, 'foo');\n}, /`foo` has to be a valid date!/);",
                      "err": {},
                      "uuid": "5f7e62b7-d6ad-429a-a556-9b0b451e327e",
                      "parentUUID": "e7d2ae0b-229f-4cf0-bc0e-449113fe44e8",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "39028bae-af02-4d70-a414-cf05cd224fc0",
                    "5f7e62b7-d6ad-429a-a556-9b0b451e327e"
                  ],
                  "failures": [],
                  "pending": [],
                  "skipped": [],
                  "duration": 2,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 2000
                }
              ],
              "passes": [],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
              "title": "toDate()",
              "fullFile": "/home/runner/work/ical-generator/ical-generator/test/tools.ts",
              "file": "/test/tools.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with strings",
                  "fullTitle": "ICalTools toDate() should work with strings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date.toJSON()), date);",
                  "err": {},
                  "uuid": "05d4c570-d9bb-4cb2-a8de-85c2acc43511",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with native Date",
                  "fullTitle": "ICalTools toDate() should work with native Date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(date), date);",
                  "err": {},
                  "uuid": "c2e0431a-9622-4df8-a226-02113c707b31",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment object",
                  "fullTitle": "ICalTools toDate() should work with moment object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(moment(date)), date);",
                  "err": {},
                  "uuid": "21cafaf5-d074-49e3-86e5-8eeb95d8ab25",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with moment-timezone object",
                  "fullTitle": "ICalTools toDate() should work with moment-timezone object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(momentTz(date)), date);",
                  "err": {},
                  "uuid": "1087f7e7-644d-404c-9aea-7049def93adf",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with Day.js object",
                  "fullTitle": "ICalTools toDate() should work with Day.js object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(dayjs(date)), date);",
                  "err": {},
                  "uuid": "c555cf3c-b902-4c71-a5c7-97b7d4910e6b",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with luxon DateTime object",
                  "fullTitle": "ICalTools toDate() should work with luxon DateTime object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const date = new Date();\nassert.deepStrictEqual(toDate(DateTime.fromJSDate(date)), date);",
                  "err": {},
                  "uuid": "40bc018f-3fc2-41e1-90c7-6f366fd62761",
                  "parentUUID": "6722ed9f-73d4-48e6-b428-0b9172c55cc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05d4c570-d9bb-4cb2-a8de-85c2acc43511",
                "c2e0431a-9622-4df8-a226-02113c707b31",
                "21cafaf5-d074-49e3-86e5-8eeb95d8ab25",
                "1087f7e7-644d-404c-9aea-7049def93adf",
                "c555cf3c-b902-4c71-a5c7-97b7d4910e6b",
                "40bc018f-3fc2-41e1-90c7-6f366fd62761"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}